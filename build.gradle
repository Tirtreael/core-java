apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'application'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

javadoc {
    options.addBooleanOption('html5', true)
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocsJar(type: Jar, dependsOn: javadoc, description: 'Creates a jar from the javadocs files.') {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

task FunctionsJar(dependsOn: classes, type: Jar,
        description: 'Creates a jar from the org.ignis.executor.api.functions classes.') {
    archiveClassifier.set('testFunctions')
    from sourceSets.main.output
    include 'org/ignis/executor/api/functions/**'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocsJar
    archives FunctionsJar
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.ignis'
            artifactId = 'core'
            version = '1.0'

            from components.java
        }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib/mpj-v0_44/lib'
    }
}

dependencies {
    implementation group: 'org.apache.thrift', name: 'libthrift', version: '0.13.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.14.0'
    implementation group: 'org.json', name: 'json', version: '20210307'
    implementation name: 'mpj'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}


test {
    useJUnitPlatform()
}

task copyToLib(type: Copy, description: 'Copy project dependencies.') {
    from project.configurations.compileClasspath
    into "$buildDir/libs"
}
build.dependsOn(copyToLib)

task jarAndLibs {
    dependsOn 'jar'
    dependsOn 'copyToLib'
}
