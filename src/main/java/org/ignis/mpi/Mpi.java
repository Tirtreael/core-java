//File generated by mpi4all v1.0 from mpich v3.4.3 DO NOT EDIT.
package org.ignis.mpi;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;


public final class Mpi {

    private Mpi() {
    }

    private static final Linker linker = Linker.nativeLinker();

    static {
        System.loadLibrary("mpi4alljava");
    }

    private static final SymbolLookup lib = SymbolLookup.loaderLookup();

    private static MemoryLayout layout(int n) {
        return MemoryLayout.structLayout(MemoryLayout.sequenceLayout(n, ValueLayout.JAVA_BYTE));
    }

    public static class Type {
        public final MemorySegment ms;

        Type(String n, int sz) {
            this(lib.lookup(n).get(), sz);
        }

        Type(MemorySegment ms, int sz) {
            this(MemorySegment.ofAddress(ms.address(), sz, MemorySession.global()));
        }

        Type(MemorySegment ms) {
            this.ms = ms;
        }

        public long bytes() {
            return ms.byteSize();
        }

        public void to(MemorySegment ms) {
            ms.copyFrom(this.ms);
        }
    }

    public static class C_string extends C_pointer<C_char> {

        public C_string(MemorySession session, int n) {
            super(C_char.array(session, n).ms);
        }

        public C_string(MemorySession session, String v) {
            this(session, v.length() + 1);
            setString(v);
        }

        public String getString() {
            return ms.getUtf8String(0);
        }

        public void setString(String v) {
            ms.setUtf8String(0, v);
        }
    }

    public static class C_long extends Type {

        public C_long(String n) {
            super(n, (int) ValueLayout.JAVA_LONG.byteSize());
        }

        public C_long(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<C_long> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static C_long alloc(MemorySession session) {
            return new C_long(session.allocate(ValueLayout.JAVA_LONG));
        }

        public static C_long from(MemorySession session, MemorySegment ms) {
            return new C_long(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<C_long> array(MemorySession session, int n) {
            return new C_pointer<C_long>(session.allocateArray((MemoryLayout) ValueLayout.JAVA_LONG, n));
        }

        public long get() {
            return (long) ms.address().get(ValueLayout.JAVA_LONG, 0);
        }

        public void set(long v) {
            ms.address().set(ValueLayout.JAVA_LONG, 0, v);
        }

        public static C_pointer<C_long> arrayOf(MemorySession session, long... e) {
            return new C_pointer<C_long>(session.allocateArray(ValueLayout.JAVA_LONG, e));
        }
    }


    public static class C_char extends Type {

        public C_char(String n) {
            super(n, (int) ValueLayout.JAVA_CHAR.byteSize());
        }

        public C_char(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<C_char> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static C_char alloc(MemorySession session) {
            return new C_char(session.allocate(ValueLayout.JAVA_CHAR));
        }

        public static C_char from(MemorySession session, MemorySegment ms) {
            return new C_char(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<C_char> array(MemorySession session, int n) {
            return new C_pointer<C_char>(session.allocateArray((MemoryLayout) ValueLayout.JAVA_CHAR, n));
        }

        public char get() {
            return (char) ms.address().get(ValueLayout.JAVA_CHAR, 0);
        }

        public void set(char v) {
            ms.address().set(ValueLayout.JAVA_CHAR, 0, v);
        }

        public static C_pointer<C_char> arrayOf(MemorySession session, char... e) {
            return new C_pointer<C_char>(session.allocateArray(ValueLayout.JAVA_CHAR, e));
        }
    }


    public static class C_double extends Type {

        public C_double(String n) {
            super(n, (int) ValueLayout.JAVA_DOUBLE.byteSize());
        }

        public C_double(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<C_double> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static C_double alloc(MemorySession session) {
            return new C_double(session.allocate(ValueLayout.JAVA_DOUBLE));
        }

        public static C_double from(MemorySession session, MemorySegment ms) {
            return new C_double(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<C_double> array(MemorySession session, int n) {
            return new C_pointer<C_double>(session.allocateArray((MemoryLayout) ValueLayout.JAVA_DOUBLE, n));
        }

        public double get() {
            return (double) ms.address().get(ValueLayout.JAVA_DOUBLE, 0);
        }

        public void set(double v) {
            ms.address().set(ValueLayout.JAVA_DOUBLE, 0, v);
        }

        public static C_pointer<C_double> arrayOf(MemorySession session, double... e) {
            return new C_pointer<C_double>(session.allocateArray(ValueLayout.JAVA_DOUBLE, e));
        }
    }


    public static class C_float extends Type {

        public C_float(String n) {
            super(n, (int) ValueLayout.JAVA_FLOAT.byteSize());
        }

        public C_float(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<C_float> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static C_float alloc(MemorySession session) {
            return new C_float(session.allocate(ValueLayout.JAVA_FLOAT));
        }

        public static C_float from(MemorySession session, MemorySegment ms) {
            return new C_float(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<C_float> array(MemorySession session, int n) {
            return new C_pointer<C_float>(session.allocateArray((MemoryLayout) ValueLayout.JAVA_FLOAT, n));
        }

        public float get() {
            return (float) ms.address().get(ValueLayout.JAVA_FLOAT, 0);
        }

        public void set(float v) {
            ms.address().set(ValueLayout.JAVA_FLOAT, 0, v);
        }

        public static C_pointer<C_float> arrayOf(MemorySession session, float... e) {
            return new C_pointer<C_float>(session.allocateArray(ValueLayout.JAVA_FLOAT, e));
        }
    }


    public static class C_int extends Type {

        public C_int(String n) {
            super(n, (int) ValueLayout.JAVA_INT.byteSize());
        }

        public C_int(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<C_int> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static C_int alloc(MemorySession session) {
            return new C_int(session.allocate(ValueLayout.JAVA_INT));
        }

        public static C_int from(MemorySession session, MemorySegment ms) {
            return new C_int(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<C_int> array(MemorySession session, int n) {
            return new C_pointer<C_int>(session.allocateArray((MemoryLayout) ValueLayout.JAVA_INT, n));
        }

        public int get() {
            return (int) ms.address().get(ValueLayout.JAVA_INT, 0);
        }

        public void set(int v) {
            ms.address().set(ValueLayout.JAVA_INT, 0, v);
        }

        public static C_pointer<C_int> arrayOf(MemorySession session, int... e) {
            return new C_pointer<C_int>(session.allocateArray(ValueLayout.JAVA_INT, e));
        }
    }


    public static class C_short extends Type {

        public C_short(String n) {
            super(n, (int) ValueLayout.JAVA_SHORT.byteSize());
        }

        public C_short(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<C_short> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static C_short alloc(MemorySession session) {
            return new C_short(session.allocate(ValueLayout.JAVA_SHORT));
        }

        public static C_short from(MemorySession session, MemorySegment ms) {
            return new C_short(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<C_short> array(MemorySession session, int n) {
            return new C_pointer<C_short>(session.allocateArray((MemoryLayout) ValueLayout.JAVA_SHORT, n));
        }

        public short get() {
            return (short) ms.address().get(ValueLayout.JAVA_SHORT, 0);
        }

        public void set(short v) {
            ms.address().set(ValueLayout.JAVA_SHORT, 0, v);
        }

        public static C_pointer<C_short> arrayOf(MemorySession session, short... e) {
            return new C_pointer<C_short>(session.allocateArray(ValueLayout.JAVA_SHORT, e));
        }
    }


    public static class C_pointer<E> extends Type {

        public final static C_pointer<Void> NULL = of(MemorySession.global(), MemoryAddress.NULL);

        public C_pointer(String n) {
            super(n, (int) ValueLayout.ADDRESS.byteSize());
        }

        public C_pointer(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<C_pointer<E>> pointer(MemorySession session) {
            return of(session, ms.address());
        }

        public <E2> C_pointer<E2> cast() {
            return new C_pointer<E2>(ms);
        }

        public static <E> C_pointer<E> alloc(MemorySession session) {
            return new C_pointer<E>(session.allocate(ValueLayout.ADDRESS));
        }

        public static <E> C_pointer<E> from(MemorySession session, MemorySegment ms) {
            {
                return new C_pointer<E>(session.allocate(ms.byteSize()).copyFrom(ms));
            }
        }

        public static <E> C_pointer<C_pointer<E>> array(MemorySession session, int n) {
            return new C_pointer<C_pointer<E>>(session.allocateArray((MemoryLayout) ValueLayout.ADDRESS, n));
        }

        public MemoryAddress getAddress() {
            return ms.get(ValueLayout.ADDRESS, 0);
        }

        public void setAddress(MemoryAddress a) {
            ms.set(ValueLayout.ADDRESS, 0, a);
        }

        static C_pointer of(MemorySession session, MemoryAddress address) {
            C_pointer p = alloc(session);
            p.ms.set(ValueLayout.ADDRESS, 0, address);
            return p;
        }

    }


    public static class MPI_Aint extends Type {

        public MPI_Aint(String n) {
            super(n, (int) layout(8).byteSize());
        }

        public MPI_Aint(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Aint> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Aint alloc(MemorySession session) {
            return new MPI_Aint(session.allocate(layout(8)));
        }

        public static MPI_Aint from(MemorySession session, MemorySegment ms) {
            return new MPI_Aint(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Aint> array(MemorySession session, int n) {
            return new C_pointer<MPI_Aint>(session.allocateArray((MemoryLayout) layout(8), n));
        }
    }


    public static class MPI_Comm extends Type {

        public MPI_Comm(String n) {
            super(n, (int) layout(4).byteSize());
        }

        public MPI_Comm(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Comm> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Comm alloc(MemorySession session) {
            return new MPI_Comm(session.allocate(layout(4)));
        }

        public static MPI_Comm from(MemorySession session, MemorySegment ms) {
            return new MPI_Comm(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Comm> array(MemorySession session, int n) {
            return new C_pointer<MPI_Comm>(session.allocateArray((MemoryLayout) layout(4), n));
        }
    }


    public static class MPI_Datatype extends Type {

        public MPI_Datatype(String n) {
            super(n, (int) layout(4).byteSize());
        }

        public MPI_Datatype(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Datatype> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Datatype alloc(MemorySession session) {
            return new MPI_Datatype(session.allocate(layout(4)));
        }

        public static MPI_Datatype from(MemorySession session, MemorySegment ms) {
            return new MPI_Datatype(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Datatype> array(MemorySession session, int n) {
            return new C_pointer<MPI_Datatype>(session.allocateArray((MemoryLayout) layout(4), n));
        }
    }


    public static class MPI_Errhandler extends Type {

        public MPI_Errhandler(String n) {
            super(n, (int) layout(4).byteSize());
        }

        public MPI_Errhandler(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Errhandler> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Errhandler alloc(MemorySession session) {
            return new MPI_Errhandler(session.allocate(layout(4)));
        }

        public static MPI_Errhandler from(MemorySession session, MemorySegment ms) {
            return new MPI_Errhandler(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Errhandler> array(MemorySession session, int n) {
            return new C_pointer<MPI_Errhandler>(session.allocateArray((MemoryLayout) layout(4), n));
        }
    }


    public static class MPI_File extends Type {

        public MPI_File(String n) {
            super(n, (int) layout(8).byteSize());
        }

        public MPI_File(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_File> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_File alloc(MemorySession session) {
            return new MPI_File(session.allocate(layout(8)));
        }

        public static MPI_File from(MemorySession session, MemorySegment ms) {
            return new MPI_File(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_File> array(MemorySession session, int n) {
            return new C_pointer<MPI_File>(session.allocateArray((MemoryLayout) layout(8), n));
        }
    }


    public static class MPI_Group extends Type {

        public MPI_Group(String n) {
            super(n, (int) layout(4).byteSize());
        }

        public MPI_Group(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Group> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Group alloc(MemorySession session) {
            return new MPI_Group(session.allocate(layout(4)));
        }

        public static MPI_Group from(MemorySession session, MemorySegment ms) {
            return new MPI_Group(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Group> array(MemorySession session, int n) {
            return new C_pointer<MPI_Group>(session.allocateArray((MemoryLayout) layout(4), n));
        }
    }


    public static class MPI_Info extends Type {

        public MPI_Info(String n) {
            super(n, (int) layout(4).byteSize());
        }

        public MPI_Info(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Info> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Info alloc(MemorySession session) {
            return new MPI_Info(session.allocate(layout(4)));
        }

        public static MPI_Info from(MemorySession session, MemorySegment ms) {
            return new MPI_Info(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Info> array(MemorySession session, int n) {
            return new C_pointer<MPI_Info>(session.allocateArray((MemoryLayout) layout(4), n));
        }
    }


    public static class MPI_Message extends Type {

        public MPI_Message(String n) {
            super(n, (int) layout(4).byteSize());
        }

        public MPI_Message(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Message> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Message alloc(MemorySession session) {
            return new MPI_Message(session.allocate(layout(4)));
        }

        public static MPI_Message from(MemorySession session, MemorySegment ms) {
            return new MPI_Message(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Message> array(MemorySession session, int n) {
            return new C_pointer<MPI_Message>(session.allocateArray((MemoryLayout) layout(4), n));
        }
    }


    public static class MPI_Offset extends Type {

        public MPI_Offset(String n) {
            super(n, (int) layout(8).byteSize());
        }

        public MPI_Offset(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Offset> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Offset alloc(MemorySession session) {
            return new MPI_Offset(session.allocate(layout(8)));
        }

        public static MPI_Offset from(MemorySession session, MemorySegment ms) {
            return new MPI_Offset(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Offset> array(MemorySession session, int n) {
            return new C_pointer<MPI_Offset>(session.allocateArray((MemoryLayout) layout(8), n));
        }
    }


    public static class MPI_Op extends Type {

        public MPI_Op(String n) {
            super(n, (int) layout(4).byteSize());
        }

        public MPI_Op(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Op> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Op alloc(MemorySession session) {
            return new MPI_Op(session.allocate(layout(4)));
        }

        public static MPI_Op from(MemorySession session, MemorySegment ms) {
            return new MPI_Op(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Op> array(MemorySession session, int n) {
            return new C_pointer<MPI_Op>(session.allocateArray((MemoryLayout) layout(4), n));
        }
    }


    public static class MPI_Request extends Type {

        public MPI_Request(String n) {
            super(n, (int) layout(4).byteSize());
        }

        public MPI_Request(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Request> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Request alloc(MemorySession session) {
            return new MPI_Request(session.allocate(layout(4)));
        }

        public static MPI_Request from(MemorySession session, MemorySegment ms) {
            return new MPI_Request(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Request> array(MemorySession session, int n) {
            return new C_pointer<MPI_Request>(session.allocateArray((MemoryLayout) layout(4), n));
        }
    }


    public static class MPI_T_cvar_handle extends Type {

        public MPI_T_cvar_handle(String n) {
            super(n, (int) layout(8).byteSize());
        }

        public MPI_T_cvar_handle(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_T_cvar_handle> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_T_cvar_handle alloc(MemorySession session) {
            return new MPI_T_cvar_handle(session.allocate(layout(8)));
        }

        public static MPI_T_cvar_handle from(MemorySession session, MemorySegment ms) {
            return new MPI_T_cvar_handle(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_T_cvar_handle> array(MemorySession session, int n) {
            return new C_pointer<MPI_T_cvar_handle>(session.allocateArray((MemoryLayout) layout(8), n));
        }
    }


    public static class MPI_T_enum extends Type {

        public MPI_T_enum(String n) {
            super(n, (int) layout(8).byteSize());
        }

        public MPI_T_enum(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_T_enum> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_T_enum alloc(MemorySession session) {
            return new MPI_T_enum(session.allocate(layout(8)));
        }

        public static MPI_T_enum from(MemorySession session, MemorySegment ms) {
            return new MPI_T_enum(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_T_enum> array(MemorySession session, int n) {
            return new C_pointer<MPI_T_enum>(session.allocateArray((MemoryLayout) layout(8), n));
        }
    }


    public static class MPI_T_pvar_handle extends Type {

        public MPI_T_pvar_handle(String n) {
            super(n, (int) layout(8).byteSize());
        }

        public MPI_T_pvar_handle(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_T_pvar_handle> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_T_pvar_handle alloc(MemorySession session) {
            return new MPI_T_pvar_handle(session.allocate(layout(8)));
        }

        public static MPI_T_pvar_handle from(MemorySession session, MemorySegment ms) {
            return new MPI_T_pvar_handle(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_T_pvar_handle> array(MemorySession session, int n) {
            return new C_pointer<MPI_T_pvar_handle>(session.allocateArray((MemoryLayout) layout(8), n));
        }
    }


    public static class MPI_T_pvar_session extends Type {

        public MPI_T_pvar_session(String n) {
            super(n, (int) layout(8).byteSize());
        }

        public MPI_T_pvar_session(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_T_pvar_session> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_T_pvar_session alloc(MemorySession session) {
            return new MPI_T_pvar_session(session.allocate(layout(8)));
        }

        public static MPI_T_pvar_session from(MemorySession session, MemorySegment ms) {
            return new MPI_T_pvar_session(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_T_pvar_session> array(MemorySession session, int n) {
            return new C_pointer<MPI_T_pvar_session>(session.allocateArray((MemoryLayout) layout(8), n));
        }
    }


    public static class MPI_Win extends Type {

        public MPI_Win(String n) {
            super(n, (int) layout(4).byteSize());
        }

        public MPI_Win(MemorySegment ms) {
            super(ms);
        }

        public C_pointer<MPI_Win> pointer(MemorySession session) {
            return new C_pointer(ms);
        }

        public static MPI_Win alloc(MemorySession session) {
            return new MPI_Win(session.allocate(layout(4)));
        }

        public static MPI_Win from(MemorySession session, MemorySegment ms) {
            return new MPI_Win(session.allocate(ms.byteSize()).copyFrom(ms));
        }

        public static C_pointer<MPI_Win> array(MemorySession session, int n) {
            return new C_pointer<MPI_Win>(session.allocateArray((MemoryLayout) layout(4), n));
        }
    }


    private static final MethodHandle C_MPI_ABORT = linker.downcallHandle(lib.lookup("MPI_Abort").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_ACCUMULATE = linker.downcallHandle(lib.lookup("MPI_Accumulate").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4), layout(4)));
    private static final MethodHandle C_MPI_ADD_ERROR_CLASS = linker.downcallHandle(lib.lookup("MPI_Add_error_class").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ADD_ERROR_CODE = linker.downcallHandle(lib.lookup("MPI_Add_error_code").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ADD_ERROR_STRING = linker.downcallHandle(lib.lookup("MPI_Add_error_string").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ADDRESS = linker.downcallHandle(lib.lookup("MPI_Address").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_AINT_ADD = linker.downcallHandle(lib.lookup("MPI_Aint_add").get(), FunctionDescriptor.of(layout(8), layout(8), layout(8)));
    private static final MethodHandle C_MPI_AINT_DIFF = linker.downcallHandle(lib.lookup("MPI_Aint_diff").get(), FunctionDescriptor.of(layout(8), layout(8), layout(8)));
    private static final MethodHandle C_MPI_ALLGATHER = linker.downcallHandle(lib.lookup("MPI_Allgather").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_ALLGATHERV = linker.downcallHandle(lib.lookup("MPI_Allgatherv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4)));
    private static final MethodHandle C_MPI_ALLOC_MEM = linker.downcallHandle(lib.lookup("MPI_Alloc_mem").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ALLREDUCE = linker.downcallHandle(lib.lookup("MPI_Allreduce").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), layout(4)));
    private static final MethodHandle C_MPI_ALLTOALL = linker.downcallHandle(lib.lookup("MPI_Alltoall").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_ALLTOALLV = linker.downcallHandle(lib.lookup("MPI_Alltoallv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4)));
    private static final MethodHandle C_MPI_ALLTOALLW = linker.downcallHandle(lib.lookup("MPI_Alltoallw").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4)));
    private static final MethodHandle C_MPI_ATTR_DELETE = linker.downcallHandle(lib.lookup("MPI_Attr_delete").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_ATTR_GET = linker.downcallHandle(lib.lookup("MPI_Attr_get").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ATTR_PUT = linker.downcallHandle(lib.lookup("MPI_Attr_put").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_BARRIER = linker.downcallHandle(lib.lookup("MPI_Barrier").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_BCAST = linker.downcallHandle(lib.lookup("MPI_Bcast").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_BSEND = linker.downcallHandle(lib.lookup("MPI_Bsend").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_BSEND_INIT = linker.downcallHandle(lib.lookup("MPI_Bsend_init").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_BUFFER_ATTACH = linker.downcallHandle(lib.lookup("MPI_Buffer_attach").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_BUFFER_DETACH = linker.downcallHandle(lib.lookup("MPI_Buffer_detach").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CANCEL = linker.downcallHandle(lib.lookup("MPI_Cancel").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CART_COORDS = linker.downcallHandle(lib.lookup("MPI_Cart_coords").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CART_CREATE = linker.downcallHandle(lib.lookup("MPI_Cart_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CART_GET = linker.downcallHandle(lib.lookup("MPI_Cart_get").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CART_MAP = linker.downcallHandle(lib.lookup("MPI_Cart_map").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CART_RANK = linker.downcallHandle(lib.lookup("MPI_Cart_rank").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CART_SHIFT = linker.downcallHandle(lib.lookup("MPI_Cart_shift").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CART_SUB = linker.downcallHandle(lib.lookup("MPI_Cart_sub").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CARTDIM_GET = linker.downcallHandle(lib.lookup("MPI_Cartdim_get").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_CLOSE_PORT = linker.downcallHandle(lib.lookup("MPI_Close_port").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_ACCEPT = linker.downcallHandle(lib.lookup("MPI_Comm_accept").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_CALL_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_Comm_call_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_COMM_COMPARE = linker.downcallHandle(lib.lookup("MPI_Comm_compare").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_CONNECT = linker.downcallHandle(lib.lookup("MPI_Comm_connect").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_CREATE = linker.downcallHandle(lib.lookup("MPI_Comm_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_CREATE_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_Comm_create_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_CREATE_GROUP = linker.downcallHandle(lib.lookup("MPI_Comm_create_group").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_CREATE_KEYVAL = linker.downcallHandle(lib.lookup("MPI_Comm_create_keyval").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_DELETE_ATTR = linker.downcallHandle(lib.lookup("MPI_Comm_delete_attr").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_COMM_DISCONNECT = linker.downcallHandle(lib.lookup("MPI_Comm_disconnect").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_DUP = linker.downcallHandle(lib.lookup("MPI_Comm_dup").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_DUP_WITH_INFO = linker.downcallHandle(lib.lookup("MPI_Comm_dup_with_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_FREE = linker.downcallHandle(lib.lookup("MPI_Comm_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_FREE_KEYVAL = linker.downcallHandle(lib.lookup("MPI_Comm_free_keyval").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_GET_ATTR = linker.downcallHandle(lib.lookup("MPI_Comm_get_attr").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_GET_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_Comm_get_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_GET_INFO = linker.downcallHandle(lib.lookup("MPI_Comm_get_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_GET_NAME = linker.downcallHandle(lib.lookup("MPI_Comm_get_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_GET_PARENT = linker.downcallHandle(lib.lookup("MPI_Comm_get_parent").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_GROUP = linker.downcallHandle(lib.lookup("MPI_Comm_group").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_IDUP = linker.downcallHandle(lib.lookup("MPI_Comm_idup").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_JOIN = linker.downcallHandle(lib.lookup("MPI_Comm_join").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_RANK = linker.downcallHandle(lib.lookup("MPI_Comm_rank").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_REMOTE_GROUP = linker.downcallHandle(lib.lookup("MPI_Comm_remote_group").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_REMOTE_SIZE = linker.downcallHandle(lib.lookup("MPI_Comm_remote_size").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_SET_ATTR = linker.downcallHandle(lib.lookup("MPI_Comm_set_attr").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_SET_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_Comm_set_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_COMM_SET_INFO = linker.downcallHandle(lib.lookup("MPI_Comm_set_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_COMM_SET_NAME = linker.downcallHandle(lib.lookup("MPI_Comm_set_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_SIZE = linker.downcallHandle(lib.lookup("MPI_Comm_size").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_SPAWN = linker.downcallHandle(lib.lookup("MPI_Comm_spawn").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_SPAWN_MULTIPLE = linker.downcallHandle(lib.lookup("MPI_Comm_spawn_multiple").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_SPLIT = linker.downcallHandle(lib.lookup("MPI_Comm_split").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_SPLIT_TYPE = linker.downcallHandle(lib.lookup("MPI_Comm_split_type").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMM_TEST_INTER = linker.downcallHandle(lib.lookup("MPI_Comm_test_inter").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_COMPARE_AND_SWAP = linker.downcallHandle(lib.lookup("MPI_Compare_and_swap").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_INT, layout(8), layout(4)));
    private static final MethodHandle C_MPI_DIMS_CREATE = linker.downcallHandle(lib.lookup("MPI_Dims_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_DIST_GRAPH_CREATE = linker.downcallHandle(lib.lookup("MPI_Dist_graph_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_DIST_GRAPH_CREATE_ADJACENT = linker.downcallHandle(lib.lookup("MPI_Dist_graph_create_adjacent").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_DIST_GRAPH_NEIGHBORS = linker.downcallHandle(lib.lookup("MPI_Dist_graph_neighbors").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_DIST_GRAPH_NEIGHBORS_COUNT = linker.downcallHandle(lib.lookup("MPI_Dist_graph_neighbors_count").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ERRHANDLER_CREATE = linker.downcallHandle(lib.lookup("MPI_Errhandler_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ERRHANDLER_FREE = linker.downcallHandle(lib.lookup("MPI_Errhandler_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ERRHANDLER_GET = linker.downcallHandle(lib.lookup("MPI_Errhandler_get").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ERRHANDLER_SET = linker.downcallHandle(lib.lookup("MPI_Errhandler_set").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_ERROR_CLASS = linker.downcallHandle(lib.lookup("MPI_Error_class").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ERROR_STRING = linker.downcallHandle(lib.lookup("MPI_Error_string").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_EXSCAN = linker.downcallHandle(lib.lookup("MPI_Exscan").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), layout(4)));
    private static final MethodHandle C_MPI_FETCH_AND_OP = linker.downcallHandle(lib.lookup("MPI_Fetch_and_op").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_INT, layout(8), layout(4), layout(4)));
    private static final MethodHandle C_MPI_FILE_CALL_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_File_call_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_FILE_CLOSE = linker.downcallHandle(lib.lookup("MPI_File_close").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_CREATE_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_File_create_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_DELETE = linker.downcallHandle(lib.lookup("MPI_File_delete").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4)));
    private static final MethodHandle C_MPI_FILE_GET_AMODE = linker.downcallHandle(lib.lookup("MPI_File_get_amode").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_ATOMICITY = linker.downcallHandle(lib.lookup("MPI_File_get_atomicity").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_BYTE_OFFSET = linker.downcallHandle(lib.lookup("MPI_File_get_byte_offset").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_File_get_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_GROUP = linker.downcallHandle(lib.lookup("MPI_File_get_group").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_INFO = linker.downcallHandle(lib.lookup("MPI_File_get_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_POSITION = linker.downcallHandle(lib.lookup("MPI_File_get_position").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_POSITION_SHARED = linker.downcallHandle(lib.lookup("MPI_File_get_position_shared").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_SIZE = linker.downcallHandle(lib.lookup("MPI_File_get_size").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_TYPE_EXTENT = linker.downcallHandle(lib.lookup("MPI_File_get_type_extent").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_GET_VIEW = linker.downcallHandle(lib.lookup("MPI_File_get_view").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IREAD = linker.downcallHandle(lib.lookup("MPI_File_iread").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IREAD_ALL = linker.downcallHandle(lib.lookup("MPI_File_iread_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IREAD_AT = linker.downcallHandle(lib.lookup("MPI_File_iread_at").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IREAD_AT_ALL = linker.downcallHandle(lib.lookup("MPI_File_iread_at_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IREAD_SHARED = linker.downcallHandle(lib.lookup("MPI_File_iread_shared").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IWRITE = linker.downcallHandle(lib.lookup("MPI_File_iwrite").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IWRITE_ALL = linker.downcallHandle(lib.lookup("MPI_File_iwrite_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IWRITE_AT = linker.downcallHandle(lib.lookup("MPI_File_iwrite_at").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IWRITE_AT_ALL = linker.downcallHandle(lib.lookup("MPI_File_iwrite_at_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_IWRITE_SHARED = linker.downcallHandle(lib.lookup("MPI_File_iwrite_shared").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_OPEN = linker.downcallHandle(lib.lookup("MPI_File_open").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_PREALLOCATE = linker.downcallHandle(lib.lookup("MPI_File_preallocate").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8)));
    private static final MethodHandle C_MPI_FILE_READ = linker.downcallHandle(lib.lookup("MPI_File_read").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_READ_ALL = linker.downcallHandle(lib.lookup("MPI_File_read_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_READ_ALL_BEGIN = linker.downcallHandle(lib.lookup("MPI_File_read_all_begin").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_FILE_READ_ALL_END = linker.downcallHandle(lib.lookup("MPI_File_read_all_end").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_READ_AT = linker.downcallHandle(lib.lookup("MPI_File_read_at").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_READ_AT_ALL = linker.downcallHandle(lib.lookup("MPI_File_read_at_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_READ_AT_ALL_BEGIN = linker.downcallHandle(lib.lookup("MPI_File_read_at_all_begin").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_FILE_READ_AT_ALL_END = linker.downcallHandle(lib.lookup("MPI_File_read_at_all_end").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_READ_ORDERED = linker.downcallHandle(lib.lookup("MPI_File_read_ordered").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_READ_ORDERED_BEGIN = linker.downcallHandle(lib.lookup("MPI_File_read_ordered_begin").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_FILE_READ_ORDERED_END = linker.downcallHandle(lib.lookup("MPI_File_read_ordered_end").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_READ_SHARED = linker.downcallHandle(lib.lookup("MPI_File_read_shared").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_SEEK = linker.downcallHandle(lib.lookup("MPI_File_seek").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_FILE_SEEK_SHARED = linker.downcallHandle(lib.lookup("MPI_File_seek_shared").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_FILE_SET_ATOMICITY = linker.downcallHandle(lib.lookup("MPI_File_set_atomicity").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_FILE_SET_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_File_set_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(4)));
    private static final MethodHandle C_MPI_FILE_SET_INFO = linker.downcallHandle(lib.lookup("MPI_File_set_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(4)));
    private static final MethodHandle C_MPI_FILE_SET_SIZE = linker.downcallHandle(lib.lookup("MPI_File_set_size").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8)));
    private static final MethodHandle C_MPI_FILE_SET_VIEW = linker.downcallHandle(lib.lookup("MPI_File_set_view").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), layout(4), layout(4), ValueLayout.ADDRESS, layout(4)));
    private static final MethodHandle C_MPI_FILE_SYNC = linker.downcallHandle(lib.lookup("MPI_File_sync").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8)));
    private static final MethodHandle C_MPI_FILE_WRITE = linker.downcallHandle(lib.lookup("MPI_File_write").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_WRITE_ALL = linker.downcallHandle(lib.lookup("MPI_File_write_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_WRITE_ALL_BEGIN = linker.downcallHandle(lib.lookup("MPI_File_write_all_begin").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_FILE_WRITE_ALL_END = linker.downcallHandle(lib.lookup("MPI_File_write_all_end").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_WRITE_AT = linker.downcallHandle(lib.lookup("MPI_File_write_at").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_WRITE_AT_ALL = linker.downcallHandle(lib.lookup("MPI_File_write_at_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_WRITE_AT_ALL_BEGIN = linker.downcallHandle(lib.lookup("MPI_File_write_at_all_begin").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_FILE_WRITE_AT_ALL_END = linker.downcallHandle(lib.lookup("MPI_File_write_at_all_end").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_WRITE_ORDERED = linker.downcallHandle(lib.lookup("MPI_File_write_ordered").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_WRITE_ORDERED_BEGIN = linker.downcallHandle(lib.lookup("MPI_File_write_ordered_begin").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_FILE_WRITE_ORDERED_END = linker.downcallHandle(lib.lookup("MPI_File_write_ordered_end").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FILE_WRITE_SHARED = linker.downcallHandle(lib.lookup("MPI_File_write_shared").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FINALIZE = linker.downcallHandle(lib.lookup("MPI_Finalize").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_FINALIZED = linker.downcallHandle(lib.lookup("MPI_Finalized").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_FREE_MEM = linker.downcallHandle(lib.lookup("MPI_Free_mem").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GATHER = linker.downcallHandle(lib.lookup("MPI_Gather").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_GATHERV = linker.downcallHandle(lib.lookup("MPI_Gatherv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_GET = linker.downcallHandle(lib.lookup("MPI_Get").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_GET_ACCUMULATE = linker.downcallHandle(lib.lookup("MPI_Get_accumulate").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4), layout(4)));
    private static final MethodHandle C_MPI_GET_ADDRESS = linker.downcallHandle(lib.lookup("MPI_Get_address").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GET_COUNT = linker.downcallHandle(lib.lookup("MPI_Get_count").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GET_ELEMENTS = linker.downcallHandle(lib.lookup("MPI_Get_elements").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GET_ELEMENTS_X = linker.downcallHandle(lib.lookup("MPI_Get_elements_x").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GET_LIBRARY_VERSION = linker.downcallHandle(lib.lookup("MPI_Get_library_version").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GET_PROCESSOR_NAME = linker.downcallHandle(lib.lookup("MPI_Get_processor_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GET_VERSION = linker.downcallHandle(lib.lookup("MPI_Get_version").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GRAPH_CREATE = linker.downcallHandle(lib.lookup("MPI_Graph_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GRAPH_GET = linker.downcallHandle(lib.lookup("MPI_Graph_get").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GRAPH_MAP = linker.downcallHandle(lib.lookup("MPI_Graph_map").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GRAPH_NEIGHBORS = linker.downcallHandle(lib.lookup("MPI_Graph_neighbors").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GRAPH_NEIGHBORS_COUNT = linker.downcallHandle(lib.lookup("MPI_Graph_neighbors_count").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GRAPHDIMS_GET = linker.downcallHandle(lib.lookup("MPI_Graphdims_get").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GREQUEST_COMPLETE = linker.downcallHandle(lib.lookup("MPI_Grequest_complete").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_GREQUEST_START = linker.downcallHandle(lib.lookup("MPI_Grequest_start").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_COMPARE = linker.downcallHandle(lib.lookup("MPI_Group_compare").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_DIFFERENCE = linker.downcallHandle(lib.lookup("MPI_Group_difference").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_EXCL = linker.downcallHandle(lib.lookup("MPI_Group_excl").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_FREE = linker.downcallHandle(lib.lookup("MPI_Group_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_INCL = linker.downcallHandle(lib.lookup("MPI_Group_incl").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_INTERSECTION = linker.downcallHandle(lib.lookup("MPI_Group_intersection").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_RANGE_EXCL = linker.downcallHandle(lib.lookup("MPI_Group_range_excl").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_RANGE_INCL = linker.downcallHandle(lib.lookup("MPI_Group_range_incl").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_RANK = linker.downcallHandle(lib.lookup("MPI_Group_rank").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_SIZE = linker.downcallHandle(lib.lookup("MPI_Group_size").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_TRANSLATE_RANKS = linker.downcallHandle(lib.lookup("MPI_Group_translate_ranks").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_GROUP_UNION = linker.downcallHandle(lib.lookup("MPI_Group_union").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IALLGATHER = linker.downcallHandle(lib.lookup("MPI_Iallgather").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IALLGATHERV = linker.downcallHandle(lib.lookup("MPI_Iallgatherv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IALLREDUCE = linker.downcallHandle(lib.lookup("MPI_Iallreduce").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IALLTOALL = linker.downcallHandle(lib.lookup("MPI_Ialltoall").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IALLTOALLV = linker.downcallHandle(lib.lookup("MPI_Ialltoallv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IALLTOALLW = linker.downcallHandle(lib.lookup("MPI_Ialltoallw").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IBARRIER = linker.downcallHandle(lib.lookup("MPI_Ibarrier").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IBCAST = linker.downcallHandle(lib.lookup("MPI_Ibcast").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IBSEND = linker.downcallHandle(lib.lookup("MPI_Ibsend").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IEXSCAN = linker.downcallHandle(lib.lookup("MPI_Iexscan").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IGATHER = linker.downcallHandle(lib.lookup("MPI_Igather").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IGATHERV = linker.downcallHandle(lib.lookup("MPI_Igatherv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IMPROBE = linker.downcallHandle(lib.lookup("MPI_Improbe").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IMRECV = linker.downcallHandle(lib.lookup("MPI_Imrecv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INEIGHBOR_ALLGATHER = linker.downcallHandle(lib.lookup("MPI_Ineighbor_allgather").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INEIGHBOR_ALLGATHERV = linker.downcallHandle(lib.lookup("MPI_Ineighbor_allgatherv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INEIGHBOR_ALLTOALL = linker.downcallHandle(lib.lookup("MPI_Ineighbor_alltoall").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INEIGHBOR_ALLTOALLV = linker.downcallHandle(lib.lookup("MPI_Ineighbor_alltoallv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INEIGHBOR_ALLTOALLW = linker.downcallHandle(lib.lookup("MPI_Ineighbor_alltoallw").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INFO_CREATE = linker.downcallHandle(lib.lookup("MPI_Info_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INFO_DELETE = linker.downcallHandle(lib.lookup("MPI_Info_delete").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INFO_DUP = linker.downcallHandle(lib.lookup("MPI_Info_dup").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INFO_FREE = linker.downcallHandle(lib.lookup("MPI_Info_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INFO_GET = linker.downcallHandle(lib.lookup("MPI_Info_get").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INFO_GET_NKEYS = linker.downcallHandle(lib.lookup("MPI_Info_get_nkeys").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INFO_GET_NTHKEY = linker.downcallHandle(lib.lookup("MPI_Info_get_nthkey").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INFO_GET_VALUELEN = linker.downcallHandle(lib.lookup("MPI_Info_get_valuelen").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INFO_SET = linker.downcallHandle(lib.lookup("MPI_Info_set").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INIT = linker.downcallHandle(lib.lookup("MPI_Init").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INIT_THREAD = linker.downcallHandle(lib.lookup("MPI_Init_thread").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INITIALIZED = linker.downcallHandle(lib.lookup("MPI_Initialized").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INTERCOMM_CREATE = linker.downcallHandle(lib.lookup("MPI_Intercomm_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_INTERCOMM_MERGE = linker.downcallHandle(lib.lookup("MPI_Intercomm_merge").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IPROBE = linker.downcallHandle(lib.lookup("MPI_Iprobe").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IRECV = linker.downcallHandle(lib.lookup("MPI_Irecv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IREDUCE = linker.downcallHandle(lib.lookup("MPI_Ireduce").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IREDUCE_SCATTER = linker.downcallHandle(lib.lookup("MPI_Ireduce_scatter").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IREDUCE_SCATTER_BLOCK = linker.downcallHandle(lib.lookup("MPI_Ireduce_scatter_block").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IRSEND = linker.downcallHandle(lib.lookup("MPI_Irsend").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_IS_THREAD_MAIN = linker.downcallHandle(lib.lookup("MPI_Is_thread_main").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ISCAN = linker.downcallHandle(lib.lookup("MPI_Iscan").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ISCATTER = linker.downcallHandle(lib.lookup("MPI_Iscatter").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ISCATTERV = linker.downcallHandle(lib.lookup("MPI_Iscatterv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ISEND = linker.downcallHandle(lib.lookup("MPI_Isend").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_ISSEND = linker.downcallHandle(lib.lookup("MPI_Issend").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_KEYVAL_CREATE = linker.downcallHandle(lib.lookup("MPI_Keyval_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_KEYVAL_FREE = linker.downcallHandle(lib.lookup("MPI_Keyval_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_LOOKUP_NAME = linker.downcallHandle(lib.lookup("MPI_Lookup_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_MPROBE = linker.downcallHandle(lib.lookup("MPI_Mprobe").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_MRECV = linker.downcallHandle(lib.lookup("MPI_Mrecv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_NEIGHBOR_ALLGATHER = linker.downcallHandle(lib.lookup("MPI_Neighbor_allgather").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_NEIGHBOR_ALLGATHERV = linker.downcallHandle(lib.lookup("MPI_Neighbor_allgatherv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4)));
    private static final MethodHandle C_MPI_NEIGHBOR_ALLTOALL = linker.downcallHandle(lib.lookup("MPI_Neighbor_alltoall").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_NEIGHBOR_ALLTOALLV = linker.downcallHandle(lib.lookup("MPI_Neighbor_alltoallv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4)));
    private static final MethodHandle C_MPI_NEIGHBOR_ALLTOALLW = linker.downcallHandle(lib.lookup("MPI_Neighbor_alltoallw").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4)));
    private static final MethodHandle C_MPI_OP_COMMUTATIVE = linker.downcallHandle(lib.lookup("MPI_Op_commutative").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_OP_CREATE = linker.downcallHandle(lib.lookup("MPI_Op_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_OP_FREE = linker.downcallHandle(lib.lookup("MPI_Op_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_OPEN_PORT = linker.downcallHandle(lib.lookup("MPI_Open_port").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_PACK = linker.downcallHandle(lib.lookup("MPI_Pack").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4)));
    private static final MethodHandle C_MPI_PACK_EXTERNAL = linker.downcallHandle(lib.lookup("MPI_Pack_external").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_PACK_EXTERNAL_SIZE = linker.downcallHandle(lib.lookup("MPI_Pack_external_size").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_PACK_SIZE = linker.downcallHandle(lib.lookup("MPI_Pack_size").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_PCONTROL = linker.downcallHandle(lib.lookup("MPI_Pcontrol").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_PROBE = linker.downcallHandle(lib.lookup("MPI_Probe").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_PUBLISH_NAME = linker.downcallHandle(lib.lookup("MPI_Publish_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_PUT = linker.downcallHandle(lib.lookup("MPI_Put").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_QUERY_THREAD = linker.downcallHandle(lib.lookup("MPI_Query_thread").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_RACCUMULATE = linker.downcallHandle(lib.lookup("MPI_Raccumulate").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_RECV = linker.downcallHandle(lib.lookup("MPI_Recv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_RECV_INIT = linker.downcallHandle(lib.lookup("MPI_Recv_init").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_REDUCE = linker.downcallHandle(lib.lookup("MPI_Reduce").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_REDUCE_LOCAL = linker.downcallHandle(lib.lookup("MPI_Reduce_local").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_REDUCE_SCATTER = linker.downcallHandle(lib.lookup("MPI_Reduce_scatter").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), layout(4), layout(4)));
    private static final MethodHandle C_MPI_REDUCE_SCATTER_BLOCK = linker.downcallHandle(lib.lookup("MPI_Reduce_scatter_block").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), layout(4)));
    private static final MethodHandle C_MPI_REGISTER_DATAREP = linker.downcallHandle(lib.lookup("MPI_Register_datarep").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_REQUEST_FREE = linker.downcallHandle(lib.lookup("MPI_Request_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_REQUEST_GET_STATUS = linker.downcallHandle(lib.lookup("MPI_Request_get_status").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_RGET = linker.downcallHandle(lib.lookup("MPI_Rget").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_RGET_ACCUMULATE = linker.downcallHandle(lib.lookup("MPI_Rget_accumulate").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_RPUT = linker.downcallHandle(lib.lookup("MPI_Rput").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_RSEND = linker.downcallHandle(lib.lookup("MPI_Rsend").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_RSEND_INIT = linker.downcallHandle(lib.lookup("MPI_Rsend_init").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_SCAN = linker.downcallHandle(lib.lookup("MPI_Scan").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4), layout(4)));
    private static final MethodHandle C_MPI_SCATTER = linker.downcallHandle(lib.lookup("MPI_Scatter").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_SCATTERV = linker.downcallHandle(lib.lookup("MPI_Scatterv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_SEND = linker.downcallHandle(lib.lookup("MPI_Send").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_SEND_INIT = linker.downcallHandle(lib.lookup("MPI_Send_init").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_SENDRECV = linker.downcallHandle(lib.lookup("MPI_Sendrecv").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_SENDRECV_REPLACE = linker.downcallHandle(lib.lookup("MPI_Sendrecv_replace").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_SSEND = linker.downcallHandle(lib.lookup("MPI_Ssend").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_SSEND_INIT = linker.downcallHandle(lib.lookup("MPI_Ssend_init").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_START = linker.downcallHandle(lib.lookup("MPI_Start").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_STARTALL = linker.downcallHandle(lib.lookup("MPI_Startall").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_STATUS_SET_CANCELLED = linker.downcallHandle(lib.lookup("MPI_Status_set_cancelled").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_STATUS_SET_ELEMENTS = linker.downcallHandle(lib.lookup("MPI_Status_set_elements").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_STATUS_SET_ELEMENTS_X = linker.downcallHandle(lib.lookup("MPI_Status_set_elements_x").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.JAVA_LONG));
    private static final MethodHandle C_MPI_T_CATEGORY_CHANGED = linker.downcallHandle(lib.lookup("MPI_T_category_changed").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CATEGORY_GET_CATEGORIES = linker.downcallHandle(lib.lookup("MPI_T_category_get_categories").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CATEGORY_GET_CVARS = linker.downcallHandle(lib.lookup("MPI_T_category_get_cvars").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CATEGORY_GET_INDEX = linker.downcallHandle(lib.lookup("MPI_T_category_get_index").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CATEGORY_GET_INFO = linker.downcallHandle(lib.lookup("MPI_T_category_get_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CATEGORY_GET_NUM = linker.downcallHandle(lib.lookup("MPI_T_category_get_num").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CATEGORY_GET_PVARS = linker.downcallHandle(lib.lookup("MPI_T_category_get_pvars").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CVAR_GET_INDEX = linker.downcallHandle(lib.lookup("MPI_T_cvar_get_index").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CVAR_GET_INFO = linker.downcallHandle(lib.lookup("MPI_T_cvar_get_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CVAR_GET_NUM = linker.downcallHandle(lib.lookup("MPI_T_cvar_get_num").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CVAR_HANDLE_ALLOC = linker.downcallHandle(lib.lookup("MPI_T_cvar_handle_alloc").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CVAR_HANDLE_FREE = linker.downcallHandle(lib.lookup("MPI_T_cvar_handle_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CVAR_READ = linker.downcallHandle(lib.lookup("MPI_T_cvar_read").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_CVAR_WRITE = linker.downcallHandle(lib.lookup("MPI_T_cvar_write").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_ENUM_GET_INFO = linker.downcallHandle(lib.lookup("MPI_T_enum_get_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_ENUM_GET_ITEM = linker.downcallHandle(lib.lookup("MPI_T_enum_get_item").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_FINALIZE = linker.downcallHandle(lib.lookup("MPI_T_finalize").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_T_INIT_THREAD = linker.downcallHandle(lib.lookup("MPI_T_init_thread").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_GET_INDEX = linker.downcallHandle(lib.lookup("MPI_T_pvar_get_index").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_GET_INFO = linker.downcallHandle(lib.lookup("MPI_T_pvar_get_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_GET_NUM = linker.downcallHandle(lib.lookup("MPI_T_pvar_get_num").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_HANDLE_ALLOC = linker.downcallHandle(lib.lookup("MPI_T_pvar_handle_alloc").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_HANDLE_FREE = linker.downcallHandle(lib.lookup("MPI_T_pvar_handle_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_READ = linker.downcallHandle(lib.lookup("MPI_T_pvar_read").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_READRESET = linker.downcallHandle(lib.lookup("MPI_T_pvar_readreset").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_RESET = linker.downcallHandle(lib.lookup("MPI_T_pvar_reset").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8)));
    private static final MethodHandle C_MPI_T_PVAR_SESSION_CREATE = linker.downcallHandle(lib.lookup("MPI_T_pvar_session_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_SESSION_FREE = linker.downcallHandle(lib.lookup("MPI_T_pvar_session_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_T_PVAR_START = linker.downcallHandle(lib.lookup("MPI_T_pvar_start").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8)));
    private static final MethodHandle C_MPI_T_PVAR_STOP = linker.downcallHandle(lib.lookup("MPI_T_pvar_stop").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8)));
    private static final MethodHandle C_MPI_T_PVAR_WRITE = linker.downcallHandle(lib.lookup("MPI_T_pvar_write").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TEST = linker.downcallHandle(lib.lookup("MPI_Test").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TEST_CANCELLED = linker.downcallHandle(lib.lookup("MPI_Test_cancelled").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TESTALL = linker.downcallHandle(lib.lookup("MPI_Testall").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TESTANY = linker.downcallHandle(lib.lookup("MPI_Testany").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TESTSOME = linker.downcallHandle(lib.lookup("MPI_Testsome").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TOPO_TEST = linker.downcallHandle(lib.lookup("MPI_Topo_test").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_COMMIT = linker.downcallHandle(lib.lookup("MPI_Type_commit").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CONTIGUOUS = linker.downcallHandle(lib.lookup("MPI_Type_contiguous").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_DARRAY = linker.downcallHandle(lib.lookup("MPI_Type_create_darray").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_F90_COMPLEX = linker.downcallHandle(lib.lookup("MPI_Type_create_f90_complex").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_F90_INTEGER = linker.downcallHandle(lib.lookup("MPI_Type_create_f90_integer").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_F90_REAL = linker.downcallHandle(lib.lookup("MPI_Type_create_f90_real").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_HINDEXED = linker.downcallHandle(lib.lookup("MPI_Type_create_hindexed").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_HINDEXED_BLOCK = linker.downcallHandle(lib.lookup("MPI_Type_create_hindexed_block").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_HVECTOR = linker.downcallHandle(lib.lookup("MPI_Type_create_hvector").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(8), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_INDEXED_BLOCK = linker.downcallHandle(lib.lookup("MPI_Type_create_indexed_block").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_KEYVAL = linker.downcallHandle(lib.lookup("MPI_Type_create_keyval").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_RESIZED = linker.downcallHandle(lib.lookup("MPI_Type_create_resized").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(8), layout(8), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_STRUCT = linker.downcallHandle(lib.lookup("MPI_Type_create_struct").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_CREATE_SUBARRAY = linker.downcallHandle(lib.lookup("MPI_Type_create_subarray").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_DELETE_ATTR = linker.downcallHandle(lib.lookup("MPI_Type_delete_attr").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_TYPE_DUP = linker.downcallHandle(lib.lookup("MPI_Type_dup").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_EXTENT = linker.downcallHandle(lib.lookup("MPI_Type_extent").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_FREE = linker.downcallHandle(lib.lookup("MPI_Type_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_FREE_KEYVAL = linker.downcallHandle(lib.lookup("MPI_Type_free_keyval").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_GET_ATTR = linker.downcallHandle(lib.lookup("MPI_Type_get_attr").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_GET_CONTENTS = linker.downcallHandle(lib.lookup("MPI_Type_get_contents").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_GET_ENVELOPE = linker.downcallHandle(lib.lookup("MPI_Type_get_envelope").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_GET_EXTENT = linker.downcallHandle(lib.lookup("MPI_Type_get_extent").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_GET_EXTENT_X = linker.downcallHandle(lib.lookup("MPI_Type_get_extent_x").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_GET_NAME = linker.downcallHandle(lib.lookup("MPI_Type_get_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_GET_TRUE_EXTENT = linker.downcallHandle(lib.lookup("MPI_Type_get_true_extent").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_GET_TRUE_EXTENT_X = linker.downcallHandle(lib.lookup("MPI_Type_get_true_extent_x").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_HINDEXED = linker.downcallHandle(lib.lookup("MPI_Type_hindexed").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_HVECTOR = linker.downcallHandle(lib.lookup("MPI_Type_hvector").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(8), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_INDEXED = linker.downcallHandle(lib.lookup("MPI_Type_indexed").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_LB = linker.downcallHandle(lib.lookup("MPI_Type_lb").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_MATCH_SIZE = linker.downcallHandle(lib.lookup("MPI_Type_match_size").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_SET_ATTR = linker.downcallHandle(lib.lookup("MPI_Type_set_attr").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_SET_NAME = linker.downcallHandle(lib.lookup("MPI_Type_set_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_SIZE = linker.downcallHandle(lib.lookup("MPI_Type_size").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_SIZE_X = linker.downcallHandle(lib.lookup("MPI_Type_size_x").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_STRUCT = linker.downcallHandle(lib.lookup("MPI_Type_struct").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_UB = linker.downcallHandle(lib.lookup("MPI_Type_ub").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_TYPE_VECTOR = linker.downcallHandle(lib.lookup("MPI_Type_vector").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_UNPACK = linker.downcallHandle(lib.lookup("MPI_Unpack").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_UNPACK_EXTERNAL = linker.downcallHandle(lib.lookup("MPI_Unpack_external").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, layout(8), ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_UNPUBLISH_NAME = linker.downcallHandle(lib.lookup("MPI_Unpublish_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WAIT = linker.downcallHandle(lib.lookup("MPI_Wait").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WAITALL = linker.downcallHandle(lib.lookup("MPI_Waitall").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WAITANY = linker.downcallHandle(lib.lookup("MPI_Waitany").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WAITSOME = linker.downcallHandle(lib.lookup("MPI_Waitsome").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_ALLOCATE = linker.downcallHandle(lib.lookup("MPI_Win_allocate").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_ALLOCATE_SHARED = linker.downcallHandle(lib.lookup("MPI_Win_allocate_shared").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_ATTACH = linker.downcallHandle(lib.lookup("MPI_Win_attach").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, layout(8)));
    private static final MethodHandle C_MPI_WIN_CALL_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_Win_call_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_WIN_COMPLETE = linker.downcallHandle(lib.lookup("MPI_Win_complete").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_CREATE = linker.downcallHandle(lib.lookup("MPI_Win_create").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, layout(8), ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_CREATE_DYNAMIC = linker.downcallHandle(lib.lookup("MPI_Win_create_dynamic").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_CREATE_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_Win_create_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_CREATE_KEYVAL = linker.downcallHandle(lib.lookup("MPI_Win_create_keyval").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_DELETE_ATTR = linker.downcallHandle(lib.lookup("MPI_Win_delete_attr").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT));
    private static final MethodHandle C_MPI_WIN_DETACH = linker.downcallHandle(lib.lookup("MPI_Win_detach").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_FENCE = linker.downcallHandle(lib.lookup("MPI_Win_fence").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_FLUSH = linker.downcallHandle(lib.lookup("MPI_Win_flush").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_FLUSH_ALL = linker.downcallHandle(lib.lookup("MPI_Win_flush_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_FLUSH_LOCAL = linker.downcallHandle(lib.lookup("MPI_Win_flush_local").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_FLUSH_LOCAL_ALL = linker.downcallHandle(lib.lookup("MPI_Win_flush_local_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_FREE = linker.downcallHandle(lib.lookup("MPI_Win_free").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_FREE_KEYVAL = linker.downcallHandle(lib.lookup("MPI_Win_free_keyval").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_GET_ATTR = linker.downcallHandle(lib.lookup("MPI_Win_get_attr").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_GET_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_Win_get_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_GET_GROUP = linker.downcallHandle(lib.lookup("MPI_Win_get_group").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_GET_INFO = linker.downcallHandle(lib.lookup("MPI_Win_get_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_GET_NAME = linker.downcallHandle(lib.lookup("MPI_Win_get_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_LOCK = linker.downcallHandle(lib.lookup("MPI_Win_lock").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_LOCK_ALL = linker.downcallHandle(lib.lookup("MPI_Win_lock_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_POST = linker.downcallHandle(lib.lookup("MPI_Win_post").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_SET_ATTR = linker.downcallHandle(lib.lookup("MPI_Win_set_attr").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_SET_ERRHANDLER = linker.downcallHandle(lib.lookup("MPI_Win_set_errhandler").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_WIN_SET_INFO = linker.downcallHandle(lib.lookup("MPI_Win_set_info").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), layout(4)));
    private static final MethodHandle C_MPI_WIN_SET_NAME = linker.downcallHandle(lib.lookup("MPI_Win_set_name").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_SHARED_QUERY = linker.downcallHandle(lib.lookup("MPI_Win_shared_query").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_START = linker.downcallHandle(lib.lookup("MPI_Win_start").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_SYNC = linker.downcallHandle(lib.lookup("MPI_Win_sync").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_TEST = linker.downcallHandle(lib.lookup("MPI_Win_test").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4), ValueLayout.ADDRESS));
    private static final MethodHandle C_MPI_WIN_UNLOCK = linker.downcallHandle(lib.lookup("MPI_Win_unlock").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_UNLOCK_ALL = linker.downcallHandle(lib.lookup("MPI_Win_unlock_all").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WIN_WAIT = linker.downcallHandle(lib.lookup("MPI_Win_wait").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, layout(4)));
    private static final MethodHandle C_MPI_WTICK = linker.downcallHandle(lib.lookup("MPI_Wtick").get(), FunctionDescriptor.of(ValueLayout.JAVA_DOUBLE));
    private static final MethodHandle C_MPI_WTIME = linker.downcallHandle(lib.lookup("MPI_Wtime").get(), FunctionDescriptor.of(ValueLayout.JAVA_DOUBLE));


    public static final MPI_Datatype MPI_2DOUBLE_PRECISION = new MPI_Datatype("J_MPI_2DOUBLE_PRECISION");
    public static final MPI_Datatype MPI_2INT = new MPI_Datatype("J_MPI_2INT");
    public static final MPI_Datatype MPI_2INTEGER = new MPI_Datatype("J_MPI_2INTEGER");
    public static final MPI_Datatype MPI_2REAL = new MPI_Datatype("J_MPI_2REAL");
    public static final MPI_Datatype MPI_AINT = new MPI_Datatype("J_MPI_AINT");
    public static final C_pointer<C_char> MPI_AINT_FMT_DEC_SPEC = new C_pointer<C_char>("J_MPI_AINT_FMT_DEC_SPEC");
    public static final C_pointer<C_char> MPI_AINT_FMT_HEX_SPEC = new C_pointer<C_char>("J_MPI_AINT_FMT_HEX_SPEC");
    public static final int MPI_ANY_SOURCE = new C_int("J_MPI_ANY_SOURCE").get();
    public static final int MPI_ANY_TAG = new C_int("J_MPI_ANY_TAG").get();
    public static final int MPI_APPNUM = new C_int("J_MPI_APPNUM").get();
    public static final C_pointer<C_pointer<C_pointer<C_char>>> MPI_ARGVS_NULL = new C_pointer<C_pointer<C_pointer<C_char>>>("J_MPI_ARGVS_NULL");
    public static final C_pointer<C_pointer<C_char>> MPI_ARGV_NULL = new C_pointer<C_pointer<C_char>>("J_MPI_ARGV_NULL");
    public static final MPI_Op MPI_BAND = new MPI_Op("J_MPI_BAND");
    public static final MPI_Op MPI_BOR = new MPI_Op("J_MPI_BOR");
    public static final C_pointer<Void> MPI_BOTTOM = new C_pointer<Void>("J_MPI_BOTTOM");
    public static final int MPI_BSEND_OVERHEAD = new C_int("J_MPI_BSEND_OVERHEAD").get();
    public static final MPI_Op MPI_BXOR = new MPI_Op("J_MPI_BXOR");
    public static final MPI_Datatype MPI_BYTE = new MPI_Datatype("J_MPI_BYTE");
    public static final MPI_Datatype MPI_CHAR = new MPI_Datatype("J_MPI_CHAR");
    public static final MPI_Datatype MPI_CHARACTER = new MPI_Datatype("J_MPI_CHARACTER");
    public static final C_pointer<Void> MPI_COMM_DUP_FN = new C_pointer<Void>("J_MPI_COMM_DUP_FN");
    public static final MPI_Comm MPI_COMM_NULL = new MPI_Comm("J_MPI_COMM_NULL");
    public static final C_pointer<Void> MPI_COMM_NULL_COPY_FN = new C_pointer<Void>("J_MPI_COMM_NULL_COPY_FN");
    public static final C_pointer<Void> MPI_COMM_NULL_DELETE_FN = new C_pointer<Void>("J_MPI_COMM_NULL_DELETE_FN");
    public static final MPI_Comm MPI_COMM_SELF = new MPI_Comm("J_MPI_COMM_SELF");
    public static final int MPI_COMM_TYPE_SHARED = new C_int("J_MPI_COMM_TYPE_SHARED").get();
    public static final MPI_Comm MPI_COMM_WORLD = new MPI_Comm("J_MPI_COMM_WORLD");
    public static final MPI_Datatype MPI_COMPLEX = new MPI_Datatype("J_MPI_COMPLEX");
    public static final MPI_Datatype MPI_COMPLEX16 = new MPI_Datatype("J_MPI_COMPLEX16");
    public static final MPI_Datatype MPI_COMPLEX32 = new MPI_Datatype("J_MPI_COMPLEX32");
    public static final MPI_Datatype MPI_COMPLEX8 = new MPI_Datatype("J_MPI_COMPLEX8");
    public static final int MPI_CONGRUENT = new C_int("J_MPI_CONGRUENT").get();
    public static final C_pointer<Void> MPI_CONVERSION_FN_NULL = new C_pointer<Void>("J_MPI_CONVERSION_FN_NULL");
    public static final MPI_Datatype MPI_COUNT = new MPI_Datatype("J_MPI_COUNT");
    public static final MPI_Datatype MPI_CXX_BOOL = new MPI_Datatype("J_MPI_CXX_BOOL");
    public static final MPI_Datatype MPI_CXX_DOUBLE_COMPLEX = new MPI_Datatype("J_MPI_CXX_DOUBLE_COMPLEX");
    public static final MPI_Datatype MPI_CXX_FLOAT_COMPLEX = new MPI_Datatype("J_MPI_CXX_FLOAT_COMPLEX");
    public static final MPI_Datatype MPI_CXX_LONG_DOUBLE_COMPLEX = new MPI_Datatype("J_MPI_CXX_LONG_DOUBLE_COMPLEX");
    public static final MPI_Datatype MPI_C_BOOL = new MPI_Datatype("J_MPI_C_BOOL");
    public static final int MPI_C_COMPLEX = new C_int("J_MPI_C_COMPLEX").get();
    public static final MPI_Datatype MPI_C_DOUBLE_COMPLEX = new MPI_Datatype("J_MPI_C_DOUBLE_COMPLEX");
    public static final MPI_Datatype MPI_C_FLOAT_COMPLEX = new MPI_Datatype("J_MPI_C_FLOAT_COMPLEX");
    public static final MPI_Datatype MPI_C_LONG_DOUBLE_COMPLEX = new MPI_Datatype("J_MPI_C_LONG_DOUBLE_COMPLEX");
    public static final MPI_Datatype MPI_DATATYPE_NULL = new MPI_Datatype("J_MPI_DATATYPE_NULL");
    public static final int MPI_DISPLACEMENT_CURRENT = new C_int("J_MPI_DISPLACEMENT_CURRENT").get();
    public static final int MPI_DISTRIBUTE_BLOCK = new C_int("J_MPI_DISTRIBUTE_BLOCK").get();
    public static final int MPI_DISTRIBUTE_CYCLIC = new C_int("J_MPI_DISTRIBUTE_CYCLIC").get();
    public static final int MPI_DISTRIBUTE_DFLT_DARG = new C_int("J_MPI_DISTRIBUTE_DFLT_DARG").get();
    public static final int MPI_DISTRIBUTE_NONE = new C_int("J_MPI_DISTRIBUTE_NONE").get();
    public static final MPI_Datatype MPI_DOUBLE = new MPI_Datatype("J_MPI_DOUBLE");
    public static final MPI_Datatype MPI_DOUBLE_COMPLEX = new MPI_Datatype("J_MPI_DOUBLE_COMPLEX");
    public static final MPI_Datatype MPI_DOUBLE_INT = new MPI_Datatype("J_MPI_DOUBLE_INT");
    public static final MPI_Datatype MPI_DOUBLE_PRECISION = new MPI_Datatype("J_MPI_DOUBLE_PRECISION");
    public static final C_pointer<Void> MPI_DUP_FN = new C_pointer<Void>("J_MPI_DUP_FN");
    public static final C_pointer<C_int> MPI_ERRCODES_IGNORE = new C_pointer<C_int>("J_MPI_ERRCODES_IGNORE");
    public static final MPI_Errhandler MPI_ERRHANDLER_NULL = new MPI_Errhandler("J_MPI_ERRHANDLER_NULL");
    public static final MPI_Errhandler MPI_ERRORS_ARE_FATAL = new MPI_Errhandler("J_MPI_ERRORS_ARE_FATAL");
    public static final MPI_Errhandler MPI_ERRORS_RETURN = new MPI_Errhandler("J_MPI_ERRORS_RETURN");
    public static final int MPI_ERR_ACCESS = new C_int("J_MPI_ERR_ACCESS").get();
    public static final int MPI_ERR_AMODE = new C_int("J_MPI_ERR_AMODE").get();
    public static final int MPI_ERR_ARG = new C_int("J_MPI_ERR_ARG").get();
    public static final int MPI_ERR_ASSERT = new C_int("J_MPI_ERR_ASSERT").get();
    public static final int MPI_ERR_BAD_FILE = new C_int("J_MPI_ERR_BAD_FILE").get();
    public static final int MPI_ERR_BASE = new C_int("J_MPI_ERR_BASE").get();
    public static final int MPI_ERR_BUFFER = new C_int("J_MPI_ERR_BUFFER").get();
    public static final int MPI_ERR_COMM = new C_int("J_MPI_ERR_COMM").get();
    public static final int MPI_ERR_CONVERSION = new C_int("J_MPI_ERR_CONVERSION").get();
    public static final int MPI_ERR_COUNT = new C_int("J_MPI_ERR_COUNT").get();
    public static final int MPI_ERR_DIMS = new C_int("J_MPI_ERR_DIMS").get();
    public static final int MPI_ERR_DISP = new C_int("J_MPI_ERR_DISP").get();
    public static final int MPI_ERR_DUP_DATAREP = new C_int("J_MPI_ERR_DUP_DATAREP").get();
    public static final int MPI_ERR_FILE = new C_int("J_MPI_ERR_FILE").get();
    public static final int MPI_ERR_FILE_EXISTS = new C_int("J_MPI_ERR_FILE_EXISTS").get();
    public static final int MPI_ERR_FILE_IN_USE = new C_int("J_MPI_ERR_FILE_IN_USE").get();
    public static final int MPI_ERR_GROUP = new C_int("J_MPI_ERR_GROUP").get();
    public static final int MPI_ERR_INFO = new C_int("J_MPI_ERR_INFO").get();
    public static final int MPI_ERR_INFO_KEY = new C_int("J_MPI_ERR_INFO_KEY").get();
    public static final int MPI_ERR_INFO_NOKEY = new C_int("J_MPI_ERR_INFO_NOKEY").get();
    public static final int MPI_ERR_INFO_VALUE = new C_int("J_MPI_ERR_INFO_VALUE").get();
    public static final int MPI_ERR_INTERN = new C_int("J_MPI_ERR_INTERN").get();
    public static final int MPI_ERR_IN_STATUS = new C_int("J_MPI_ERR_IN_STATUS").get();
    public static final int MPI_ERR_IO = new C_int("J_MPI_ERR_IO").get();
    public static final int MPI_ERR_KEYVAL = new C_int("J_MPI_ERR_KEYVAL").get();
    public static final int MPI_ERR_LASTCODE = new C_int("J_MPI_ERR_LASTCODE").get();
    public static final int MPI_ERR_LOCKTYPE = new C_int("J_MPI_ERR_LOCKTYPE").get();
    public static final int MPI_ERR_NAME = new C_int("J_MPI_ERR_NAME").get();
    public static final int MPI_ERR_NOT_SAME = new C_int("J_MPI_ERR_NOT_SAME").get();
    public static final int MPI_ERR_NO_MEM = new C_int("J_MPI_ERR_NO_MEM").get();
    public static final int MPI_ERR_NO_SPACE = new C_int("J_MPI_ERR_NO_SPACE").get();
    public static final int MPI_ERR_NO_SUCH_FILE = new C_int("J_MPI_ERR_NO_SUCH_FILE").get();
    public static final int MPI_ERR_OP = new C_int("J_MPI_ERR_OP").get();
    public static final int MPI_ERR_OTHER = new C_int("J_MPI_ERR_OTHER").get();
    public static final int MPI_ERR_PENDING = new C_int("J_MPI_ERR_PENDING").get();
    public static final int MPI_ERR_PORT = new C_int("J_MPI_ERR_PORT").get();
    public static final int MPI_ERR_QUOTA = new C_int("J_MPI_ERR_QUOTA").get();
    public static final int MPI_ERR_RANK = new C_int("J_MPI_ERR_RANK").get();
    public static final int MPI_ERR_READ_ONLY = new C_int("J_MPI_ERR_READ_ONLY").get();
    public static final int MPI_ERR_REQUEST = new C_int("J_MPI_ERR_REQUEST").get();
    public static final int MPI_ERR_RMA_ATTACH = new C_int("J_MPI_ERR_RMA_ATTACH").get();
    public static final int MPI_ERR_RMA_CONFLICT = new C_int("J_MPI_ERR_RMA_CONFLICT").get();
    public static final int MPI_ERR_RMA_FLAVOR = new C_int("J_MPI_ERR_RMA_FLAVOR").get();
    public static final int MPI_ERR_RMA_RANGE = new C_int("J_MPI_ERR_RMA_RANGE").get();
    public static final int MPI_ERR_RMA_SHARED = new C_int("J_MPI_ERR_RMA_SHARED").get();
    public static final int MPI_ERR_RMA_SYNC = new C_int("J_MPI_ERR_RMA_SYNC").get();
    public static final int MPI_ERR_ROOT = new C_int("J_MPI_ERR_ROOT").get();
    public static final int MPI_ERR_SERVICE = new C_int("J_MPI_ERR_SERVICE").get();
    public static final int MPI_ERR_SIZE = new C_int("J_MPI_ERR_SIZE").get();
    public static final int MPI_ERR_SPAWN = new C_int("J_MPI_ERR_SPAWN").get();
    public static final int MPI_ERR_TAG = new C_int("J_MPI_ERR_TAG").get();
    public static final int MPI_ERR_TOPOLOGY = new C_int("J_MPI_ERR_TOPOLOGY").get();
    public static final int MPI_ERR_TRUNCATE = new C_int("J_MPI_ERR_TRUNCATE").get();
    public static final int MPI_ERR_TYPE = new C_int("J_MPI_ERR_TYPE").get();
    public static final int MPI_ERR_UNKNOWN = new C_int("J_MPI_ERR_UNKNOWN").get();
    public static final int MPI_ERR_UNSUPPORTED_DATAREP = new C_int("J_MPI_ERR_UNSUPPORTED_DATAREP").get();
    public static final int MPI_ERR_UNSUPPORTED_OPERATION = new C_int("J_MPI_ERR_UNSUPPORTED_OPERATION").get();
    public static final int MPI_ERR_WIN = new C_int("J_MPI_ERR_WIN").get();
    public static final MPI_File MPI_FILE_NULL = new MPI_File("J_MPI_FILE_NULL");
    public static final MPI_Datatype MPI_FLOAT = new MPI_Datatype("J_MPI_FLOAT");
    public static final MPI_Datatype MPI_FLOAT_INT = new MPI_Datatype("J_MPI_FLOAT_INT");
    public static final MPI_Group MPI_GROUP_EMPTY = new MPI_Group("J_MPI_GROUP_EMPTY");
    public static final MPI_Group MPI_GROUP_NULL = new MPI_Group("J_MPI_GROUP_NULL");
    public static final int MPI_HOST = new C_int("J_MPI_HOST").get();
    public static final int MPI_IDENT = new C_int("J_MPI_IDENT").get();
    public static final MPI_Info MPI_INFO_ENV = new MPI_Info("J_MPI_INFO_ENV");
    public static final MPI_Info MPI_INFO_NULL = new MPI_Info("J_MPI_INFO_NULL");
    public static final MPI_Datatype MPI_INT = new MPI_Datatype("J_MPI_INT");
    public static final MPI_Datatype MPI_INT16_T = new MPI_Datatype("J_MPI_INT16_T");
    public static final MPI_Datatype MPI_INT32_T = new MPI_Datatype("J_MPI_INT32_T");
    public static final MPI_Datatype MPI_INT64_T = new MPI_Datatype("J_MPI_INT64_T");
    public static final MPI_Datatype MPI_INT8_T = new MPI_Datatype("J_MPI_INT8_T");
    public static final MPI_Datatype MPI_INTEGER = new MPI_Datatype("J_MPI_INTEGER");
    public static final MPI_Datatype MPI_INTEGER1 = new MPI_Datatype("J_MPI_INTEGER1");
    public static final MPI_Datatype MPI_INTEGER16 = new MPI_Datatype("J_MPI_INTEGER16");
    public static final MPI_Datatype MPI_INTEGER2 = new MPI_Datatype("J_MPI_INTEGER2");
    public static final MPI_Datatype MPI_INTEGER4 = new MPI_Datatype("J_MPI_INTEGER4");
    public static final MPI_Datatype MPI_INTEGER8 = new MPI_Datatype("J_MPI_INTEGER8");
    public static final C_pointer<Void> MPI_IN_PLACE = new C_pointer<Void>("J_MPI_IN_PLACE");
    public static final int MPI_IO = new C_int("J_MPI_IO").get();
    public static final int MPI_KEYVAL_INVALID = new C_int("J_MPI_KEYVAL_INVALID").get();
    public static final MPI_Op MPI_LAND = new MPI_Op("J_MPI_LAND");
    public static final int MPI_LASTUSEDCODE = new C_int("J_MPI_LASTUSEDCODE").get();
    public static final MPI_Datatype MPI_LB = new MPI_Datatype("J_MPI_LB");
    public static final int MPI_LOCK_EXCLUSIVE = new C_int("J_MPI_LOCK_EXCLUSIVE").get();
    public static final int MPI_LOCK_SHARED = new C_int("J_MPI_LOCK_SHARED").get();
    public static final MPI_Datatype MPI_LOGICAL = new MPI_Datatype("J_MPI_LOGICAL");
    public static final MPI_Datatype MPI_LONG = new MPI_Datatype("J_MPI_LONG");
    public static final MPI_Datatype MPI_LONG_DOUBLE = new MPI_Datatype("J_MPI_LONG_DOUBLE");
    public static final MPI_Datatype MPI_LONG_DOUBLE_INT = new MPI_Datatype("J_MPI_LONG_DOUBLE_INT");
    public static final MPI_Datatype MPI_LONG_INT = new MPI_Datatype("J_MPI_LONG_INT");
    public static final int MPI_LONG_LONG = new C_int("J_MPI_LONG_LONG").get();
    public static final MPI_Datatype MPI_LONG_LONG_INT = new MPI_Datatype("J_MPI_LONG_LONG_INT");
    public static final MPI_Op MPI_LOR = new MPI_Op("J_MPI_LOR");
    public static final MPI_Op MPI_LXOR = new MPI_Op("J_MPI_LXOR");
    public static final MPI_Op MPI_MAX = new MPI_Op("J_MPI_MAX");
    public static final MPI_Op MPI_MAXLOC = new MPI_Op("J_MPI_MAXLOC");
    public static final int MPI_MAX_DATAREP_STRING = new C_int("J_MPI_MAX_DATAREP_STRING").get();
    public static final int MPI_MAX_ERROR_STRING = new C_int("J_MPI_MAX_ERROR_STRING").get();
    public static final int MPI_MAX_INFO_KEY = new C_int("J_MPI_MAX_INFO_KEY").get();
    public static final int MPI_MAX_INFO_VAL = new C_int("J_MPI_MAX_INFO_VAL").get();
    public static final int MPI_MAX_LIBRARY_VERSION_STRING = new C_int("J_MPI_MAX_LIBRARY_VERSION_STRING").get();
    public static final int MPI_MAX_OBJECT_NAME = new C_int("J_MPI_MAX_OBJECT_NAME").get();
    public static final int MPI_MAX_PORT_NAME = new C_int("J_MPI_MAX_PORT_NAME").get();
    public static final int MPI_MAX_PROCESSOR_NAME = new C_int("J_MPI_MAX_PROCESSOR_NAME").get();
    public static final MPI_Message MPI_MESSAGE_NO_PROC = new MPI_Message("J_MPI_MESSAGE_NO_PROC");
    public static final MPI_Message MPI_MESSAGE_NULL = new MPI_Message("J_MPI_MESSAGE_NULL");
    public static final MPI_Op MPI_MIN = new MPI_Op("J_MPI_MIN");
    public static final MPI_Op MPI_MINLOC = new MPI_Op("J_MPI_MINLOC");
    public static final int MPI_MODE_APPEND = new C_int("J_MPI_MODE_APPEND").get();
    public static final int MPI_MODE_CREATE = new C_int("J_MPI_MODE_CREATE").get();
    public static final int MPI_MODE_DELETE_ON_CLOSE = new C_int("J_MPI_MODE_DELETE_ON_CLOSE").get();
    public static final int MPI_MODE_EXCL = new C_int("J_MPI_MODE_EXCL").get();
    public static final int MPI_MODE_NOCHECK = new C_int("J_MPI_MODE_NOCHECK").get();
    public static final int MPI_MODE_NOPRECEDE = new C_int("J_MPI_MODE_NOPRECEDE").get();
    public static final int MPI_MODE_NOPUT = new C_int("J_MPI_MODE_NOPUT").get();
    public static final int MPI_MODE_NOSTORE = new C_int("J_MPI_MODE_NOSTORE").get();
    public static final int MPI_MODE_NOSUCCEED = new C_int("J_MPI_MODE_NOSUCCEED").get();
    public static final int MPI_MODE_RDONLY = new C_int("J_MPI_MODE_RDONLY").get();
    public static final int MPI_MODE_RDWR = new C_int("J_MPI_MODE_RDWR").get();
    public static final int MPI_MODE_SEQUENTIAL = new C_int("J_MPI_MODE_SEQUENTIAL").get();
    public static final int MPI_MODE_UNIQUE_OPEN = new C_int("J_MPI_MODE_UNIQUE_OPEN").get();
    public static final int MPI_MODE_WRONLY = new C_int("J_MPI_MODE_WRONLY").get();
    public static final MPI_Op MPI_NO_OP = new MPI_Op("J_MPI_NO_OP");
    public static final C_pointer<Void> MPI_NULL_COPY_FN = new C_pointer<Void>("J_MPI_NULL_COPY_FN");
    public static final C_pointer<Void> MPI_NULL_DELETE_FN = new C_pointer<Void>("J_MPI_NULL_DELETE_FN");
    public static final MPI_Datatype MPI_OFFSET = new MPI_Datatype("J_MPI_OFFSET");
    public static final MPI_Op MPI_OP_NULL = new MPI_Op("J_MPI_OP_NULL");
    public static final int MPI_ORDER_C = new C_int("J_MPI_ORDER_C").get();
    public static final int MPI_ORDER_FORTRAN = new C_int("J_MPI_ORDER_FORTRAN").get();
    public static final MPI_Datatype MPI_PACKED = new MPI_Datatype("J_MPI_PACKED");
    public static final int MPI_PROC_NULL = new C_int("J_MPI_PROC_NULL").get();
    public static final MPI_Op MPI_PROD = new MPI_Op("J_MPI_PROD");
    public static final MPI_Datatype MPI_REAL = new MPI_Datatype("J_MPI_REAL");
    public static final MPI_Datatype MPI_REAL16 = new MPI_Datatype("J_MPI_REAL16");
    public static final MPI_Datatype MPI_REAL4 = new MPI_Datatype("J_MPI_REAL4");
    public static final MPI_Datatype MPI_REAL8 = new MPI_Datatype("J_MPI_REAL8");
    public static final MPI_Op MPI_REPLACE = new MPI_Op("J_MPI_REPLACE");
    public static final MPI_Request MPI_REQUEST_NULL = new MPI_Request("J_MPI_REQUEST_NULL");
    public static final int MPI_ROOT = new C_int("J_MPI_ROOT").get();
    public static final int MPI_SEEK_CUR = new C_int("J_MPI_SEEK_CUR").get();
    public static final int MPI_SEEK_END = new C_int("J_MPI_SEEK_END").get();
    public static final int MPI_SEEK_SET = new C_int("J_MPI_SEEK_SET").get();
    public static final MPI_Datatype MPI_SHORT = new MPI_Datatype("J_MPI_SHORT");
    public static final MPI_Datatype MPI_SHORT_INT = new MPI_Datatype("J_MPI_SHORT_INT");
    public static final MPI_Datatype MPI_SIGNED_CHAR = new MPI_Datatype("J_MPI_SIGNED_CHAR");
    public static final int MPI_SIMILAR = new C_int("J_MPI_SIMILAR").get();
    public static final C_pointer<Void> MPI_STATUSES_IGNORE = new C_pointer<Void>("J_MPI_STATUSES_IGNORE");
    public static final C_pointer<Void> MPI_STATUS_IGNORE = new C_pointer<Void>("J_MPI_STATUS_IGNORE");
    public static final int MPI_SUBVERSION = new C_int("J_MPI_SUBVERSION").get();
    public static final int MPI_SUCCESS = new C_int("J_MPI_SUCCESS").get();
    public static final MPI_Op MPI_SUM = new MPI_Op("J_MPI_SUM");
    public static final int MPI_TAG_UB = new C_int("J_MPI_TAG_UB").get();
    public static final int MPI_THREAD_FUNNELED = new C_int("J_MPI_THREAD_FUNNELED").get();
    public static final int MPI_THREAD_MULTIPLE = new C_int("J_MPI_THREAD_MULTIPLE").get();
    public static final int MPI_THREAD_SERIALIZED = new C_int("J_MPI_THREAD_SERIALIZED").get();
    public static final int MPI_THREAD_SINGLE = new C_int("J_MPI_THREAD_SINGLE").get();
    public static final int MPI_TYPECLASS_COMPLEX = new C_int("J_MPI_TYPECLASS_COMPLEX").get();
    public static final int MPI_TYPECLASS_INTEGER = new C_int("J_MPI_TYPECLASS_INTEGER").get();
    public static final int MPI_TYPECLASS_REAL = new C_int("J_MPI_TYPECLASS_REAL").get();
    public static final C_pointer<Void> MPI_TYPE_DUP_FN = new C_pointer<Void>("J_MPI_TYPE_DUP_FN");
    public static final C_pointer<Void> MPI_TYPE_NULL_COPY_FN = new C_pointer<Void>("J_MPI_TYPE_NULL_COPY_FN");
    public static final C_pointer<Void> MPI_TYPE_NULL_DELETE_FN = new C_pointer<Void>("J_MPI_TYPE_NULL_DELETE_FN");
    public static final MPI_T_cvar_handle MPI_T_CVAR_HANDLE_NULL = new MPI_T_cvar_handle("J_MPI_T_CVAR_HANDLE_NULL");
    public static final MPI_T_enum MPI_T_ENUM_NULL = new MPI_T_enum("J_MPI_T_ENUM_NULL");
    public static final int MPI_T_ERR_CANNOT_INIT = new C_int("J_MPI_T_ERR_CANNOT_INIT").get();
    public static final int MPI_T_ERR_CVAR_SET_NEVER = new C_int("J_MPI_T_ERR_CVAR_SET_NEVER").get();
    public static final int MPI_T_ERR_CVAR_SET_NOT_NOW = new C_int("J_MPI_T_ERR_CVAR_SET_NOT_NOW").get();
    public static final int MPI_T_ERR_INVALID = new C_int("J_MPI_T_ERR_INVALID").get();
    public static final int MPI_T_ERR_INVALID_HANDLE = new C_int("J_MPI_T_ERR_INVALID_HANDLE").get();
    public static final int MPI_T_ERR_INVALID_INDEX = new C_int("J_MPI_T_ERR_INVALID_INDEX").get();
    public static final int MPI_T_ERR_INVALID_ITEM = new C_int("J_MPI_T_ERR_INVALID_ITEM").get();
    public static final int MPI_T_ERR_INVALID_NAME = new C_int("J_MPI_T_ERR_INVALID_NAME").get();
    public static final int MPI_T_ERR_INVALID_SESSION = new C_int("J_MPI_T_ERR_INVALID_SESSION").get();
    public static final int MPI_T_ERR_MEMORY = new C_int("J_MPI_T_ERR_MEMORY").get();
    public static final int MPI_T_ERR_NOT_INITIALIZED = new C_int("J_MPI_T_ERR_NOT_INITIALIZED").get();
    public static final int MPI_T_ERR_OUT_OF_HANDLES = new C_int("J_MPI_T_ERR_OUT_OF_HANDLES").get();
    public static final int MPI_T_ERR_OUT_OF_SESSIONS = new C_int("J_MPI_T_ERR_OUT_OF_SESSIONS").get();
    public static final int MPI_T_ERR_PVAR_NO_ATOMIC = new C_int("J_MPI_T_ERR_PVAR_NO_ATOMIC").get();
    public static final int MPI_T_ERR_PVAR_NO_STARTSTOP = new C_int("J_MPI_T_ERR_PVAR_NO_STARTSTOP").get();
    public static final int MPI_T_ERR_PVAR_NO_WRITE = new C_int("J_MPI_T_ERR_PVAR_NO_WRITE").get();
    public static final MPI_T_pvar_handle MPI_T_PVAR_HANDLE_NULL = new MPI_T_pvar_handle("J_MPI_T_PVAR_HANDLE_NULL");
    public static final MPI_T_pvar_session MPI_T_PVAR_SESSION_NULL = new MPI_T_pvar_session("J_MPI_T_PVAR_SESSION_NULL");
    public static final MPI_Datatype MPI_UB = new MPI_Datatype("J_MPI_UB");
    public static final MPI_Datatype MPI_UINT16_T = new MPI_Datatype("J_MPI_UINT16_T");
    public static final MPI_Datatype MPI_UINT32_T = new MPI_Datatype("J_MPI_UINT32_T");
    public static final MPI_Datatype MPI_UINT64_T = new MPI_Datatype("J_MPI_UINT64_T");
    public static final MPI_Datatype MPI_UINT8_T = new MPI_Datatype("J_MPI_UINT8_T");
    public static final int MPI_UNDEFINED = new C_int("J_MPI_UNDEFINED").get();
    public static final int MPI_UNEQUAL = new C_int("J_MPI_UNEQUAL").get();
    public static final int MPI_UNIVERSE_SIZE = new C_int("J_MPI_UNIVERSE_SIZE").get();
    public static final MPI_Datatype MPI_UNSIGNED = new MPI_Datatype("J_MPI_UNSIGNED");
    public static final MPI_Datatype MPI_UNSIGNED_CHAR = new MPI_Datatype("J_MPI_UNSIGNED_CHAR");
    public static final MPI_Datatype MPI_UNSIGNED_LONG = new MPI_Datatype("J_MPI_UNSIGNED_LONG");
    public static final MPI_Datatype MPI_UNSIGNED_LONG_LONG = new MPI_Datatype("J_MPI_UNSIGNED_LONG_LONG");
    public static final MPI_Datatype MPI_UNSIGNED_SHORT = new MPI_Datatype("J_MPI_UNSIGNED_SHORT");
    public static final int MPI_VERSION = new C_int("J_MPI_VERSION").get();
    public static final MPI_Datatype MPI_WCHAR = new MPI_Datatype("J_MPI_WCHAR");
    public static final int MPI_WIN_BASE = new C_int("J_MPI_WIN_BASE").get();
    public static final int MPI_WIN_CREATE_FLAVOR = new C_int("J_MPI_WIN_CREATE_FLAVOR").get();
    public static final int MPI_WIN_DISP_UNIT = new C_int("J_MPI_WIN_DISP_UNIT").get();
    public static final C_pointer<Void> MPI_WIN_DUP_FN = new C_pointer<Void>("J_MPI_WIN_DUP_FN");
    public static final int MPI_WIN_MODEL = new C_int("J_MPI_WIN_MODEL").get();
    public static final MPI_Win MPI_WIN_NULL = new MPI_Win("J_MPI_WIN_NULL");
    public static final C_pointer<Void> MPI_WIN_NULL_COPY_FN = new C_pointer<Void>("J_MPI_WIN_NULL_COPY_FN");
    public static final C_pointer<Void> MPI_WIN_NULL_DELETE_FN = new C_pointer<Void>("J_MPI_WIN_NULL_DELETE_FN");
    public static final int MPI_WIN_SIZE = new C_int("J_MPI_WIN_SIZE").get();
    public static final int MPI_WTIME_IS_GLOBAL = new C_int("J_MPI_WTIME_IS_GLOBAL").get();

    @FunctionalInterface
    public interface MpiCall {
        Object call() throws Throwable;
    }

    public static final class MpiException extends RuntimeException {
        private final int code;

        MpiException(int c) {
            super("Mpi error code " + c);
            code = c;
        }

        MpiException(Throwable t) {
            super(t);
            code = 0;
        }

        public int getCode() {
            return code;
        }
    }

    private static void mpiCheck(MpiCall mc) {
        try {
            int c = (int) mc.call();
            if (c != MPI_SUCCESS) {
                throw new MpiException(c);
            }
        } catch (Throwable t) {
            throw new MpiException(t);
        }
    }


    private static Object mpiCheck0(MpiCall mc) {
        try {
            return mc.call();
        } catch (Throwable t) {
            throw new MpiException(t);
        }
    }


    public static void MPI_Abort(MPI_Comm comm, int errorcode) {
        mpiCheck(() -> C_MPI_ABORT.invoke(comm.ms, errorcode));
    }

    public static void MPI_Accumulate(/*(const void *)*/ C_pointer<Void> origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win) {
        mpiCheck(() -> C_MPI_ACCUMULATE.invoke(origin_addr.ms, origin_count, origin_datatype.ms, target_rank, target_disp.ms, target_count, target_datatype.ms, op.ms, win.ms));
    }

    public static void MPI_Add_error_class(C_pointer<C_int> errorclass) {
        mpiCheck(() -> C_MPI_ADD_ERROR_CLASS.invoke(errorclass.ms));
    }

    public static void MPI_Add_error_code(int errorclass, C_pointer<C_int> errorcode) {
        mpiCheck(() -> C_MPI_ADD_ERROR_CODE.invoke(errorclass, errorcode.ms));
    }

    public static void MPI_Add_error_string(int errorcode, C_pointer<C_char> string) {
        mpiCheck(() -> C_MPI_ADD_ERROR_STRING.invoke(errorcode, string.ms));
    }

    public static void MPI_Address(/*(void *)*/ C_pointer<Void> location, C_pointer<MPI_Aint> address) {
        mpiCheck(() -> C_MPI_ADDRESS.invoke(location.ms, address.ms));
    }

    public static void MPI_Aint_add(MPI_Aint _return, MPI_Aint base, MPI_Aint disp) {
        mpiCheck(() -> C_MPI_AINT_ADD.invoke(_return, base.ms, disp.ms));
    }

    public static void MPI_Aint_diff(MPI_Aint _return, MPI_Aint addr1, MPI_Aint addr2) {
        mpiCheck(() -> C_MPI_AINT_DIFF.invoke(_return, addr1.ms, addr2.ms));
    }

    public static void MPI_Allgather(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_ALLGATHER.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, comm.ms));
    }

    public static void MPI_Allgatherv(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> displs, MPI_Datatype recvtype, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_ALLGATHERV.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcounts.ms, displs.ms, recvtype.ms, comm.ms));
    }

    public static void MPI_Alloc_mem(MPI_Aint size, MPI_Info info, /*(void *)*/ C_pointer<Void> baseptr) {
        mpiCheck(() -> C_MPI_ALLOC_MEM.invoke(size.ms, info.ms, baseptr.ms));
    }

    public static void MPI_Allreduce(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_ALLREDUCE.invoke(sendbuf.ms, recvbuf.ms, count, datatype.ms, op.ms, comm.ms));
    }

    public static void MPI_Alltoall(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_ALLTOALL.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, comm.ms));
    }

    public static void MPI_Alltoallv(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<C_int> sdispls, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> rdispls, MPI_Datatype recvtype, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_ALLTOALLV.invoke(sendbuf.ms, sendcounts.ms, sdispls.ms, sendtype.ms, recvbuf.ms, recvcounts.ms, rdispls.ms, recvtype.ms, comm.ms));
    }

    public static void MPI_Alltoallw(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<C_int> sdispls, C_pointer<MPI_Datatype> sendtypes, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> rdispls, C_pointer<MPI_Datatype> recvtypes, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_ALLTOALLW.invoke(sendbuf.ms, sendcounts.ms, sdispls.ms, sendtypes.ms, recvbuf.ms, recvcounts.ms, rdispls.ms, recvtypes.ms, comm.ms));
    }

    public static void MPI_Attr_delete(MPI_Comm comm, int keyval) {
        mpiCheck(() -> C_MPI_ATTR_DELETE.invoke(comm.ms, keyval));
    }

    public static void MPI_Attr_get(MPI_Comm comm, int keyval, /*(void *)*/ C_pointer<Void> attribute_val, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_ATTR_GET.invoke(comm.ms, keyval, attribute_val.ms, flag.ms));
    }

    public static void MPI_Attr_put(MPI_Comm comm, int keyval, /*(void *)*/ C_pointer<Void> attribute_val) {
        mpiCheck(() -> C_MPI_ATTR_PUT.invoke(comm.ms, keyval, attribute_val.ms));
    }

    public static void MPI_Barrier(MPI_Comm comm) {
        mpiCheck(() -> C_MPI_BARRIER.invoke(comm.ms));
    }

    public static void MPI_Bcast(/*(void *)*/ C_pointer<Void> buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_BCAST.invoke(buffer.ms, count, datatype.ms, root, comm.ms));
    }

    public static void MPI_Bsend(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_BSEND.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms));
    }

    public static void MPI_Bsend_init(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_BSEND_INIT.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms, request.ms));
    }

    public static void MPI_Buffer_attach(/*(void *)*/ C_pointer<Void> buffer, int size) {
        mpiCheck(() -> C_MPI_BUFFER_ATTACH.invoke(buffer.ms, size));
    }

    public static void MPI_Buffer_detach(/*(void *)*/ C_pointer<Void> buffer_addr, C_pointer<C_int> size) {
        mpiCheck(() -> C_MPI_BUFFER_DETACH.invoke(buffer_addr.ms, size.ms));
    }

    public static void MPI_Cancel(C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_CANCEL.invoke(request.ms));
    }

    public static void MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, C_pointer<C_int> coords) {
        mpiCheck(() -> C_MPI_CART_COORDS.invoke(comm.ms, rank, maxdims, coords.ms));
    }

    public static void MPI_Cart_create(MPI_Comm comm_old, int ndims, C_pointer<C_int> dims, C_pointer<C_int> periods, int reorder, C_pointer<MPI_Comm> comm_cart) {
        mpiCheck(() -> C_MPI_CART_CREATE.invoke(comm_old.ms, ndims, dims.ms, periods.ms, reorder, comm_cart.ms));
    }

    public static void MPI_Cart_get(MPI_Comm comm, int maxdims, C_pointer<C_int> dims, C_pointer<C_int> periods, C_pointer<C_int> coords) {
        mpiCheck(() -> C_MPI_CART_GET.invoke(comm.ms, maxdims, dims.ms, periods.ms, coords.ms));
    }

    public static void MPI_Cart_map(MPI_Comm comm, int ndims, C_pointer<C_int> dims, C_pointer<C_int> periods, C_pointer<C_int> newrank) {
        mpiCheck(() -> C_MPI_CART_MAP.invoke(comm.ms, ndims, dims.ms, periods.ms, newrank.ms));
    }

    public static void MPI_Cart_rank(MPI_Comm comm, C_pointer<C_int> coords, C_pointer<C_int> rank) {
        mpiCheck(() -> C_MPI_CART_RANK.invoke(comm.ms, coords.ms, rank.ms));
    }

    public static void MPI_Cart_shift(MPI_Comm comm, int direction, int disp, C_pointer<C_int> rank_source, C_pointer<C_int> rank_dest) {
        mpiCheck(() -> C_MPI_CART_SHIFT.invoke(comm.ms, direction, disp, rank_source.ms, rank_dest.ms));
    }

    public static void MPI_Cart_sub(MPI_Comm comm, C_pointer<C_int> remain_dims, C_pointer<MPI_Comm> newcomm) {
        mpiCheck(() -> C_MPI_CART_SUB.invoke(comm.ms, remain_dims.ms, newcomm.ms));
    }

    public static void MPI_Cartdim_get(MPI_Comm comm, C_pointer<C_int> ndims) {
        mpiCheck(() -> C_MPI_CARTDIM_GET.invoke(comm.ms, ndims.ms));
    }

    public static void MPI_Close_port(C_pointer<C_char> port_name) {
        mpiCheck(() -> C_MPI_CLOSE_PORT.invoke(port_name.ms));
    }

    public static void MPI_Comm_accept(C_pointer<C_char> port_name, MPI_Info info, int root, MPI_Comm comm, C_pointer<MPI_Comm> newcomm) {
        mpiCheck(() -> C_MPI_COMM_ACCEPT.invoke(port_name.ms, info.ms, root, comm.ms, newcomm.ms));
    }

    public static void MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode) {
        mpiCheck(() -> C_MPI_COMM_CALL_ERRHANDLER.invoke(comm.ms, errorcode));
    }

    public static void MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, C_pointer<C_int> result) {
        mpiCheck(() -> C_MPI_COMM_COMPARE.invoke(comm1.ms, comm2.ms, result.ms));
    }

    public static void MPI_Comm_connect(C_pointer<C_char> port_name, MPI_Info info, int root, MPI_Comm comm, C_pointer<MPI_Comm> newcomm) {
        mpiCheck(() -> C_MPI_COMM_CONNECT.invoke(port_name.ms, info.ms, root, comm.ms, newcomm.ms));
    }

    public static void MPI_Comm_create(MPI_Comm comm, MPI_Group group, C_pointer<MPI_Comm> newcomm) {
        mpiCheck(() -> C_MPI_COMM_CREATE.invoke(comm.ms, group.ms, newcomm.ms));
    }

    public static void MPI_Comm_create_errhandler(/*(MPI_Comm_errhandler_function (*))*/ C_pointer<Void> comm_errhandler_fn, C_pointer<MPI_Errhandler> errhandler) {
        mpiCheck(() -> C_MPI_COMM_CREATE_ERRHANDLER.invoke(comm_errhandler_fn.ms, errhandler.ms));
    }

    public static void MPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, C_pointer<MPI_Comm> newcomm) {
        mpiCheck(() -> C_MPI_COMM_CREATE_GROUP.invoke(comm.ms, group.ms, tag, newcomm.ms));
    }

    public static void MPI_Comm_create_keyval(/*(MPI_Comm_copy_attr_function (*))*/ C_pointer<Void> comm_copy_attr_fn, /*(MPI_Comm_delete_attr_function (*))*/ C_pointer<Void> comm_delete_attr_fn, C_pointer<C_int> comm_keyval, /*(void *)*/ C_pointer<Void> extra_state) {
        mpiCheck(() -> C_MPI_COMM_CREATE_KEYVAL.invoke(comm_copy_attr_fn.ms, comm_delete_attr_fn.ms, comm_keyval.ms, extra_state.ms));
    }

    public static void MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval) {
        mpiCheck(() -> C_MPI_COMM_DELETE_ATTR.invoke(comm.ms, comm_keyval));
    }

    public static void MPI_Comm_disconnect(C_pointer<MPI_Comm> comm) {
        mpiCheck(() -> C_MPI_COMM_DISCONNECT.invoke(comm.ms));
    }

    public static void MPI_Comm_dup(MPI_Comm comm, C_pointer<MPI_Comm> newcomm) {
        mpiCheck(() -> C_MPI_COMM_DUP.invoke(comm.ms, newcomm.ms));
    }

    public static void MPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, C_pointer<MPI_Comm> newcomm) {
        mpiCheck(() -> C_MPI_COMM_DUP_WITH_INFO.invoke(comm.ms, info.ms, newcomm.ms));
    }

    public static void MPI_Comm_free(C_pointer<MPI_Comm> comm) {
        mpiCheck(() -> C_MPI_COMM_FREE.invoke(comm.ms));
    }

    public static void MPI_Comm_free_keyval(C_pointer<C_int> comm_keyval) {
        mpiCheck(() -> C_MPI_COMM_FREE_KEYVAL.invoke(comm_keyval.ms));
    }

    public static void MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, /*(void *)*/ C_pointer<Void> attribute_val, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_COMM_GET_ATTR.invoke(comm.ms, comm_keyval, attribute_val.ms, flag.ms));
    }

    public static void MPI_Comm_get_errhandler(MPI_Comm comm, C_pointer<MPI_Errhandler> errhandler) {
        mpiCheck(() -> C_MPI_COMM_GET_ERRHANDLER.invoke(comm.ms, errhandler.ms));
    }

    public static void MPI_Comm_get_info(MPI_Comm comm, C_pointer<MPI_Info> info) {
        mpiCheck(() -> C_MPI_COMM_GET_INFO.invoke(comm.ms, info.ms));
    }

    public static void MPI_Comm_get_name(MPI_Comm comm, C_pointer<C_char> comm_name, C_pointer<C_int> resultlen) {
        mpiCheck(() -> C_MPI_COMM_GET_NAME.invoke(comm.ms, comm_name.ms, resultlen.ms));
    }

    public static void MPI_Comm_get_parent(C_pointer<MPI_Comm> parent) {
        mpiCheck(() -> C_MPI_COMM_GET_PARENT.invoke(parent.ms));
    }

    public static void MPI_Comm_group(MPI_Comm comm, C_pointer<MPI_Group> group) {
        mpiCheck(() -> C_MPI_COMM_GROUP.invoke(comm.ms, group.ms));
    }

    public static void MPI_Comm_idup(MPI_Comm comm, C_pointer<MPI_Comm> newcomm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_COMM_IDUP.invoke(comm.ms, newcomm.ms, request.ms));
    }

    public static void MPI_Comm_join(int fd, C_pointer<MPI_Comm> intercomm) {
        mpiCheck(() -> C_MPI_COMM_JOIN.invoke(fd, intercomm.ms));
    }

    public static void MPI_Comm_rank(MPI_Comm comm, C_pointer<C_int> rank) {
        mpiCheck(() -> C_MPI_COMM_RANK.invoke(comm.ms, rank.ms));
    }

    public static void MPI_Comm_remote_group(MPI_Comm comm, C_pointer<MPI_Group> group) {
        mpiCheck(() -> C_MPI_COMM_REMOTE_GROUP.invoke(comm.ms, group.ms));
    }

    public static void MPI_Comm_remote_size(MPI_Comm comm, C_pointer<C_int> size) {
        mpiCheck(() -> C_MPI_COMM_REMOTE_SIZE.invoke(comm.ms, size.ms));
    }

    public static void MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, /*(void *)*/ C_pointer<Void> attribute_val) {
        mpiCheck(() -> C_MPI_COMM_SET_ATTR.invoke(comm.ms, comm_keyval, attribute_val.ms));
    }

    public static void MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler) {
        mpiCheck(() -> C_MPI_COMM_SET_ERRHANDLER.invoke(comm.ms, errhandler.ms));
    }

    public static void MPI_Comm_set_info(MPI_Comm comm, MPI_Info info) {
        mpiCheck(() -> C_MPI_COMM_SET_INFO.invoke(comm.ms, info.ms));
    }

    public static void MPI_Comm_set_name(MPI_Comm comm, C_pointer<C_char> comm_name) {
        mpiCheck(() -> C_MPI_COMM_SET_NAME.invoke(comm.ms, comm_name.ms));
    }

    public static void MPI_Comm_size(MPI_Comm comm, C_pointer<C_int> size) {
        mpiCheck(() -> C_MPI_COMM_SIZE.invoke(comm.ms, size.ms));
    }

    public static void MPI_Comm_spawn(C_pointer<C_char> command, C_pointer<C_pointer<C_char>> argv, int maxprocs, MPI_Info info, int root, MPI_Comm comm, C_pointer<MPI_Comm> intercomm, C_pointer<C_int> array_of_errcodes) {
        mpiCheck(() -> C_MPI_COMM_SPAWN.invoke(command.ms, argv.ms, maxprocs, info.ms, root, comm.ms, intercomm.ms, array_of_errcodes.ms));
    }

    public static void MPI_Comm_spawn_multiple(int count, C_pointer<C_pointer<C_char>> array_of_commands, C_pointer<C_pointer<C_pointer<C_char>>> array_of_argv, C_pointer<C_int> array_of_maxprocs, C_pointer<MPI_Info> array_of_info, int root, MPI_Comm comm, C_pointer<MPI_Comm> intercomm, C_pointer<C_int> array_of_errcodes) {
        mpiCheck(() -> C_MPI_COMM_SPAWN_MULTIPLE.invoke(count, array_of_commands.ms, array_of_argv.ms, array_of_maxprocs.ms, array_of_info.ms, root, comm.ms, intercomm.ms, array_of_errcodes.ms));
    }

    public static void MPI_Comm_split(MPI_Comm comm, int color, int key, C_pointer<MPI_Comm> newcomm) {
        mpiCheck(() -> C_MPI_COMM_SPLIT.invoke(comm.ms, color, key, newcomm.ms));
    }

    public static void MPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, C_pointer<MPI_Comm> newcomm) {
        mpiCheck(() -> C_MPI_COMM_SPLIT_TYPE.invoke(comm.ms, split_type, key, info.ms, newcomm.ms));
    }

    public static void MPI_Comm_test_inter(MPI_Comm comm, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_COMM_TEST_INTER.invoke(comm.ms, flag.ms));
    }

    public static void MPI_Compare_and_swap(/*(const void *)*/ C_pointer<Void> origin_addr, /*(const void *)*/ C_pointer<Void> compare_addr, /*(void *)*/ C_pointer<Void> result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win) {
        mpiCheck(() -> C_MPI_COMPARE_AND_SWAP.invoke(origin_addr.ms, compare_addr.ms, result_addr.ms, datatype.ms, target_rank, target_disp.ms, win.ms));
    }

    public static void MPI_Dims_create(int nnodes, int ndims, C_pointer<C_int> dims) {
        mpiCheck(() -> C_MPI_DIMS_CREATE.invoke(nnodes, ndims, dims.ms));
    }

    public static void MPI_Dist_graph_create(MPI_Comm comm_old, int n, C_pointer<C_int> sources, C_pointer<C_int> degrees, C_pointer<C_int> destinations, C_pointer<C_int> weights, MPI_Info info, int reorder, C_pointer<MPI_Comm> comm_dist_graph) {
        mpiCheck(() -> C_MPI_DIST_GRAPH_CREATE.invoke(comm_old.ms, n, sources.ms, degrees.ms, destinations.ms, weights.ms, info.ms, reorder, comm_dist_graph.ms));
    }

    public static void MPI_Dist_graph_create_adjacent(MPI_Comm comm_old, int indegree, C_pointer<C_int> sources, C_pointer<C_int> sourceweights, int outdegree, C_pointer<C_int> destinations, C_pointer<C_int> destweights, MPI_Info info, int reorder, C_pointer<MPI_Comm> comm_dist_graph) {
        mpiCheck(() -> C_MPI_DIST_GRAPH_CREATE_ADJACENT.invoke(comm_old.ms, indegree, sources.ms, sourceweights.ms, outdegree, destinations.ms, destweights.ms, info.ms, reorder, comm_dist_graph.ms));
    }

    public static void MPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree, C_pointer<C_int> sources, C_pointer<C_int> sourceweights, int maxoutdegree, C_pointer<C_int> destinations, C_pointer<C_int> destweights) {
        mpiCheck(() -> C_MPI_DIST_GRAPH_NEIGHBORS.invoke(comm.ms, maxindegree, sources.ms, sourceweights.ms, maxoutdegree, destinations.ms, destweights.ms));
    }

    public static void MPI_Dist_graph_neighbors_count(MPI_Comm comm, C_pointer<C_int> indegree, C_pointer<C_int> outdegree, C_pointer<C_int> weighted) {
        mpiCheck(() -> C_MPI_DIST_GRAPH_NEIGHBORS_COUNT.invoke(comm.ms, indegree.ms, outdegree.ms, weighted.ms));
    }

    public static void MPI_Errhandler_create(/*(MPI_Handler_function (*))*/ C_pointer<Void> function, C_pointer<MPI_Errhandler> errhandler) {
        mpiCheck(() -> C_MPI_ERRHANDLER_CREATE.invoke(function.ms, errhandler.ms));
    }

    public static void MPI_Errhandler_free(C_pointer<MPI_Errhandler> errhandler) {
        mpiCheck(() -> C_MPI_ERRHANDLER_FREE.invoke(errhandler.ms));
    }

    public static void MPI_Errhandler_get(MPI_Comm comm, C_pointer<MPI_Errhandler> errhandler) {
        mpiCheck(() -> C_MPI_ERRHANDLER_GET.invoke(comm.ms, errhandler.ms));
    }

    public static void MPI_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler) {
        mpiCheck(() -> C_MPI_ERRHANDLER_SET.invoke(comm.ms, errhandler.ms));
    }

    public static void MPI_Error_class(int errorcode, C_pointer<C_int> errorclass) {
        mpiCheck(() -> C_MPI_ERROR_CLASS.invoke(errorcode, errorclass.ms));
    }

    public static void MPI_Error_string(int errorcode, C_pointer<C_char> string, C_pointer<C_int> resultlen) {
        mpiCheck(() -> C_MPI_ERROR_STRING.invoke(errorcode, string.ms, resultlen.ms));
    }

    public static void MPI_Exscan(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_EXSCAN.invoke(sendbuf.ms, recvbuf.ms, count, datatype.ms, op.ms, comm.ms));
    }

    public static void MPI_Fetch_and_op(/*(const void *)*/ C_pointer<Void> origin_addr, /*(void *)*/ C_pointer<Void> result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win) {
        mpiCheck(() -> C_MPI_FETCH_AND_OP.invoke(origin_addr.ms, result_addr.ms, datatype.ms, target_rank, target_disp.ms, op.ms, win.ms));
    }

    public static void MPI_File_call_errhandler(MPI_File fh, int errorcode) {
        mpiCheck(() -> C_MPI_FILE_CALL_ERRHANDLER.invoke(fh.ms, errorcode));
    }

    public static void MPI_File_close(C_pointer<MPI_File> fh) {
        mpiCheck(() -> C_MPI_FILE_CLOSE.invoke(fh.ms));
    }

    public static void MPI_File_create_errhandler(/*(MPI_File_errhandler_function (*))*/ C_pointer<Void> file_errhandler_fn, C_pointer<MPI_Errhandler> errhandler) {
        mpiCheck(() -> C_MPI_FILE_CREATE_ERRHANDLER.invoke(file_errhandler_fn.ms, errhandler.ms));
    }

    public static void MPI_File_delete(C_pointer<C_char> filename, MPI_Info info) {
        mpiCheck(() -> C_MPI_FILE_DELETE.invoke(filename.ms, info.ms));
    }

    public static void MPI_File_get_amode(MPI_File fh, C_pointer<C_int> amode) {
        mpiCheck(() -> C_MPI_FILE_GET_AMODE.invoke(fh.ms, amode.ms));
    }

    public static void MPI_File_get_atomicity(MPI_File fh, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_FILE_GET_ATOMICITY.invoke(fh.ms, flag.ms));
    }

    public static void MPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset, C_pointer<MPI_Offset> disp) {
        mpiCheck(() -> C_MPI_FILE_GET_BYTE_OFFSET.invoke(fh.ms, offset.ms, disp.ms));
    }

    public static void MPI_File_get_errhandler(MPI_File file, C_pointer<MPI_Errhandler> errhandler) {
        mpiCheck(() -> C_MPI_FILE_GET_ERRHANDLER.invoke(file.ms, errhandler.ms));
    }

    public static void MPI_File_get_group(MPI_File fh, C_pointer<MPI_Group> group) {
        mpiCheck(() -> C_MPI_FILE_GET_GROUP.invoke(fh.ms, group.ms));
    }

    public static void MPI_File_get_info(MPI_File fh, C_pointer<MPI_Info> info_used) {
        mpiCheck(() -> C_MPI_FILE_GET_INFO.invoke(fh.ms, info_used.ms));
    }

    public static void MPI_File_get_position(MPI_File fh, C_pointer<MPI_Offset> offset) {
        mpiCheck(() -> C_MPI_FILE_GET_POSITION.invoke(fh.ms, offset.ms));
    }

    public static void MPI_File_get_position_shared(MPI_File fh, C_pointer<MPI_Offset> offset) {
        mpiCheck(() -> C_MPI_FILE_GET_POSITION_SHARED.invoke(fh.ms, offset.ms));
    }

    public static void MPI_File_get_size(MPI_File fh, C_pointer<MPI_Offset> size) {
        mpiCheck(() -> C_MPI_FILE_GET_SIZE.invoke(fh.ms, size.ms));
    }

    public static void MPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype, C_pointer<MPI_Aint> extent) {
        mpiCheck(() -> C_MPI_FILE_GET_TYPE_EXTENT.invoke(fh.ms, datatype.ms, extent.ms));
    }

    public static void MPI_File_get_view(MPI_File fh, C_pointer<MPI_Offset> disp, C_pointer<MPI_Datatype> etype, C_pointer<MPI_Datatype> filetype, C_pointer<C_char> datarep) {
        mpiCheck(() -> C_MPI_FILE_GET_VIEW.invoke(fh.ms, disp.ms, etype.ms, filetype.ms, datarep.ms));
    }

    public static void MPI_File_iread(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IREAD.invoke(fh.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_iread_all(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IREAD_ALL.invoke(fh.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_iread_at(MPI_File fh, MPI_Offset offset, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IREAD_AT.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_iread_at_all(MPI_File fh, MPI_Offset offset, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IREAD_AT_ALL.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_iread_shared(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IREAD_SHARED.invoke(fh.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_iwrite(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IWRITE.invoke(fh.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_iwrite_all(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IWRITE_ALL.invoke(fh.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IWRITE_AT.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_iwrite_at_all(MPI_File fh, MPI_Offset offset, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IWRITE_AT_ALL.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_iwrite_shared(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_FILE_IWRITE_SHARED.invoke(fh.ms, buf.ms, count, datatype.ms, request.ms));
    }

    public static void MPI_File_open(MPI_Comm comm, C_pointer<C_char> filename, int amode, MPI_Info info, C_pointer<MPI_File> fh) {
        mpiCheck(() -> C_MPI_FILE_OPEN.invoke(comm.ms, filename.ms, amode, info.ms, fh.ms));
    }

    public static void MPI_File_preallocate(MPI_File fh, MPI_Offset size) {
        mpiCheck(() -> C_MPI_FILE_PREALLOCATE.invoke(fh.ms, size.ms));
    }

    public static void MPI_File_read(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_READ.invoke(fh.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_read_all(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_READ_ALL.invoke(fh.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_read_all_begin(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype) {
        mpiCheck(() -> C_MPI_FILE_READ_ALL_BEGIN.invoke(fh.ms, buf.ms, count, datatype.ms));
    }

    public static void MPI_File_read_all_end(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_READ_ALL_END.invoke(fh.ms, buf.ms, status.ms));
    }

    public static void MPI_File_read_at(MPI_File fh, MPI_Offset offset, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_READ_AT.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_READ_AT_ALL.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype) {
        mpiCheck(() -> C_MPI_FILE_READ_AT_ALL_BEGIN.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms));
    }

    public static void MPI_File_read_at_all_end(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_READ_AT_ALL_END.invoke(fh.ms, buf.ms, status.ms));
    }

    public static void MPI_File_read_ordered(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_READ_ORDERED.invoke(fh.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_read_ordered_begin(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype) {
        mpiCheck(() -> C_MPI_FILE_READ_ORDERED_BEGIN.invoke(fh.ms, buf.ms, count, datatype.ms));
    }

    public static void MPI_File_read_ordered_end(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_READ_ORDERED_END.invoke(fh.ms, buf.ms, status.ms));
    }

    public static void MPI_File_read_shared(MPI_File fh, /*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_READ_SHARED.invoke(fh.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_seek(MPI_File fh, MPI_Offset offset, int whence) {
        mpiCheck(() -> C_MPI_FILE_SEEK.invoke(fh.ms, offset.ms, whence));
    }

    public static void MPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence) {
        mpiCheck(() -> C_MPI_FILE_SEEK_SHARED.invoke(fh.ms, offset.ms, whence));
    }

    public static void MPI_File_set_atomicity(MPI_File fh, int flag) {
        mpiCheck(() -> C_MPI_FILE_SET_ATOMICITY.invoke(fh.ms, flag));
    }

    public static void MPI_File_set_errhandler(MPI_File file, MPI_Errhandler errhandler) {
        mpiCheck(() -> C_MPI_FILE_SET_ERRHANDLER.invoke(file.ms, errhandler.ms));
    }

    public static void MPI_File_set_info(MPI_File fh, MPI_Info info) {
        mpiCheck(() -> C_MPI_FILE_SET_INFO.invoke(fh.ms, info.ms));
    }

    public static void MPI_File_set_size(MPI_File fh, MPI_Offset size) {
        mpiCheck(() -> C_MPI_FILE_SET_SIZE.invoke(fh.ms, size.ms));
    }

    public static void MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, C_pointer<C_char> datarep, MPI_Info info) {
        mpiCheck(() -> C_MPI_FILE_SET_VIEW.invoke(fh.ms, disp.ms, etype.ms, filetype.ms, datarep.ms, info.ms));
    }

    public static void MPI_File_sync(MPI_File fh) {
        mpiCheck(() -> C_MPI_FILE_SYNC.invoke(fh.ms));
    }

    public static void MPI_File_write(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_WRITE.invoke(fh.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_write_all(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_WRITE_ALL.invoke(fh.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_write_all_begin(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype) {
        mpiCheck(() -> C_MPI_FILE_WRITE_ALL_BEGIN.invoke(fh.ms, buf.ms, count, datatype.ms));
    }

    public static void MPI_File_write_all_end(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_WRITE_ALL_END.invoke(fh.ms, buf.ms, status.ms));
    }

    public static void MPI_File_write_at(MPI_File fh, MPI_Offset offset, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_WRITE_AT.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_WRITE_AT_ALL.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype) {
        mpiCheck(() -> C_MPI_FILE_WRITE_AT_ALL_BEGIN.invoke(fh.ms, offset.ms, buf.ms, count, datatype.ms));
    }

    public static void MPI_File_write_at_all_end(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_WRITE_AT_ALL_END.invoke(fh.ms, buf.ms, status.ms));
    }

    public static void MPI_File_write_ordered(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_WRITE_ORDERED.invoke(fh.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_File_write_ordered_begin(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype) {
        mpiCheck(() -> C_MPI_FILE_WRITE_ORDERED_BEGIN.invoke(fh.ms, buf.ms, count, datatype.ms));
    }

    public static void MPI_File_write_ordered_end(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_WRITE_ORDERED_END.invoke(fh.ms, buf.ms, status.ms));
    }

    public static void MPI_File_write_shared(MPI_File fh, /*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_FILE_WRITE_SHARED.invoke(fh.ms, buf.ms, count, datatype.ms, status.ms));
    }

    public static void MPI_Finalize() {
        mpiCheck(() -> C_MPI_FINALIZE.invoke());
    }

    public static void MPI_Finalized(C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_FINALIZED.invoke(flag.ms));
    }

    public static void MPI_Free_mem(/*(void *)*/ C_pointer<Void> base) {
        mpiCheck(() -> C_MPI_FREE_MEM.invoke(base.ms));
    }

    public static void MPI_Gather(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_GATHER.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, root, comm.ms));
    }

    public static void MPI_Gatherv(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> displs, MPI_Datatype recvtype, int root, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_GATHERV.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcounts.ms, displs.ms, recvtype.ms, root, comm.ms));
    }

    public static void MPI_Get(/*(void *)*/ C_pointer<Void> origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win) {
        mpiCheck(() -> C_MPI_GET.invoke(origin_addr.ms, origin_count, origin_datatype.ms, target_rank, target_disp.ms, target_count, target_datatype.ms, win.ms));
    }

    public static void MPI_Get_accumulate(/*(const void *)*/ C_pointer<Void> origin_addr, int origin_count, MPI_Datatype origin_datatype, /*(void *)*/ C_pointer<Void> result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win) {
        mpiCheck(() -> C_MPI_GET_ACCUMULATE.invoke(origin_addr.ms, origin_count, origin_datatype.ms, result_addr.ms, result_count, result_datatype.ms, target_rank, target_disp.ms, target_count, target_datatype.ms, op.ms, win.ms));
    }

    public static void MPI_Get_address(/*(const void *)*/ C_pointer<Void> location, C_pointer<MPI_Aint> address) {
        mpiCheck(() -> C_MPI_GET_ADDRESS.invoke(location.ms, address.ms));
    }

    public static void MPI_Get_count(/*(const MPI_Status *)*/ C_pointer<Void> status, MPI_Datatype datatype, C_pointer<C_int> count) {
        mpiCheck(() -> C_MPI_GET_COUNT.invoke(status.ms, datatype.ms, count.ms));
    }

    public static void MPI_Get_elements(/*(const MPI_Status *)*/ C_pointer<Void> status, MPI_Datatype datatype, C_pointer<C_int> count) {
        mpiCheck(() -> C_MPI_GET_ELEMENTS.invoke(status.ms, datatype.ms, count.ms));
    }

    public static void MPI_Get_elements_x(/*(const MPI_Status *)*/ C_pointer<Void> status, MPI_Datatype datatype, C_pointer<C_long> count) {
        mpiCheck(() -> C_MPI_GET_ELEMENTS_X.invoke(status.ms, datatype.ms, count.ms));
    }

    public static void MPI_Get_library_version(C_pointer<C_char> version, C_pointer<C_int> resultlen) {
        mpiCheck(() -> C_MPI_GET_LIBRARY_VERSION.invoke(version.ms, resultlen.ms));
    }

    public static void MPI_Get_processor_name(C_pointer<C_char> name, C_pointer<C_int> resultlen) {
        mpiCheck(() -> C_MPI_GET_PROCESSOR_NAME.invoke(name.ms, resultlen.ms));
    }

    public static void MPI_Get_version(C_pointer<C_int> version, C_pointer<C_int> subversion) {
        mpiCheck(() -> C_MPI_GET_VERSION.invoke(version.ms, subversion.ms));
    }

    public static void MPI_Graph_create(MPI_Comm comm_old, int nnodes, C_pointer<C_int> indx, C_pointer<C_int> edges, int reorder, C_pointer<MPI_Comm> comm_graph) {
        mpiCheck(() -> C_MPI_GRAPH_CREATE.invoke(comm_old.ms, nnodes, indx.ms, edges.ms, reorder, comm_graph.ms));
    }

    public static void MPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges, C_pointer<C_int> indx, C_pointer<C_int> edges) {
        mpiCheck(() -> C_MPI_GRAPH_GET.invoke(comm.ms, maxindex, maxedges, indx.ms, edges.ms));
    }

    public static void MPI_Graph_map(MPI_Comm comm, int nnodes, C_pointer<C_int> indx, C_pointer<C_int> edges, C_pointer<C_int> newrank) {
        mpiCheck(() -> C_MPI_GRAPH_MAP.invoke(comm.ms, nnodes, indx.ms, edges.ms, newrank.ms));
    }

    public static void MPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, C_pointer<C_int> neighbors) {
        mpiCheck(() -> C_MPI_GRAPH_NEIGHBORS.invoke(comm.ms, rank, maxneighbors, neighbors.ms));
    }

    public static void MPI_Graph_neighbors_count(MPI_Comm comm, int rank, C_pointer<C_int> nneighbors) {
        mpiCheck(() -> C_MPI_GRAPH_NEIGHBORS_COUNT.invoke(comm.ms, rank, nneighbors.ms));
    }

    public static void MPI_Graphdims_get(MPI_Comm comm, C_pointer<C_int> nnodes, C_pointer<C_int> nedges) {
        mpiCheck(() -> C_MPI_GRAPHDIMS_GET.invoke(comm.ms, nnodes.ms, nedges.ms));
    }

    public static void MPI_Grequest_complete(MPI_Request request) {
        mpiCheck(() -> C_MPI_GREQUEST_COMPLETE.invoke(request.ms));
    }

    public static void MPI_Grequest_start(/*(MPI_Grequest_query_function (*))*/ C_pointer<Void> query_fn, /*(MPI_Grequest_free_function (*))*/ C_pointer<Void> free_fn, /*(MPI_Grequest_cancel_function (*))*/ C_pointer<Void> cancel_fn, /*(void *)*/ C_pointer<Void> extra_state, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_GREQUEST_START.invoke(query_fn.ms, free_fn.ms, cancel_fn.ms, extra_state.ms, request.ms));
    }

    public static void MPI_Group_compare(MPI_Group group1, MPI_Group group2, C_pointer<C_int> result) {
        mpiCheck(() -> C_MPI_GROUP_COMPARE.invoke(group1.ms, group2.ms, result.ms));
    }

    public static void MPI_Group_difference(MPI_Group group1, MPI_Group group2, C_pointer<MPI_Group> newgroup) {
        mpiCheck(() -> C_MPI_GROUP_DIFFERENCE.invoke(group1.ms, group2.ms, newgroup.ms));
    }

    public static void MPI_Group_excl(MPI_Group group, int n, C_pointer<C_int> ranks, C_pointer<MPI_Group> newgroup) {
        mpiCheck(() -> C_MPI_GROUP_EXCL.invoke(group.ms, n, ranks.ms, newgroup.ms));
    }

    public static void MPI_Group_free(C_pointer<MPI_Group> group) {
        mpiCheck(() -> C_MPI_GROUP_FREE.invoke(group.ms));
    }

    public static void MPI_Group_incl(MPI_Group group, int n, C_pointer<C_int> ranks, C_pointer<MPI_Group> newgroup) {
        mpiCheck(() -> C_MPI_GROUP_INCL.invoke(group.ms, n, ranks.ms, newgroup.ms));
    }

    public static void MPI_Group_intersection(MPI_Group group1, MPI_Group group2, C_pointer<MPI_Group> newgroup) {
        mpiCheck(() -> C_MPI_GROUP_INTERSECTION.invoke(group1.ms, group2.ms, newgroup.ms));
    }

    public static void MPI_Group_range_excl(MPI_Group group, int n, /*(int (*)[3])*/ C_pointer<Void> ranges3, C_pointer<MPI_Group> newgroup) {
        mpiCheck(() -> C_MPI_GROUP_RANGE_EXCL.invoke(group.ms, n, ranges3.ms, newgroup.ms));
    }

    public static void MPI_Group_range_incl(MPI_Group group, int n, /*(int (*)[3])*/ C_pointer<Void> ranges3, C_pointer<MPI_Group> newgroup) {
        mpiCheck(() -> C_MPI_GROUP_RANGE_INCL.invoke(group.ms, n, ranges3.ms, newgroup.ms));
    }

    public static void MPI_Group_rank(MPI_Group group, C_pointer<C_int> rank) {
        mpiCheck(() -> C_MPI_GROUP_RANK.invoke(group.ms, rank.ms));
    }

    public static void MPI_Group_size(MPI_Group group, C_pointer<C_int> size) {
        mpiCheck(() -> C_MPI_GROUP_SIZE.invoke(group.ms, size.ms));
    }

    public static void MPI_Group_translate_ranks(MPI_Group group1, int n, C_pointer<C_int> ranks1, MPI_Group group2, C_pointer<C_int> ranks2) {
        mpiCheck(() -> C_MPI_GROUP_TRANSLATE_RANKS.invoke(group1.ms, n, ranks1.ms, group2.ms, ranks2.ms));
    }

    public static void MPI_Group_union(MPI_Group group1, MPI_Group group2, C_pointer<MPI_Group> newgroup) {
        mpiCheck(() -> C_MPI_GROUP_UNION.invoke(group1.ms, group2.ms, newgroup.ms));
    }

    public static void MPI_Iallgather(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IALLGATHER.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, comm.ms, request.ms));
    }

    public static void MPI_Iallgatherv(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> displs, MPI_Datatype recvtype, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IALLGATHERV.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcounts.ms, displs.ms, recvtype.ms, comm.ms, request.ms));
    }

    public static void MPI_Iallreduce(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IALLREDUCE.invoke(sendbuf.ms, recvbuf.ms, count, datatype.ms, op.ms, comm.ms, request.ms));
    }

    public static void MPI_Ialltoall(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IALLTOALL.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, comm.ms, request.ms));
    }

    public static void MPI_Ialltoallv(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<C_int> sdispls, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> rdispls, MPI_Datatype recvtype, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IALLTOALLV.invoke(sendbuf.ms, sendcounts.ms, sdispls.ms, sendtype.ms, recvbuf.ms, recvcounts.ms, rdispls.ms, recvtype.ms, comm.ms, request.ms));
    }

    public static void MPI_Ialltoallw(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<C_int> sdispls, C_pointer<MPI_Datatype> sendtypes, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> rdispls, C_pointer<MPI_Datatype> recvtypes, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IALLTOALLW.invoke(sendbuf.ms, sendcounts.ms, sdispls.ms, sendtypes.ms, recvbuf.ms, recvcounts.ms, rdispls.ms, recvtypes.ms, comm.ms, request.ms));
    }

    public static void MPI_Ibarrier(MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IBARRIER.invoke(comm.ms, request.ms));
    }

    public static void MPI_Ibcast(/*(void *)*/ C_pointer<Void> buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IBCAST.invoke(buffer.ms, count, datatype.ms, root, comm.ms, request.ms));
    }

    public static void MPI_Ibsend(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IBSEND.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms, request.ms));
    }

    public static void MPI_Iexscan(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IEXSCAN.invoke(sendbuf.ms, recvbuf.ms, count, datatype.ms, op.ms, comm.ms, request.ms));
    }

    public static void MPI_Igather(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IGATHER.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, root, comm.ms, request.ms));
    }

    public static void MPI_Igatherv(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> displs, MPI_Datatype recvtype, int root, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IGATHERV.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcounts.ms, displs.ms, recvtype.ms, root, comm.ms, request.ms));
    }

    public static void MPI_Improbe(int source, int tag, MPI_Comm comm, C_pointer<C_int> flag, C_pointer<MPI_Message> message, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_IMPROBE.invoke(source, tag, comm.ms, flag.ms, message.ms, status.ms));
    }

    public static void MPI_Imrecv(/*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Message> message, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IMRECV.invoke(buf.ms, count, datatype.ms, message.ms, request.ms));
    }

    public static void MPI_Ineighbor_allgather(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_INEIGHBOR_ALLGATHER.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, comm.ms, request.ms));
    }

    public static void MPI_Ineighbor_allgatherv(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> displs, MPI_Datatype recvtype, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_INEIGHBOR_ALLGATHERV.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcounts.ms, displs.ms, recvtype.ms, comm.ms, request.ms));
    }

    public static void MPI_Ineighbor_alltoall(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_INEIGHBOR_ALLTOALL.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, comm.ms, request.ms));
    }

    public static void MPI_Ineighbor_alltoallv(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<C_int> sdispls, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> rdispls, MPI_Datatype recvtype, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_INEIGHBOR_ALLTOALLV.invoke(sendbuf.ms, sendcounts.ms, sdispls.ms, sendtype.ms, recvbuf.ms, recvcounts.ms, rdispls.ms, recvtype.ms, comm.ms, request.ms));
    }

    public static void MPI_Ineighbor_alltoallw(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<MPI_Aint> sdispls, C_pointer<MPI_Datatype> sendtypes, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<MPI_Aint> rdispls, C_pointer<MPI_Datatype> recvtypes, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_INEIGHBOR_ALLTOALLW.invoke(sendbuf.ms, sendcounts.ms, sdispls.ms, sendtypes.ms, recvbuf.ms, recvcounts.ms, rdispls.ms, recvtypes.ms, comm.ms, request.ms));
    }

    public static void MPI_Info_create(C_pointer<MPI_Info> info) {
        mpiCheck(() -> C_MPI_INFO_CREATE.invoke(info.ms));
    }

    public static void MPI_Info_delete(MPI_Info info, C_pointer<C_char> key) {
        mpiCheck(() -> C_MPI_INFO_DELETE.invoke(info.ms, key.ms));
    }

    public static void MPI_Info_dup(MPI_Info info, C_pointer<MPI_Info> newinfo) {
        mpiCheck(() -> C_MPI_INFO_DUP.invoke(info.ms, newinfo.ms));
    }

    public static void MPI_Info_free(C_pointer<MPI_Info> info) {
        mpiCheck(() -> C_MPI_INFO_FREE.invoke(info.ms));
    }

    public static void MPI_Info_get(MPI_Info info, C_pointer<C_char> key, int valuelen, C_pointer<C_char> value, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_INFO_GET.invoke(info.ms, key.ms, valuelen, value.ms, flag.ms));
    }

    public static void MPI_Info_get_nkeys(MPI_Info info, C_pointer<C_int> nkeys) {
        mpiCheck(() -> C_MPI_INFO_GET_NKEYS.invoke(info.ms, nkeys.ms));
    }

    public static void MPI_Info_get_nthkey(MPI_Info info, int n, C_pointer<C_char> key) {
        mpiCheck(() -> C_MPI_INFO_GET_NTHKEY.invoke(info.ms, n, key.ms));
    }

    public static void MPI_Info_get_valuelen(MPI_Info info, C_pointer<C_char> key, C_pointer<C_int> valuelen, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_INFO_GET_VALUELEN.invoke(info.ms, key.ms, valuelen.ms, flag.ms));
    }

    public static void MPI_Info_set(MPI_Info info, C_pointer<C_char> key, C_pointer<C_char> value) {
        mpiCheck(() -> C_MPI_INFO_SET.invoke(info.ms, key.ms, value.ms));
    }

    public static void MPI_Init(C_pointer<C_int> argc, C_pointer<C_pointer<C_pointer<C_char>>> argv) {
        mpiCheck(() -> C_MPI_INIT.invoke(argc.ms, argv.ms));
    }

    public static void MPI_Init_thread(C_pointer<C_int> argc, C_pointer<C_pointer<C_pointer<C_char>>> argv, int required, C_pointer<C_int> provided) {
        mpiCheck(() -> C_MPI_INIT_THREAD.invoke(argc.ms, argv.ms, required, provided.ms));
    }

    public static void MPI_Initialized(C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_INITIALIZED.invoke(flag.ms));
    }

    public static void MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, C_pointer<MPI_Comm> newintercomm) {
        mpiCheck(() -> C_MPI_INTERCOMM_CREATE.invoke(local_comm.ms, local_leader, peer_comm.ms, remote_leader, tag, newintercomm.ms));
    }

    public static void MPI_Intercomm_merge(MPI_Comm intercomm, int high, C_pointer<MPI_Comm> newintracomm) {
        mpiCheck(() -> C_MPI_INTERCOMM_MERGE.invoke(intercomm.ms, high, newintracomm.ms));
    }

    public static void MPI_Iprobe(int source, int tag, MPI_Comm comm, C_pointer<C_int> flag, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_IPROBE.invoke(source, tag, comm.ms, flag.ms, status.ms));
    }

    public static void MPI_Irecv(/*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IRECV.invoke(buf.ms, count, datatype.ms, source, tag, comm.ms, request.ms));
    }

    public static void MPI_Ireduce(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IREDUCE.invoke(sendbuf.ms, recvbuf.ms, count, datatype.ms, op.ms, root, comm.ms, request.ms));
    }

    public static void MPI_Ireduce_scatter(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IREDUCE_SCATTER.invoke(sendbuf.ms, recvbuf.ms, recvcounts.ms, datatype.ms, op.ms, comm.ms, request.ms));
    }

    public static void MPI_Ireduce_scatter_block(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IREDUCE_SCATTER_BLOCK.invoke(sendbuf.ms, recvbuf.ms, recvcount, datatype.ms, op.ms, comm.ms, request.ms));
    }

    public static void MPI_Irsend(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_IRSEND.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms, request.ms));
    }

    public static void MPI_Is_thread_main(C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_IS_THREAD_MAIN.invoke(flag.ms));
    }

    public static void MPI_Iscan(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_ISCAN.invoke(sendbuf.ms, recvbuf.ms, count, datatype.ms, op.ms, comm.ms, request.ms));
    }

    public static void MPI_Iscatter(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_ISCATTER.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, root, comm.ms, request.ms));
    }

    public static void MPI_Iscatterv(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<C_int> displs, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_ISCATTERV.invoke(sendbuf.ms, sendcounts.ms, displs.ms, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, root, comm.ms, request.ms));
    }

    public static void MPI_Isend(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_ISEND.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms, request.ms));
    }

    public static void MPI_Issend(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_ISSEND.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms, request.ms));
    }

    public static void MPI_Keyval_create(/*(MPI_Copy_function (*))*/ C_pointer<Void> copy_fn, /*(MPI_Delete_function (*))*/ C_pointer<Void> delete_fn, C_pointer<C_int> keyval, /*(void *)*/ C_pointer<Void> extra_state) {
        mpiCheck(() -> C_MPI_KEYVAL_CREATE.invoke(copy_fn.ms, delete_fn.ms, keyval.ms, extra_state.ms));
    }

    public static void MPI_Keyval_free(C_pointer<C_int> keyval) {
        mpiCheck(() -> C_MPI_KEYVAL_FREE.invoke(keyval.ms));
    }

    public static void MPI_Lookup_name(C_pointer<C_char> service_name, MPI_Info info, C_pointer<C_char> port_name) {
        mpiCheck(() -> C_MPI_LOOKUP_NAME.invoke(service_name.ms, info.ms, port_name.ms));
    }

    public static void MPI_Mprobe(int source, int tag, MPI_Comm comm, C_pointer<MPI_Message> message, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_MPROBE.invoke(source, tag, comm.ms, message.ms, status.ms));
    }

    public static void MPI_Mrecv(/*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, C_pointer<MPI_Message> message, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_MRECV.invoke(buf.ms, count, datatype.ms, message.ms, status.ms));
    }

    public static void MPI_Neighbor_allgather(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_NEIGHBOR_ALLGATHER.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, comm.ms));
    }

    public static void MPI_Neighbor_allgatherv(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> displs, MPI_Datatype recvtype, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_NEIGHBOR_ALLGATHERV.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcounts.ms, displs.ms, recvtype.ms, comm.ms));
    }

    public static void MPI_Neighbor_alltoall(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_NEIGHBOR_ALLTOALL.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, comm.ms));
    }

    public static void MPI_Neighbor_alltoallv(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<C_int> sdispls, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<C_int> rdispls, MPI_Datatype recvtype, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_NEIGHBOR_ALLTOALLV.invoke(sendbuf.ms, sendcounts.ms, sdispls.ms, sendtype.ms, recvbuf.ms, recvcounts.ms, rdispls.ms, recvtype.ms, comm.ms));
    }

    public static void MPI_Neighbor_alltoallw(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<MPI_Aint> sdispls, C_pointer<MPI_Datatype> sendtypes, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, C_pointer<MPI_Aint> rdispls, C_pointer<MPI_Datatype> recvtypes, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_NEIGHBOR_ALLTOALLW.invoke(sendbuf.ms, sendcounts.ms, sdispls.ms, sendtypes.ms, recvbuf.ms, recvcounts.ms, rdispls.ms, recvtypes.ms, comm.ms));
    }

    public static void MPI_Op_commutative(MPI_Op op, C_pointer<C_int> commute) {
        mpiCheck(() -> C_MPI_OP_COMMUTATIVE.invoke(op.ms, commute.ms));
    }

    public static void MPI_Op_create(/*(MPI_User_function (*))*/ C_pointer<Void> user_fn, int commute, C_pointer<MPI_Op> op) {
        mpiCheck(() -> C_MPI_OP_CREATE.invoke(user_fn.ms, commute, op.ms));
    }

    public static void MPI_Op_free(C_pointer<MPI_Op> op) {
        mpiCheck(() -> C_MPI_OP_FREE.invoke(op.ms));
    }

    public static void MPI_Open_port(MPI_Info info, C_pointer<C_char> port_name) {
        mpiCheck(() -> C_MPI_OPEN_PORT.invoke(info.ms, port_name.ms));
    }

    public static void MPI_Pack(/*(const void *)*/ C_pointer<Void> inbuf, int incount, MPI_Datatype datatype, /*(void *)*/ C_pointer<Void> outbuf, int outsize, C_pointer<C_int> position, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_PACK.invoke(inbuf.ms, incount, datatype.ms, outbuf.ms, outsize, position.ms, comm.ms));
    }

    public static void MPI_Pack_external(C_pointer<C_char> datarep, /*(const void *)*/ C_pointer<Void> inbuf, int incount, MPI_Datatype datatype, /*(void *)*/ C_pointer<Void> outbuf, MPI_Aint outsize, C_pointer<MPI_Aint> position) {
        mpiCheck(() -> C_MPI_PACK_EXTERNAL.invoke(datarep.ms, inbuf.ms, incount, datatype.ms, outbuf.ms, outsize.ms, position.ms));
    }

    public static void MPI_Pack_external_size(C_pointer<C_char> datarep, int incount, MPI_Datatype datatype, C_pointer<MPI_Aint> size) {
        mpiCheck(() -> C_MPI_PACK_EXTERNAL_SIZE.invoke(datarep.ms, incount, datatype.ms, size.ms));
    }

    public static void MPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, C_pointer<C_int> size) {
        mpiCheck(() -> C_MPI_PACK_SIZE.invoke(incount, datatype.ms, comm.ms, size.ms));
    }

    public static void MPI_Pcontrol(int level) {
        mpiCheck(() -> C_MPI_PCONTROL.invoke(level));
    }

    public static void MPI_Probe(int source, int tag, MPI_Comm comm, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_PROBE.invoke(source, tag, comm.ms, status.ms));
    }

    public static void MPI_Publish_name(C_pointer<C_char> service_name, MPI_Info info, C_pointer<C_char> port_name) {
        mpiCheck(() -> C_MPI_PUBLISH_NAME.invoke(service_name.ms, info.ms, port_name.ms));
    }

    public static void MPI_Put(/*(const void *)*/ C_pointer<Void> origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win) {
        mpiCheck(() -> C_MPI_PUT.invoke(origin_addr.ms, origin_count, origin_datatype.ms, target_rank, target_disp.ms, target_count, target_datatype.ms, win.ms));
    }

    public static void MPI_Query_thread(C_pointer<C_int> provided) {
        mpiCheck(() -> C_MPI_QUERY_THREAD.invoke(provided.ms));
    }

    public static void MPI_Raccumulate(/*(const void *)*/ C_pointer<Void> origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_RACCUMULATE.invoke(origin_addr.ms, origin_count, origin_datatype.ms, target_rank, target_disp.ms, target_count, target_datatype.ms, op.ms, win.ms, request.ms));
    }

    public static void MPI_Recv(/*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_RECV.invoke(buf.ms, count, datatype.ms, source, tag, comm.ms, status.ms));
    }

    public static void MPI_Recv_init(/*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_RECV_INIT.invoke(buf.ms, count, datatype.ms, source, tag, comm.ms, request.ms));
    }

    public static void MPI_Reduce(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_REDUCE.invoke(sendbuf.ms, recvbuf.ms, count, datatype.ms, op.ms, root, comm.ms));
    }

    public static void MPI_Reduce_local(/*(const void *)*/ C_pointer<Void> inbuf, /*(void *)*/ C_pointer<Void> inoutbuf, int count, MPI_Datatype datatype, MPI_Op op) {
        mpiCheck(() -> C_MPI_REDUCE_LOCAL.invoke(inbuf.ms, inoutbuf.ms, count, datatype.ms, op.ms));
    }

    public static void MPI_Reduce_scatter(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, C_pointer<C_int> recvcounts, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_REDUCE_SCATTER.invoke(sendbuf.ms, recvbuf.ms, recvcounts.ms, datatype.ms, op.ms, comm.ms));
    }

    public static void MPI_Reduce_scatter_block(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_REDUCE_SCATTER_BLOCK.invoke(sendbuf.ms, recvbuf.ms, recvcount, datatype.ms, op.ms, comm.ms));
    }

    public static void MPI_Register_datarep(C_pointer<C_char> datarep, /*(MPI_Datarep_conversion_function (*))*/ C_pointer<Void> read_conversion_fn, /*(MPI_Datarep_conversion_function (*))*/ C_pointer<Void> write_conversion_fn, /*(MPI_Datarep_extent_function (*))*/ C_pointer<Void> dtype_file_extent_fn, /*(void *)*/ C_pointer<Void> extra_state) {
        mpiCheck(() -> C_MPI_REGISTER_DATAREP.invoke(datarep.ms, read_conversion_fn.ms, write_conversion_fn.ms, dtype_file_extent_fn.ms, extra_state.ms));
    }

    public static void MPI_Request_free(C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_REQUEST_FREE.invoke(request.ms));
    }

    public static void MPI_Request_get_status(MPI_Request request, C_pointer<C_int> flag, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_REQUEST_GET_STATUS.invoke(request.ms, flag.ms, status.ms));
    }

    public static void MPI_Rget(/*(void *)*/ C_pointer<Void> origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_RGET.invoke(origin_addr.ms, origin_count, origin_datatype.ms, target_rank, target_disp.ms, target_count, target_datatype.ms, win.ms, request.ms));
    }

    public static void MPI_Rget_accumulate(/*(const void *)*/ C_pointer<Void> origin_addr, int origin_count, MPI_Datatype origin_datatype, /*(void *)*/ C_pointer<Void> result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_RGET_ACCUMULATE.invoke(origin_addr.ms, origin_count, origin_datatype.ms, result_addr.ms, result_count, result_datatype.ms, target_rank, target_disp.ms, target_count, target_datatype.ms, op.ms, win.ms, request.ms));
    }

    public static void MPI_Rput(/*(const void *)*/ C_pointer<Void> origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_RPUT.invoke(origin_addr.ms, origin_count, origin_datatype.ms, target_rank, target_disp.ms, target_count, target_datatype.ms, win.ms, request.ms));
    }

    public static void MPI_Rsend(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_RSEND.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms));
    }

    public static void MPI_Rsend_init(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_RSEND_INIT.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms, request.ms));
    }

    public static void MPI_Scan(/*(const void *)*/ C_pointer<Void> sendbuf, /*(void *)*/ C_pointer<Void> recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_SCAN.invoke(sendbuf.ms, recvbuf.ms, count, datatype.ms, op.ms, comm.ms));
    }

    public static void MPI_Scatter(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_SCATTER.invoke(sendbuf.ms, sendcount, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, root, comm.ms));
    }

    public static void MPI_Scatterv(/*(const void *)*/ C_pointer<Void> sendbuf, C_pointer<C_int> sendcounts, C_pointer<C_int> displs, MPI_Datatype sendtype, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_SCATTERV.invoke(sendbuf.ms, sendcounts.ms, displs.ms, sendtype.ms, recvbuf.ms, recvcount, recvtype.ms, root, comm.ms));
    }

    public static void MPI_Send(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_SEND.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms));
    }

    public static void MPI_Send_init(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_SEND_INIT.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms, request.ms));
    }

    public static void MPI_Sendrecv(/*(const void *)*/ C_pointer<Void> sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, /*(void *)*/ C_pointer<Void> recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_SENDRECV.invoke(sendbuf.ms, sendcount, sendtype.ms, dest, sendtag, recvbuf.ms, recvcount, recvtype.ms, source, recvtag, comm.ms, status.ms));
    }

    public static void MPI_Sendrecv_replace(/*(void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_SENDRECV_REPLACE.invoke(buf.ms, count, datatype.ms, dest, sendtag, source, recvtag, comm.ms, status.ms));
    }

    public static void MPI_Ssend(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_SSEND.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms));
    }

    public static void MPI_Ssend_init(/*(const void *)*/ C_pointer<Void> buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_SSEND_INIT.invoke(buf.ms, count, datatype.ms, dest, tag, comm.ms, request.ms));
    }

    public static void MPI_Start(C_pointer<MPI_Request> request) {
        mpiCheck(() -> C_MPI_START.invoke(request.ms));
    }

    public static void MPI_Startall(int count, C_pointer<MPI_Request> array_of_requests) {
        mpiCheck(() -> C_MPI_STARTALL.invoke(count, array_of_requests.ms));
    }

    public static void MPI_Status_set_cancelled(/*(MPI_Status *)*/ C_pointer<Void> status, int flag) {
        mpiCheck(() -> C_MPI_STATUS_SET_CANCELLED.invoke(status.ms, flag));
    }

    public static void MPI_Status_set_elements(/*(MPI_Status *)*/ C_pointer<Void> status, MPI_Datatype datatype, int count) {
        mpiCheck(() -> C_MPI_STATUS_SET_ELEMENTS.invoke(status.ms, datatype.ms, count));
    }

    public static void MPI_Status_set_elements_x(/*(MPI_Status *)*/ C_pointer<Void> status, MPI_Datatype datatype, long count) {
        mpiCheck(() -> C_MPI_STATUS_SET_ELEMENTS_X.invoke(status.ms, datatype.ms, count));
    }

    public static void MPI_T_category_changed(C_pointer<C_int> stamp) {
        mpiCheck(() -> C_MPI_T_CATEGORY_CHANGED.invoke(stamp.ms));
    }

    public static void MPI_T_category_get_categories(int cat_index, int len, C_pointer<C_int> indices) {
        mpiCheck(() -> C_MPI_T_CATEGORY_GET_CATEGORIES.invoke(cat_index, len, indices.ms));
    }

    public static void MPI_T_category_get_cvars(int cat_index, int len, C_pointer<C_int> indices) {
        mpiCheck(() -> C_MPI_T_CATEGORY_GET_CVARS.invoke(cat_index, len, indices.ms));
    }

    public static void MPI_T_category_get_index(C_pointer<C_char> name, C_pointer<C_int> cat_index) {
        mpiCheck(() -> C_MPI_T_CATEGORY_GET_INDEX.invoke(name.ms, cat_index.ms));
    }

    public static void MPI_T_category_get_info(int cat_index, C_pointer<C_char> name, C_pointer<C_int> name_len, C_pointer<C_char> desc, C_pointer<C_int> desc_len, C_pointer<C_int> num_cvars, C_pointer<C_int> num_pvars, C_pointer<C_int> num_categories) {
        mpiCheck(() -> C_MPI_T_CATEGORY_GET_INFO.invoke(cat_index, name.ms, name_len.ms, desc.ms, desc_len.ms, num_cvars.ms, num_pvars.ms, num_categories.ms));
    }

    public static void MPI_T_category_get_num(C_pointer<C_int> num_cat) {
        mpiCheck(() -> C_MPI_T_CATEGORY_GET_NUM.invoke(num_cat.ms));
    }

    public static void MPI_T_category_get_pvars(int cat_index, int len, C_pointer<C_int> indices) {
        mpiCheck(() -> C_MPI_T_CATEGORY_GET_PVARS.invoke(cat_index, len, indices.ms));
    }

    public static void MPI_T_cvar_get_index(C_pointer<C_char> name, C_pointer<C_int> cvar_index) {
        mpiCheck(() -> C_MPI_T_CVAR_GET_INDEX.invoke(name.ms, cvar_index.ms));
    }

    public static void MPI_T_cvar_get_info(int cvar_index, C_pointer<C_char> name, C_pointer<C_int> name_len, C_pointer<C_int> verbosity, C_pointer<MPI_Datatype> datatype, C_pointer<MPI_T_enum> enumtype, C_pointer<C_char> desc, C_pointer<C_int> desc_len, C_pointer<C_int> binding, C_pointer<C_int> scope) {
        mpiCheck(() -> C_MPI_T_CVAR_GET_INFO.invoke(cvar_index, name.ms, name_len.ms, verbosity.ms, datatype.ms, enumtype.ms, desc.ms, desc_len.ms, binding.ms, scope.ms));
    }

    public static void MPI_T_cvar_get_num(C_pointer<C_int> num_cvar) {
        mpiCheck(() -> C_MPI_T_CVAR_GET_NUM.invoke(num_cvar.ms));
    }

    public static void MPI_T_cvar_handle_alloc(int cvar_index, /*(void *)*/ C_pointer<Void> obj_handle, C_pointer<MPI_T_cvar_handle> handle, C_pointer<C_int> count) {
        mpiCheck(() -> C_MPI_T_CVAR_HANDLE_ALLOC.invoke(cvar_index, obj_handle.ms, handle.ms, count.ms));
    }

    public static void MPI_T_cvar_handle_free(C_pointer<MPI_T_cvar_handle> handle) {
        mpiCheck(() -> C_MPI_T_CVAR_HANDLE_FREE.invoke(handle.ms));
    }

    public static void MPI_T_cvar_read(MPI_T_cvar_handle handle, /*(void *)*/ C_pointer<Void> buf) {
        mpiCheck(() -> C_MPI_T_CVAR_READ.invoke(handle.ms, buf.ms));
    }

    public static void MPI_T_cvar_write(MPI_T_cvar_handle handle, /*(const void *)*/ C_pointer<Void> buf) {
        mpiCheck(() -> C_MPI_T_CVAR_WRITE.invoke(handle.ms, buf.ms));
    }

    public static void MPI_T_enum_get_info(MPI_T_enum enumtype, C_pointer<C_int> num, C_pointer<C_char> name, C_pointer<C_int> name_len) {
        mpiCheck(() -> C_MPI_T_ENUM_GET_INFO.invoke(enumtype.ms, num.ms, name.ms, name_len.ms));
    }

    public static void MPI_T_enum_get_item(MPI_T_enum enumtype, int indx, C_pointer<C_int> value, C_pointer<C_char> name, C_pointer<C_int> name_len) {
        mpiCheck(() -> C_MPI_T_ENUM_GET_ITEM.invoke(enumtype.ms, indx, value.ms, name.ms, name_len.ms));
    }

    public static void MPI_T_finalize() {
        mpiCheck(() -> C_MPI_T_FINALIZE.invoke());
    }

    public static void MPI_T_init_thread(int required, C_pointer<C_int> provided) {
        mpiCheck(() -> C_MPI_T_INIT_THREAD.invoke(required, provided.ms));
    }

    public static void MPI_T_pvar_get_index(C_pointer<C_char> name, int var_class, C_pointer<C_int> pvar_index) {
        mpiCheck(() -> C_MPI_T_PVAR_GET_INDEX.invoke(name.ms, var_class, pvar_index.ms));
    }

    public static void MPI_T_pvar_get_info(int pvar_index, C_pointer<C_char> name, C_pointer<C_int> name_len, C_pointer<C_int> verbosity, C_pointer<C_int> var_class, C_pointer<MPI_Datatype> datatype, C_pointer<MPI_T_enum> enumtype, C_pointer<C_char> desc, C_pointer<C_int> desc_len, C_pointer<C_int> binding, C_pointer<C_int> readonly, C_pointer<C_int> continuous, C_pointer<C_int> atomic) {
        mpiCheck(() -> C_MPI_T_PVAR_GET_INFO.invoke(pvar_index, name.ms, name_len.ms, verbosity.ms, var_class.ms, datatype.ms, enumtype.ms, desc.ms, desc_len.ms, binding.ms, readonly.ms, continuous.ms, atomic.ms));
    }

    public static void MPI_T_pvar_get_num(C_pointer<C_int> num_pvar) {
        mpiCheck(() -> C_MPI_T_PVAR_GET_NUM.invoke(num_pvar.ms));
    }

    public static void MPI_T_pvar_handle_alloc(MPI_T_pvar_session session, int pvar_index, /*(void *)*/ C_pointer<Void> obj_handle, C_pointer<MPI_T_pvar_handle> handle, C_pointer<C_int> count) {
        mpiCheck(() -> C_MPI_T_PVAR_HANDLE_ALLOC.invoke(session.ms, pvar_index, obj_handle.ms, handle.ms, count.ms));
    }

    public static void MPI_T_pvar_handle_free(MPI_T_pvar_session session, C_pointer<MPI_T_pvar_handle> handle) {
        mpiCheck(() -> C_MPI_T_PVAR_HANDLE_FREE.invoke(session.ms, handle.ms));
    }

    public static void MPI_T_pvar_read(MPI_T_pvar_session session, MPI_T_pvar_handle handle, /*(void *)*/ C_pointer<Void> buf) {
        mpiCheck(() -> C_MPI_T_PVAR_READ.invoke(session.ms, handle.ms, buf.ms));
    }

    public static void MPI_T_pvar_readreset(MPI_T_pvar_session session, MPI_T_pvar_handle handle, /*(void *)*/ C_pointer<Void> buf) {
        mpiCheck(() -> C_MPI_T_PVAR_READRESET.invoke(session.ms, handle.ms, buf.ms));
    }

    public static void MPI_T_pvar_reset(MPI_T_pvar_session session, MPI_T_pvar_handle handle) {
        mpiCheck(() -> C_MPI_T_PVAR_RESET.invoke(session.ms, handle.ms));
    }

    public static void MPI_T_pvar_session_create(C_pointer<MPI_T_pvar_session> session) {
        mpiCheck(() -> C_MPI_T_PVAR_SESSION_CREATE.invoke(session.ms));
    }

    public static void MPI_T_pvar_session_free(C_pointer<MPI_T_pvar_session> session) {
        mpiCheck(() -> C_MPI_T_PVAR_SESSION_FREE.invoke(session.ms));
    }

    public static void MPI_T_pvar_start(MPI_T_pvar_session session, MPI_T_pvar_handle handle) {
        mpiCheck(() -> C_MPI_T_PVAR_START.invoke(session.ms, handle.ms));
    }

    public static void MPI_T_pvar_stop(MPI_T_pvar_session session, MPI_T_pvar_handle handle) {
        mpiCheck(() -> C_MPI_T_PVAR_STOP.invoke(session.ms, handle.ms));
    }

    public static void MPI_T_pvar_write(MPI_T_pvar_session session, MPI_T_pvar_handle handle, /*(const void *)*/ C_pointer<Void> buf) {
        mpiCheck(() -> C_MPI_T_PVAR_WRITE.invoke(session.ms, handle.ms, buf.ms));
    }

    public static void MPI_Test(C_pointer<MPI_Request> request, C_pointer<C_int> flag, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_TEST.invoke(request.ms, flag.ms, status.ms));
    }

    public static void MPI_Test_cancelled(/*(const MPI_Status *)*/ C_pointer<Void> status, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_TEST_CANCELLED.invoke(status.ms, flag.ms));
    }

    public static void MPI_Testall(int count, C_pointer<MPI_Request> array_of_requests, C_pointer<C_int> flag, /*(MPI_Status *)*/ C_pointer<Void> array_of_statuses) {
        mpiCheck(() -> C_MPI_TESTALL.invoke(count, array_of_requests.ms, flag.ms, array_of_statuses.ms));
    }

    public static void MPI_Testany(int count, C_pointer<MPI_Request> array_of_requests, C_pointer<C_int> indx, C_pointer<C_int> flag, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_TESTANY.invoke(count, array_of_requests.ms, indx.ms, flag.ms, status.ms));
    }

    public static void MPI_Testsome(int incount, C_pointer<MPI_Request> array_of_requests, C_pointer<C_int> outcount, C_pointer<C_int> array_of_indices, /*(MPI_Status *)*/ C_pointer<Void> array_of_statuses) {
        mpiCheck(() -> C_MPI_TESTSOME.invoke(incount, array_of_requests.ms, outcount.ms, array_of_indices.ms, array_of_statuses.ms));
    }

    public static void MPI_Topo_test(MPI_Comm comm, C_pointer<C_int> status) {
        mpiCheck(() -> C_MPI_TOPO_TEST.invoke(comm.ms, status.ms));
    }

    public static void MPI_Type_commit(C_pointer<MPI_Datatype> datatype) {
        mpiCheck(() -> C_MPI_TYPE_COMMIT.invoke(datatype.ms));
    }

    public static void MPI_Type_contiguous(int count, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CONTIGUOUS.invoke(count, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_create_darray(int size, int rank, int ndims, C_pointer<C_int> array_of_gsizes, C_pointer<C_int> array_of_distribs, C_pointer<C_int> array_of_dargs, C_pointer<C_int> array_of_psizes, int order, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_DARRAY.invoke(size, rank, ndims, array_of_gsizes.ms, array_of_distribs.ms, array_of_dargs.ms, array_of_psizes.ms, order, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_create_f90_complex(int precision, int range, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_F90_COMPLEX.invoke(precision, range, newtype.ms));
    }

    public static void MPI_Type_create_f90_integer(int range, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_F90_INTEGER.invoke(range, newtype.ms));
    }

    public static void MPI_Type_create_f90_real(int precision, int range, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_F90_REAL.invoke(precision, range, newtype.ms));
    }

    public static void MPI_Type_create_hindexed(int count, C_pointer<C_int> array_of_blocklengths, C_pointer<MPI_Aint> array_of_displacements, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_HINDEXED.invoke(count, array_of_blocklengths.ms, array_of_displacements.ms, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_create_hindexed_block(int count, int blocklength, C_pointer<MPI_Aint> array_of_displacements, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_HINDEXED_BLOCK.invoke(count, blocklength, array_of_displacements.ms, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_HVECTOR.invoke(count, blocklength, stride.ms, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_create_indexed_block(int count, int blocklength, C_pointer<C_int> array_of_displacements, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_INDEXED_BLOCK.invoke(count, blocklength, array_of_displacements.ms, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_create_keyval(/*(MPI_Type_copy_attr_function (*))*/ C_pointer<Void> type_copy_attr_fn, /*(MPI_Type_delete_attr_function (*))*/ C_pointer<Void> type_delete_attr_fn, C_pointer<C_int> type_keyval, /*(void *)*/ C_pointer<Void> extra_state) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_KEYVAL.invoke(type_copy_attr_fn.ms, type_delete_attr_fn.ms, type_keyval.ms, extra_state.ms));
    }

    public static void MPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_RESIZED.invoke(oldtype.ms, lb.ms, extent.ms, newtype.ms));
    }

    public static void MPI_Type_create_struct(int count, C_pointer<C_int> array_of_blocklengths, C_pointer<MPI_Aint> array_of_displacements, C_pointer<MPI_Datatype> array_of_types, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_STRUCT.invoke(count, array_of_blocklengths.ms, array_of_displacements.ms, array_of_types.ms, newtype.ms));
    }

    public static void MPI_Type_create_subarray(int ndims, C_pointer<C_int> array_of_sizes, C_pointer<C_int> array_of_subsizes, C_pointer<C_int> array_of_starts, int order, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_CREATE_SUBARRAY.invoke(ndims, array_of_sizes.ms, array_of_subsizes.ms, array_of_starts.ms, order, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_delete_attr(MPI_Datatype datatype, int type_keyval) {
        mpiCheck(() -> C_MPI_TYPE_DELETE_ATTR.invoke(datatype.ms, type_keyval));
    }

    public static void MPI_Type_dup(MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_DUP.invoke(oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_extent(MPI_Datatype datatype, C_pointer<MPI_Aint> extent) {
        mpiCheck(() -> C_MPI_TYPE_EXTENT.invoke(datatype.ms, extent.ms));
    }

    public static void MPI_Type_free(C_pointer<MPI_Datatype> datatype) {
        mpiCheck(() -> C_MPI_TYPE_FREE.invoke(datatype.ms));
    }

    public static void MPI_Type_free_keyval(C_pointer<C_int> type_keyval) {
        mpiCheck(() -> C_MPI_TYPE_FREE_KEYVAL.invoke(type_keyval.ms));
    }

    public static void MPI_Type_get_attr(MPI_Datatype datatype, int type_keyval, /*(void *)*/ C_pointer<Void> attribute_val, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_TYPE_GET_ATTR.invoke(datatype.ms, type_keyval, attribute_val.ms, flag.ms));
    }

    public static void MPI_Type_get_contents(MPI_Datatype datatype, int max_integers, int max_addresses, int max_datatypes, C_pointer<C_int> array_of_integers, C_pointer<MPI_Aint> array_of_addresses, C_pointer<MPI_Datatype> array_of_datatypes) {
        mpiCheck(() -> C_MPI_TYPE_GET_CONTENTS.invoke(datatype.ms, max_integers, max_addresses, max_datatypes, array_of_integers.ms, array_of_addresses.ms, array_of_datatypes.ms));
    }

    public static void MPI_Type_get_envelope(MPI_Datatype datatype, C_pointer<C_int> num_integers, C_pointer<C_int> num_addresses, C_pointer<C_int> num_datatypes, C_pointer<C_int> combiner) {
        mpiCheck(() -> C_MPI_TYPE_GET_ENVELOPE.invoke(datatype.ms, num_integers.ms, num_addresses.ms, num_datatypes.ms, combiner.ms));
    }

    public static void MPI_Type_get_extent(MPI_Datatype datatype, C_pointer<MPI_Aint> lb, C_pointer<MPI_Aint> extent) {
        mpiCheck(() -> C_MPI_TYPE_GET_EXTENT.invoke(datatype.ms, lb.ms, extent.ms));
    }

    public static void MPI_Type_get_extent_x(MPI_Datatype datatype, C_pointer<C_long> lb, C_pointer<C_long> extent) {
        mpiCheck(() -> C_MPI_TYPE_GET_EXTENT_X.invoke(datatype.ms, lb.ms, extent.ms));
    }

    public static void MPI_Type_get_name(MPI_Datatype datatype, C_pointer<C_char> type_name, C_pointer<C_int> resultlen) {
        mpiCheck(() -> C_MPI_TYPE_GET_NAME.invoke(datatype.ms, type_name.ms, resultlen.ms));
    }

    public static void MPI_Type_get_true_extent(MPI_Datatype datatype, C_pointer<MPI_Aint> true_lb, C_pointer<MPI_Aint> true_extent) {
        mpiCheck(() -> C_MPI_TYPE_GET_TRUE_EXTENT.invoke(datatype.ms, true_lb.ms, true_extent.ms));
    }

    public static void MPI_Type_get_true_extent_x(MPI_Datatype datatype, C_pointer<C_long> lb, C_pointer<C_long> extent) {
        mpiCheck(() -> C_MPI_TYPE_GET_TRUE_EXTENT_X.invoke(datatype.ms, lb.ms, extent.ms));
    }

    public static void MPI_Type_hindexed(int count, C_pointer<C_int> array_of_blocklengths, C_pointer<MPI_Aint> array_of_displacements, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_HINDEXED.invoke(count, array_of_blocklengths.ms, array_of_displacements.ms, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_HVECTOR.invoke(count, blocklength, stride.ms, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_indexed(int count, C_pointer<C_int> array_of_blocklengths, C_pointer<C_int> array_of_displacements, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_INDEXED.invoke(count, array_of_blocklengths.ms, array_of_displacements.ms, oldtype.ms, newtype.ms));
    }

    public static void MPI_Type_lb(MPI_Datatype datatype, C_pointer<MPI_Aint> displacement) {
        mpiCheck(() -> C_MPI_TYPE_LB.invoke(datatype.ms, displacement.ms));
    }

    public static void MPI_Type_match_size(int typeclass, int size, C_pointer<MPI_Datatype> datatype) {
        mpiCheck(() -> C_MPI_TYPE_MATCH_SIZE.invoke(typeclass, size, datatype.ms));
    }

    public static void MPI_Type_set_attr(MPI_Datatype datatype, int type_keyval, /*(void *)*/ C_pointer<Void> attribute_val) {
        mpiCheck(() -> C_MPI_TYPE_SET_ATTR.invoke(datatype.ms, type_keyval, attribute_val.ms));
    }

    public static void MPI_Type_set_name(MPI_Datatype datatype, C_pointer<C_char> type_name) {
        mpiCheck(() -> C_MPI_TYPE_SET_NAME.invoke(datatype.ms, type_name.ms));
    }

    public static void MPI_Type_size(MPI_Datatype datatype, C_pointer<C_int> size) {
        mpiCheck(() -> C_MPI_TYPE_SIZE.invoke(datatype.ms, size.ms));
    }

    public static void MPI_Type_size_x(MPI_Datatype datatype, C_pointer<C_long> size) {
        mpiCheck(() -> C_MPI_TYPE_SIZE_X.invoke(datatype.ms, size.ms));
    }

    public static void MPI_Type_struct(int count, C_pointer<C_int> array_of_blocklengths, C_pointer<MPI_Aint> array_of_displacements, C_pointer<MPI_Datatype> array_of_types, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_STRUCT.invoke(count, array_of_blocklengths.ms, array_of_displacements.ms, array_of_types.ms, newtype.ms));
    }

    public static void MPI_Type_ub(MPI_Datatype datatype, C_pointer<MPI_Aint> displacement) {
        mpiCheck(() -> C_MPI_TYPE_UB.invoke(datatype.ms, displacement.ms));
    }

    public static void MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, C_pointer<MPI_Datatype> newtype) {
        mpiCheck(() -> C_MPI_TYPE_VECTOR.invoke(count, blocklength, stride, oldtype.ms, newtype.ms));
    }

    public static void MPI_Unpack(/*(const void *)*/ C_pointer<Void> inbuf, int insize, C_pointer<C_int> position, /*(void *)*/ C_pointer<Void> outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm) {
        mpiCheck(() -> C_MPI_UNPACK.invoke(inbuf.ms, insize, position.ms, outbuf.ms, outcount, datatype.ms, comm.ms));
    }

    public static void MPI_Unpack_external(C_pointer<C_char> datarep, /*(const void *)*/ C_pointer<Void> inbuf, MPI_Aint insize, C_pointer<MPI_Aint> position, /*(void *)*/ C_pointer<Void> outbuf, int outcount, MPI_Datatype datatype) {
        mpiCheck(() -> C_MPI_UNPACK_EXTERNAL.invoke(datarep.ms, inbuf.ms, insize.ms, position.ms, outbuf.ms, outcount, datatype.ms));
    }

    public static void MPI_Unpublish_name(C_pointer<C_char> service_name, MPI_Info info, C_pointer<C_char> port_name) {
        mpiCheck(() -> C_MPI_UNPUBLISH_NAME.invoke(service_name.ms, info.ms, port_name.ms));
    }

    public static void MPI_Wait(C_pointer<MPI_Request> request, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_WAIT.invoke(request.ms, status.ms));
    }

    public static void MPI_Waitall(int count, C_pointer<MPI_Request> array_of_requests, /*(MPI_Status *)*/ C_pointer<Void> array_of_statuses) {
        mpiCheck(() -> C_MPI_WAITALL.invoke(count, array_of_requests.ms, array_of_statuses.ms));
    }

    public static void MPI_Waitany(int count, C_pointer<MPI_Request> array_of_requests, C_pointer<C_int> indx, /*(MPI_Status *)*/ C_pointer<Void> status) {
        mpiCheck(() -> C_MPI_WAITANY.invoke(count, array_of_requests.ms, indx.ms, status.ms));
    }

    public static void MPI_Waitsome(int incount, C_pointer<MPI_Request> array_of_requests, C_pointer<C_int> outcount, C_pointer<C_int> array_of_indices, /*(MPI_Status *)*/ C_pointer<Void> array_of_statuses) {
        mpiCheck(() -> C_MPI_WAITSOME.invoke(incount, array_of_requests.ms, outcount.ms, array_of_indices.ms, array_of_statuses.ms));
    }

    public static void MPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, /*(void *)*/ C_pointer<Void> baseptr, C_pointer<MPI_Win> win) {
        mpiCheck(() -> C_MPI_WIN_ALLOCATE.invoke(size.ms, disp_unit, info.ms, comm.ms, baseptr.ms, win.ms));
    }

    public static void MPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, /*(void *)*/ C_pointer<Void> baseptr, C_pointer<MPI_Win> win) {
        mpiCheck(() -> C_MPI_WIN_ALLOCATE_SHARED.invoke(size.ms, disp_unit, info.ms, comm.ms, baseptr.ms, win.ms));
    }

    public static void MPI_Win_attach(MPI_Win win, /*(void *)*/ C_pointer<Void> base, MPI_Aint size) {
        mpiCheck(() -> C_MPI_WIN_ATTACH.invoke(win.ms, base.ms, size.ms));
    }

    public static void MPI_Win_call_errhandler(MPI_Win win, int errorcode) {
        mpiCheck(() -> C_MPI_WIN_CALL_ERRHANDLER.invoke(win.ms, errorcode));
    }

    public static void MPI_Win_complete(MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_COMPLETE.invoke(win.ms));
    }

    public static void MPI_Win_create(/*(void *)*/ C_pointer<Void> base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, C_pointer<MPI_Win> win) {
        mpiCheck(() -> C_MPI_WIN_CREATE.invoke(base.ms, size.ms, disp_unit, info.ms, comm.ms, win.ms));
    }

    public static void MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, C_pointer<MPI_Win> win) {
        mpiCheck(() -> C_MPI_WIN_CREATE_DYNAMIC.invoke(info.ms, comm.ms, win.ms));
    }

    public static void MPI_Win_create_errhandler(/*(MPI_Win_errhandler_function (*))*/ C_pointer<Void> win_errhandler_fn, C_pointer<MPI_Errhandler> errhandler) {
        mpiCheck(() -> C_MPI_WIN_CREATE_ERRHANDLER.invoke(win_errhandler_fn.ms, errhandler.ms));
    }

    public static void MPI_Win_create_keyval(/*(MPI_Win_copy_attr_function (*))*/ C_pointer<Void> win_copy_attr_fn, /*(MPI_Win_delete_attr_function (*))*/ C_pointer<Void> win_delete_attr_fn, C_pointer<C_int> win_keyval, /*(void *)*/ C_pointer<Void> extra_state) {
        mpiCheck(() -> C_MPI_WIN_CREATE_KEYVAL.invoke(win_copy_attr_fn.ms, win_delete_attr_fn.ms, win_keyval.ms, extra_state.ms));
    }

    public static void MPI_Win_delete_attr(MPI_Win win, int win_keyval) {
        mpiCheck(() -> C_MPI_WIN_DELETE_ATTR.invoke(win.ms, win_keyval));
    }

    public static void MPI_Win_detach(MPI_Win win, /*(const void *)*/ C_pointer<Void> base) {
        mpiCheck(() -> C_MPI_WIN_DETACH.invoke(win.ms, base.ms));
    }

    public static void MPI_Win_fence(int _assert, MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_FENCE.invoke(_assert, win.ms));
    }

    public static void MPI_Win_flush(int rank, MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_FLUSH.invoke(rank, win.ms));
    }

    public static void MPI_Win_flush_all(MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_FLUSH_ALL.invoke(win.ms));
    }

    public static void MPI_Win_flush_local(int rank, MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_FLUSH_LOCAL.invoke(rank, win.ms));
    }

    public static void MPI_Win_flush_local_all(MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_FLUSH_LOCAL_ALL.invoke(win.ms));
    }

    public static void MPI_Win_free(C_pointer<MPI_Win> win) {
        mpiCheck(() -> C_MPI_WIN_FREE.invoke(win.ms));
    }

    public static void MPI_Win_free_keyval(C_pointer<C_int> win_keyval) {
        mpiCheck(() -> C_MPI_WIN_FREE_KEYVAL.invoke(win_keyval.ms));
    }

    public static void MPI_Win_get_attr(MPI_Win win, int win_keyval, /*(void *)*/ C_pointer<Void> attribute_val, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_WIN_GET_ATTR.invoke(win.ms, win_keyval, attribute_val.ms, flag.ms));
    }

    public static void MPI_Win_get_errhandler(MPI_Win win, C_pointer<MPI_Errhandler> errhandler) {
        mpiCheck(() -> C_MPI_WIN_GET_ERRHANDLER.invoke(win.ms, errhandler.ms));
    }

    public static void MPI_Win_get_group(MPI_Win win, C_pointer<MPI_Group> group) {
        mpiCheck(() -> C_MPI_WIN_GET_GROUP.invoke(win.ms, group.ms));
    }

    public static void MPI_Win_get_info(MPI_Win win, C_pointer<MPI_Info> info_used) {
        mpiCheck(() -> C_MPI_WIN_GET_INFO.invoke(win.ms, info_used.ms));
    }

    public static void MPI_Win_get_name(MPI_Win win, C_pointer<C_char> win_name, C_pointer<C_int> resultlen) {
        mpiCheck(() -> C_MPI_WIN_GET_NAME.invoke(win.ms, win_name.ms, resultlen.ms));
    }

    public static void MPI_Win_lock(int lock_type, int rank, int _assert, MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_LOCK.invoke(lock_type, rank, _assert, win.ms));
    }

    public static void MPI_Win_lock_all(int _assert, MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_LOCK_ALL.invoke(_assert, win.ms));
    }

    public static void MPI_Win_post(MPI_Group group, int _assert, MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_POST.invoke(group.ms, _assert, win.ms));
    }

    public static void MPI_Win_set_attr(MPI_Win win, int win_keyval, /*(void *)*/ C_pointer<Void> attribute_val) {
        mpiCheck(() -> C_MPI_WIN_SET_ATTR.invoke(win.ms, win_keyval, attribute_val.ms));
    }

    public static void MPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler) {
        mpiCheck(() -> C_MPI_WIN_SET_ERRHANDLER.invoke(win.ms, errhandler.ms));
    }

    public static void MPI_Win_set_info(MPI_Win win, MPI_Info info) {
        mpiCheck(() -> C_MPI_WIN_SET_INFO.invoke(win.ms, info.ms));
    }

    public static void MPI_Win_set_name(MPI_Win win, C_pointer<C_char> win_name) {
        mpiCheck(() -> C_MPI_WIN_SET_NAME.invoke(win.ms, win_name.ms));
    }

    public static void MPI_Win_shared_query(MPI_Win win, int rank, C_pointer<MPI_Aint> size, C_pointer<C_int> disp_unit, /*(void *)*/ C_pointer<Void> baseptr) {
        mpiCheck(() -> C_MPI_WIN_SHARED_QUERY.invoke(win.ms, rank, size.ms, disp_unit.ms, baseptr.ms));
    }

    public static void MPI_Win_start(MPI_Group group, int _assert, MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_START.invoke(group.ms, _assert, win.ms));
    }

    public static void MPI_Win_sync(MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_SYNC.invoke(win.ms));
    }

    public static void MPI_Win_test(MPI_Win win, C_pointer<C_int> flag) {
        mpiCheck(() -> C_MPI_WIN_TEST.invoke(win.ms, flag.ms));
    }

    public static void MPI_Win_unlock(int rank, MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_UNLOCK.invoke(rank, win.ms));
    }

    public static void MPI_Win_unlock_all(MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_UNLOCK_ALL.invoke(win.ms));
    }

    public static void MPI_Win_wait(MPI_Win win) {
        mpiCheck(() -> C_MPI_WIN_WAIT.invoke(win.ms));
    }

    public static double MPI_Wtick() {
        return (double) mpiCheck0(() -> C_MPI_WTICK.invoke());
    }

    public static double MPI_Wtime() {
        return (double) mpiCheck0(() -> C_MPI_WTIME.invoke());
    }

}
