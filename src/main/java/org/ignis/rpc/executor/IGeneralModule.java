/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.ignis.rpc.executor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IGeneralModule {

  public interface Iface {

    public void map_(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void filter(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void flatmap(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void keyBy(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void mapPartitions(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void mapPartitionsWithIndex(org.ignis.rpc.ISource src, boolean preservesPartitioning) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void mapExecutor(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void mapExecutorTo(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void groupBy(org.ignis.rpc.ISource src, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void sort(boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void sort2(boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void sortBy(org.ignis.rpc.ISource src, boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void flatMapValues(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void mapValues(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void groupByKey(long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void groupByKey2(long numPartitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void sortByKey(boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void sortByKey2a(boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void sortByKey2b(org.ignis.rpc.ISource src, boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    public void sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void map_(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void filter(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void flatmap(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void keyBy(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void mapPartitions(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void mapPartitionsWithIndex(org.ignis.rpc.ISource src, boolean preservesPartitioning, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void mapExecutor(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void mapExecutorTo(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void groupBy(org.ignis.rpc.ISource src, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sort(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sort2(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sortBy(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void flatMapValues(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void mapValues(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void groupByKey(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void groupByKey2(long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sortByKey(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sortByKey2a(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sortByKey2b(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void map_(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_map_(src);
      recv_map_();
    }

    public void send_map_(org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      map__args args = new map__args();
      args.setSrc(src);
      sendBase("map_", args);
    }

    public void recv_map_() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      map__result result = new map__result();
      receiveBase(result, "map_");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void filter(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_filter(src);
      recv_filter();
    }

    public void send_filter(org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      filter_args args = new filter_args();
      args.setSrc(src);
      sendBase("filter", args);
    }

    public void recv_filter() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      filter_result result = new filter_result();
      receiveBase(result, "filter");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void flatmap(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_flatmap(src);
      recv_flatmap();
    }

    public void send_flatmap(org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      flatmap_args args = new flatmap_args();
      args.setSrc(src);
      sendBase("flatmap", args);
    }

    public void recv_flatmap() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      flatmap_result result = new flatmap_result();
      receiveBase(result, "flatmap");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void keyBy(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_keyBy(src);
      recv_keyBy();
    }

    public void send_keyBy(org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      keyBy_args args = new keyBy_args();
      args.setSrc(src);
      sendBase("keyBy", args);
    }

    public void recv_keyBy() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      keyBy_result result = new keyBy_result();
      receiveBase(result, "keyBy");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void mapPartitions(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_mapPartitions(src);
      recv_mapPartitions();
    }

    public void send_mapPartitions(org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      mapPartitions_args args = new mapPartitions_args();
      args.setSrc(src);
      sendBase("mapPartitions", args);
    }

    public void recv_mapPartitions() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      mapPartitions_result result = new mapPartitions_result();
      receiveBase(result, "mapPartitions");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void mapPartitionsWithIndex(org.ignis.rpc.ISource src, boolean preservesPartitioning) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_mapPartitionsWithIndex(src, preservesPartitioning);
      recv_mapPartitionsWithIndex();
    }

    public void send_mapPartitionsWithIndex(org.ignis.rpc.ISource src, boolean preservesPartitioning) throws org.apache.thrift.TException
    {
      mapPartitionsWithIndex_args args = new mapPartitionsWithIndex_args();
      args.setSrc(src);
      args.setPreservesPartitioning(preservesPartitioning);
      sendBase("mapPartitionsWithIndex", args);
    }

    public void recv_mapPartitionsWithIndex() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      mapPartitionsWithIndex_result result = new mapPartitionsWithIndex_result();
      receiveBase(result, "mapPartitionsWithIndex");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void mapExecutor(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_mapExecutor(src);
      recv_mapExecutor();
    }

    public void send_mapExecutor(org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      mapExecutor_args args = new mapExecutor_args();
      args.setSrc(src);
      sendBase("mapExecutor", args);
    }

    public void recv_mapExecutor() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      mapExecutor_result result = new mapExecutor_result();
      receiveBase(result, "mapExecutor");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void mapExecutorTo(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_mapExecutorTo(src);
      recv_mapExecutorTo();
    }

    public void send_mapExecutorTo(org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      mapExecutorTo_args args = new mapExecutorTo_args();
      args.setSrc(src);
      sendBase("mapExecutorTo", args);
    }

    public void recv_mapExecutorTo() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      mapExecutorTo_result result = new mapExecutorTo_result();
      receiveBase(result, "mapExecutorTo");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void groupBy(org.ignis.rpc.ISource src, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_groupBy(src, numPartitions);
      recv_groupBy();
    }

    public void send_groupBy(org.ignis.rpc.ISource src, long numPartitions) throws org.apache.thrift.TException
    {
      groupBy_args args = new groupBy_args();
      args.setSrc(src);
      args.setNumPartitions(numPartitions);
      sendBase("groupBy", args);
    }

    public void recv_groupBy() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      groupBy_result result = new groupBy_result();
      receiveBase(result, "groupBy");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void sort(boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_sort(ascending);
      recv_sort();
    }

    public void send_sort(boolean ascending) throws org.apache.thrift.TException
    {
      sort_args args = new sort_args();
      args.setAscending(ascending);
      sendBase("sort", args);
    }

    public void recv_sort() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      sort_result result = new sort_result();
      receiveBase(result, "sort");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void sort2(boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_sort2(ascending, numPartitions);
      recv_sort2();
    }

    public void send_sort2(boolean ascending, long numPartitions) throws org.apache.thrift.TException
    {
      sort2_args args = new sort2_args();
      args.setAscending(ascending);
      args.setNumPartitions(numPartitions);
      sendBase("sort2", args);
    }

    public void recv_sort2() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      sort2_result result = new sort2_result();
      receiveBase(result, "sort2");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void sortBy(org.ignis.rpc.ISource src, boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_sortBy(src, ascending);
      recv_sortBy();
    }

    public void send_sortBy(org.ignis.rpc.ISource src, boolean ascending) throws org.apache.thrift.TException
    {
      sortBy_args args = new sortBy_args();
      args.setSrc(src);
      args.setAscending(ascending);
      sendBase("sortBy", args);
    }

    public void recv_sortBy() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      sortBy_result result = new sortBy_result();
      receiveBase(result, "sortBy");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_sortBy3(src, ascending, numPartitions);
      recv_sortBy3();
    }

    public void send_sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.apache.thrift.TException
    {
      sortBy3_args args = new sortBy3_args();
      args.setSrc(src);
      args.setAscending(ascending);
      args.setNumPartitions(numPartitions);
      sendBase("sortBy3", args);
    }

    public void recv_sortBy3() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      sortBy3_result result = new sortBy3_result();
      receiveBase(result, "sortBy3");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void flatMapValues(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_flatMapValues(src);
      recv_flatMapValues();
    }

    public void send_flatMapValues(org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      flatMapValues_args args = new flatMapValues_args();
      args.setSrc(src);
      sendBase("flatMapValues", args);
    }

    public void recv_flatMapValues() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      flatMapValues_result result = new flatMapValues_result();
      receiveBase(result, "flatMapValues");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void mapValues(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_mapValues(src);
      recv_mapValues();
    }

    public void send_mapValues(org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      mapValues_args args = new mapValues_args();
      args.setSrc(src);
      sendBase("mapValues", args);
    }

    public void recv_mapValues() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      mapValues_result result = new mapValues_result();
      receiveBase(result, "mapValues");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void groupByKey(long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_groupByKey(numPartitions);
      recv_groupByKey();
    }

    public void send_groupByKey(long numPartitions) throws org.apache.thrift.TException
    {
      groupByKey_args args = new groupByKey_args();
      args.setNumPartitions(numPartitions);
      sendBase("groupByKey", args);
    }

    public void recv_groupByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      groupByKey_result result = new groupByKey_result();
      receiveBase(result, "groupByKey");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void groupByKey2(long numPartitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_groupByKey2(numPartitions, src);
      recv_groupByKey2();
    }

    public void send_groupByKey2(long numPartitions, org.ignis.rpc.ISource src) throws org.apache.thrift.TException
    {
      groupByKey2_args args = new groupByKey2_args();
      args.setNumPartitions(numPartitions);
      args.setSrc(src);
      sendBase("groupByKey2", args);
    }

    public void recv_groupByKey2() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      groupByKey2_result result = new groupByKey2_result();
      receiveBase(result, "groupByKey2");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_reduceByKey(src, numPartitions, localReduce);
      recv_reduceByKey();
    }

    public void send_reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce) throws org.apache.thrift.TException
    {
      reduceByKey_args args = new reduceByKey_args();
      args.setSrc(src);
      args.setNumPartitions(numPartitions);
      args.setLocalReduce(localReduce);
      sendBase("reduceByKey", args);
    }

    public void recv_reduceByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      reduceByKey_result result = new reduceByKey_result();
      receiveBase(result, "reduceByKey");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_aggregateByKey(zero, seqOp, numPartitions);
      recv_aggregateByKey();
    }

    public void send_aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions) throws org.apache.thrift.TException
    {
      aggregateByKey_args args = new aggregateByKey_args();
      args.setZero(zero);
      args.setSeqOp(seqOp);
      args.setNumPartitions(numPartitions);
      sendBase("aggregateByKey", args);
    }

    public void recv_aggregateByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      aggregateByKey_result result = new aggregateByKey_result();
      receiveBase(result, "aggregateByKey");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_aggregateByKey4(zero, seqOp, combOp, numPartitions);
      recv_aggregateByKey4();
    }

    public void send_aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions) throws org.apache.thrift.TException
    {
      aggregateByKey4_args args = new aggregateByKey4_args();
      args.setZero(zero);
      args.setSeqOp(seqOp);
      args.setCombOp(combOp);
      args.setNumPartitions(numPartitions);
      sendBase("aggregateByKey4", args);
    }

    public void recv_aggregateByKey4() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      aggregateByKey4_result result = new aggregateByKey4_result();
      receiveBase(result, "aggregateByKey4");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_foldByKey(zero, src, numPartitions, localFold);
      recv_foldByKey();
    }

    public void send_foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold) throws org.apache.thrift.TException
    {
      foldByKey_args args = new foldByKey_args();
      args.setZero(zero);
      args.setSrc(src);
      args.setNumPartitions(numPartitions);
      args.setLocalFold(localFold);
      sendBase("foldByKey", args);
    }

    public void recv_foldByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      foldByKey_result result = new foldByKey_result();
      receiveBase(result, "foldByKey");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void sortByKey(boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_sortByKey(ascending);
      recv_sortByKey();
    }

    public void send_sortByKey(boolean ascending) throws org.apache.thrift.TException
    {
      sortByKey_args args = new sortByKey_args();
      args.setAscending(ascending);
      sendBase("sortByKey", args);
    }

    public void recv_sortByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      sortByKey_result result = new sortByKey_result();
      receiveBase(result, "sortByKey");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void sortByKey2a(boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_sortByKey2a(ascending, numPartitions);
      recv_sortByKey2a();
    }

    public void send_sortByKey2a(boolean ascending, long numPartitions) throws org.apache.thrift.TException
    {
      sortByKey2a_args args = new sortByKey2a_args();
      args.setAscending(ascending);
      args.setNumPartitions(numPartitions);
      sendBase("sortByKey2a", args);
    }

    public void recv_sortByKey2a() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      sortByKey2a_result result = new sortByKey2a_result();
      receiveBase(result, "sortByKey2a");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void sortByKey2b(org.ignis.rpc.ISource src, boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_sortByKey2b(src, ascending);
      recv_sortByKey2b();
    }

    public void send_sortByKey2b(org.ignis.rpc.ISource src, boolean ascending) throws org.apache.thrift.TException
    {
      sortByKey2b_args args = new sortByKey2b_args();
      args.setSrc(src);
      args.setAscending(ascending);
      sendBase("sortByKey2b", args);
    }

    public void recv_sortByKey2b() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      sortByKey2b_result result = new sortByKey2b_result();
      receiveBase(result, "sortByKey2b");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      send_sortByKey3(src, ascending, numPartitions);
      recv_sortByKey3();
    }

    public void send_sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.apache.thrift.TException
    {
      sortByKey3_args args = new sortByKey3_args();
      args.setSrc(src);
      args.setAscending(ascending);
      args.setNumPartitions(numPartitions);
      sendBase("sortByKey3", args);
    }

    public void recv_sortByKey3() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException
    {
      sortByKey3_result result = new sortByKey3_result();
      receiveBase(result, "sortByKey3");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void map_(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      map__call method_call = new map__call(src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class map__call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      public map__call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("map_", org.apache.thrift.protocol.TMessageType.CALL, 0));
        map__args args = new map__args();
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void filter(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      filter_call method_call = new filter_call(src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class filter_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      public filter_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("filter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        filter_args args = new filter_args();
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void flatmap(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      flatmap_call method_call = new flatmap_call(src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class flatmap_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      public flatmap_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("flatmap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        flatmap_args args = new flatmap_args();
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void keyBy(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      keyBy_call method_call = new keyBy_call(src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class keyBy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      public keyBy_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("keyBy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        keyBy_args args = new keyBy_args();
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void mapPartitions(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mapPartitions_call method_call = new mapPartitions_call(src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mapPartitions_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      public mapPartitions_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapPartitions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mapPartitions_args args = new mapPartitions_args();
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void mapPartitionsWithIndex(org.ignis.rpc.ISource src, boolean preservesPartitioning, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mapPartitionsWithIndex_call method_call = new mapPartitionsWithIndex_call(src, preservesPartitioning, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mapPartitionsWithIndex_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      private boolean preservesPartitioning;
      public mapPartitionsWithIndex_call(org.ignis.rpc.ISource src, boolean preservesPartitioning, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.preservesPartitioning = preservesPartitioning;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapPartitionsWithIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mapPartitionsWithIndex_args args = new mapPartitionsWithIndex_args();
        args.setSrc(src);
        args.setPreservesPartitioning(preservesPartitioning);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void mapExecutor(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mapExecutor_call method_call = new mapExecutor_call(src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mapExecutor_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      public mapExecutor_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapExecutor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mapExecutor_args args = new mapExecutor_args();
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void mapExecutorTo(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mapExecutorTo_call method_call = new mapExecutorTo_call(src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mapExecutorTo_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      public mapExecutorTo_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapExecutorTo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mapExecutorTo_args args = new mapExecutorTo_args();
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void groupBy(org.ignis.rpc.ISource src, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      groupBy_call method_call = new groupBy_call(src, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class groupBy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      private long numPartitions;
      public groupBy_call(org.ignis.rpc.ISource src, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.numPartitions = numPartitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupBy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        groupBy_args args = new groupBy_args();
        args.setSrc(src);
        args.setNumPartitions(numPartitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sort(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sort_call method_call = new sort_call(ascending, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sort_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private boolean ascending;
      public sort_call(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ascending = ascending;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sort_args args = new sort_args();
        args.setAscending(ascending);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sort2(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sort2_call method_call = new sort2_call(ascending, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sort2_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private boolean ascending;
      private long numPartitions;
      public sort2_call(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ascending = ascending;
        this.numPartitions = numPartitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sort2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sort2_args args = new sort2_args();
        args.setAscending(ascending);
        args.setNumPartitions(numPartitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sortBy(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sortBy_call method_call = new sortBy_call(src, ascending, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sortBy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      private boolean ascending;
      public sortBy_call(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.ascending = ascending;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortBy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sortBy_args args = new sortBy_args();
        args.setSrc(src);
        args.setAscending(ascending);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sortBy3_call method_call = new sortBy3_call(src, ascending, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sortBy3_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      private boolean ascending;
      private long numPartitions;
      public sortBy3_call(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.ascending = ascending;
        this.numPartitions = numPartitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortBy3", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sortBy3_args args = new sortBy3_args();
        args.setSrc(src);
        args.setAscending(ascending);
        args.setNumPartitions(numPartitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void flatMapValues(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      flatMapValues_call method_call = new flatMapValues_call(src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class flatMapValues_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      public flatMapValues_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("flatMapValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        flatMapValues_args args = new flatMapValues_args();
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void mapValues(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mapValues_call method_call = new mapValues_call(src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mapValues_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      public mapValues_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mapValues_args args = new mapValues_args();
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void groupByKey(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      groupByKey_call method_call = new groupByKey_call(numPartitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class groupByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long numPartitions;
      public groupByKey_call(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numPartitions = numPartitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        groupByKey_args args = new groupByKey_args();
        args.setNumPartitions(numPartitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void groupByKey2(long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      groupByKey2_call method_call = new groupByKey2_call(numPartitions, src, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class groupByKey2_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long numPartitions;
      private org.ignis.rpc.ISource src;
      public groupByKey2_call(long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numPartitions = numPartitions;
        this.src = src;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupByKey2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        groupByKey2_args args = new groupByKey2_args();
        args.setNumPartitions(numPartitions);
        args.setSrc(src);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reduceByKey_call method_call = new reduceByKey_call(src, numPartitions, localReduce, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reduceByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      private long numPartitions;
      private boolean localReduce;
      public reduceByKey_call(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.numPartitions = numPartitions;
        this.localReduce = localReduce;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reduceByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reduceByKey_args args = new reduceByKey_args();
        args.setSrc(src);
        args.setNumPartitions(numPartitions);
        args.setLocalReduce(localReduce);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      aggregateByKey_call method_call = new aggregateByKey_call(zero, seqOp, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class aggregateByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource zero;
      private org.ignis.rpc.ISource seqOp;
      private long numPartitions;
      public aggregateByKey_call(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zero = zero;
        this.seqOp = seqOp;
        this.numPartitions = numPartitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("aggregateByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        aggregateByKey_args args = new aggregateByKey_args();
        args.setZero(zero);
        args.setSeqOp(seqOp);
        args.setNumPartitions(numPartitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      aggregateByKey4_call method_call = new aggregateByKey4_call(zero, seqOp, combOp, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class aggregateByKey4_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource zero;
      private org.ignis.rpc.ISource seqOp;
      private org.ignis.rpc.ISource combOp;
      private long numPartitions;
      public aggregateByKey4_call(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zero = zero;
        this.seqOp = seqOp;
        this.combOp = combOp;
        this.numPartitions = numPartitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("aggregateByKey4", org.apache.thrift.protocol.TMessageType.CALL, 0));
        aggregateByKey4_args args = new aggregateByKey4_args();
        args.setZero(zero);
        args.setSeqOp(seqOp);
        args.setCombOp(combOp);
        args.setNumPartitions(numPartitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      foldByKey_call method_call = new foldByKey_call(zero, src, numPartitions, localFold, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class foldByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource zero;
      private org.ignis.rpc.ISource src;
      private long numPartitions;
      private boolean localFold;
      public foldByKey_call(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zero = zero;
        this.src = src;
        this.numPartitions = numPartitions;
        this.localFold = localFold;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("foldByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        foldByKey_args args = new foldByKey_args();
        args.setZero(zero);
        args.setSrc(src);
        args.setNumPartitions(numPartitions);
        args.setLocalFold(localFold);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sortByKey(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sortByKey_call method_call = new sortByKey_call(ascending, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sortByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private boolean ascending;
      public sortByKey_call(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ascending = ascending;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sortByKey_args args = new sortByKey_args();
        args.setAscending(ascending);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sortByKey2a(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sortByKey2a_call method_call = new sortByKey2a_call(ascending, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sortByKey2a_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private boolean ascending;
      private long numPartitions;
      public sortByKey2a_call(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ascending = ascending;
        this.numPartitions = numPartitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortByKey2a", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sortByKey2a_args args = new sortByKey2a_args();
        args.setAscending(ascending);
        args.setNumPartitions(numPartitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sortByKey2b(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sortByKey2b_call method_call = new sortByKey2b_call(src, ascending, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sortByKey2b_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      private boolean ascending;
      public sortByKey2b_call(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.ascending = ascending;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortByKey2b", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sortByKey2b_args args = new sortByKey2b_args();
        args.setSrc(src);
        args.setAscending(ascending);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sortByKey3_call method_call = new sortByKey3_call(src, ascending, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sortByKey3_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private org.ignis.rpc.ISource src;
      private boolean ascending;
      private long numPartitions;
      public sortByKey3_call(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.ascending = ascending;
        this.numPartitions = numPartitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortByKey3", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sortByKey3_args args = new sortByKey3_args();
        args.setSrc(src);
        args.setAscending(ascending);
        args.setNumPartitions(numPartitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("map_", new map_());
      processMap.put("filter", new filter());
      processMap.put("flatmap", new flatmap());
      processMap.put("keyBy", new keyBy());
      processMap.put("mapPartitions", new mapPartitions());
      processMap.put("mapPartitionsWithIndex", new mapPartitionsWithIndex());
      processMap.put("mapExecutor", new mapExecutor());
      processMap.put("mapExecutorTo", new mapExecutorTo());
      processMap.put("groupBy", new groupBy());
      processMap.put("sort", new sort());
      processMap.put("sort2", new sort2());
      processMap.put("sortBy", new sortBy());
      processMap.put("sortBy3", new sortBy3());
      processMap.put("flatMapValues", new flatMapValues());
      processMap.put("mapValues", new mapValues());
      processMap.put("groupByKey", new groupByKey());
      processMap.put("groupByKey2", new groupByKey2());
      processMap.put("reduceByKey", new reduceByKey());
      processMap.put("aggregateByKey", new aggregateByKey());
      processMap.put("aggregateByKey4", new aggregateByKey4());
      processMap.put("foldByKey", new foldByKey());
      processMap.put("sortByKey", new sortByKey());
      processMap.put("sortByKey2a", new sortByKey2a());
      processMap.put("sortByKey2b", new sortByKey2b());
      processMap.put("sortByKey3", new sortByKey3());
      return processMap;
    }

    public static class map_<I extends Iface> extends org.apache.thrift.ProcessFunction<I, map__args> {
      public map_() {
        super("map_");
      }

      public map__args getEmptyArgsInstance() {
        return new map__args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public map__result getResult(I iface, map__args args) throws org.apache.thrift.TException {
        map__result result = new map__result();
        try {
          iface.map_(args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class filter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, filter_args> {
      public filter() {
        super("filter");
      }

      public filter_args getEmptyArgsInstance() {
        return new filter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public filter_result getResult(I iface, filter_args args) throws org.apache.thrift.TException {
        filter_result result = new filter_result();
        try {
          iface.filter(args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class flatmap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, flatmap_args> {
      public flatmap() {
        super("flatmap");
      }

      public flatmap_args getEmptyArgsInstance() {
        return new flatmap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public flatmap_result getResult(I iface, flatmap_args args) throws org.apache.thrift.TException {
        flatmap_result result = new flatmap_result();
        try {
          iface.flatmap(args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class keyBy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, keyBy_args> {
      public keyBy() {
        super("keyBy");
      }

      public keyBy_args getEmptyArgsInstance() {
        return new keyBy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public keyBy_result getResult(I iface, keyBy_args args) throws org.apache.thrift.TException {
        keyBy_result result = new keyBy_result();
        try {
          iface.keyBy(args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class mapPartitions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapPartitions_args> {
      public mapPartitions() {
        super("mapPartitions");
      }

      public mapPartitions_args getEmptyArgsInstance() {
        return new mapPartitions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public mapPartitions_result getResult(I iface, mapPartitions_args args) throws org.apache.thrift.TException {
        mapPartitions_result result = new mapPartitions_result();
        try {
          iface.mapPartitions(args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class mapPartitionsWithIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapPartitionsWithIndex_args> {
      public mapPartitionsWithIndex() {
        super("mapPartitionsWithIndex");
      }

      public mapPartitionsWithIndex_args getEmptyArgsInstance() {
        return new mapPartitionsWithIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public mapPartitionsWithIndex_result getResult(I iface, mapPartitionsWithIndex_args args) throws org.apache.thrift.TException {
        mapPartitionsWithIndex_result result = new mapPartitionsWithIndex_result();
        try {
          iface.mapPartitionsWithIndex(args.src, args.preservesPartitioning);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class mapExecutor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapExecutor_args> {
      public mapExecutor() {
        super("mapExecutor");
      }

      public mapExecutor_args getEmptyArgsInstance() {
        return new mapExecutor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public mapExecutor_result getResult(I iface, mapExecutor_args args) throws org.apache.thrift.TException {
        mapExecutor_result result = new mapExecutor_result();
        try {
          iface.mapExecutor(args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class mapExecutorTo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapExecutorTo_args> {
      public mapExecutorTo() {
        super("mapExecutorTo");
      }

      public mapExecutorTo_args getEmptyArgsInstance() {
        return new mapExecutorTo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public mapExecutorTo_result getResult(I iface, mapExecutorTo_args args) throws org.apache.thrift.TException {
        mapExecutorTo_result result = new mapExecutorTo_result();
        try {
          iface.mapExecutorTo(args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class groupBy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, groupBy_args> {
      public groupBy() {
        super("groupBy");
      }

      public groupBy_args getEmptyArgsInstance() {
        return new groupBy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public groupBy_result getResult(I iface, groupBy_args args) throws org.apache.thrift.TException {
        groupBy_result result = new groupBy_result();
        try {
          iface.groupBy(args.src, args.numPartitions);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class sort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sort_args> {
      public sort() {
        super("sort");
      }

      public sort_args getEmptyArgsInstance() {
        return new sort_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sort_result getResult(I iface, sort_args args) throws org.apache.thrift.TException {
        sort_result result = new sort_result();
        try {
          iface.sort(args.ascending);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class sort2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sort2_args> {
      public sort2() {
        super("sort2");
      }

      public sort2_args getEmptyArgsInstance() {
        return new sort2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sort2_result getResult(I iface, sort2_args args) throws org.apache.thrift.TException {
        sort2_result result = new sort2_result();
        try {
          iface.sort2(args.ascending, args.numPartitions);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class sortBy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortBy_args> {
      public sortBy() {
        super("sortBy");
      }

      public sortBy_args getEmptyArgsInstance() {
        return new sortBy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sortBy_result getResult(I iface, sortBy_args args) throws org.apache.thrift.TException {
        sortBy_result result = new sortBy_result();
        try {
          iface.sortBy(args.src, args.ascending);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class sortBy3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortBy3_args> {
      public sortBy3() {
        super("sortBy3");
      }

      public sortBy3_args getEmptyArgsInstance() {
        return new sortBy3_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sortBy3_result getResult(I iface, sortBy3_args args) throws org.apache.thrift.TException {
        sortBy3_result result = new sortBy3_result();
        try {
          iface.sortBy3(args.src, args.ascending, args.numPartitions);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class flatMapValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, flatMapValues_args> {
      public flatMapValues() {
        super("flatMapValues");
      }

      public flatMapValues_args getEmptyArgsInstance() {
        return new flatMapValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public flatMapValues_result getResult(I iface, flatMapValues_args args) throws org.apache.thrift.TException {
        flatMapValues_result result = new flatMapValues_result();
        try {
          iface.flatMapValues(args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class mapValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapValues_args> {
      public mapValues() {
        super("mapValues");
      }

      public mapValues_args getEmptyArgsInstance() {
        return new mapValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public mapValues_result getResult(I iface, mapValues_args args) throws org.apache.thrift.TException {
        mapValues_result result = new mapValues_result();
        try {
          iface.mapValues(args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class groupByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, groupByKey_args> {
      public groupByKey() {
        super("groupByKey");
      }

      public groupByKey_args getEmptyArgsInstance() {
        return new groupByKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public groupByKey_result getResult(I iface, groupByKey_args args) throws org.apache.thrift.TException {
        groupByKey_result result = new groupByKey_result();
        try {
          iface.groupByKey(args.numPartitions);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class groupByKey2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, groupByKey2_args> {
      public groupByKey2() {
        super("groupByKey2");
      }

      public groupByKey2_args getEmptyArgsInstance() {
        return new groupByKey2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public groupByKey2_result getResult(I iface, groupByKey2_args args) throws org.apache.thrift.TException {
        groupByKey2_result result = new groupByKey2_result();
        try {
          iface.groupByKey2(args.numPartitions, args.src);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class reduceByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reduceByKey_args> {
      public reduceByKey() {
        super("reduceByKey");
      }

      public reduceByKey_args getEmptyArgsInstance() {
        return new reduceByKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public reduceByKey_result getResult(I iface, reduceByKey_args args) throws org.apache.thrift.TException {
        reduceByKey_result result = new reduceByKey_result();
        try {
          iface.reduceByKey(args.src, args.numPartitions, args.localReduce);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class aggregateByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, aggregateByKey_args> {
      public aggregateByKey() {
        super("aggregateByKey");
      }

      public aggregateByKey_args getEmptyArgsInstance() {
        return new aggregateByKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public aggregateByKey_result getResult(I iface, aggregateByKey_args args) throws org.apache.thrift.TException {
        aggregateByKey_result result = new aggregateByKey_result();
        try {
          iface.aggregateByKey(args.zero, args.seqOp, args.numPartitions);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class aggregateByKey4<I extends Iface> extends org.apache.thrift.ProcessFunction<I, aggregateByKey4_args> {
      public aggregateByKey4() {
        super("aggregateByKey4");
      }

      public aggregateByKey4_args getEmptyArgsInstance() {
        return new aggregateByKey4_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public aggregateByKey4_result getResult(I iface, aggregateByKey4_args args) throws org.apache.thrift.TException {
        aggregateByKey4_result result = new aggregateByKey4_result();
        try {
          iface.aggregateByKey4(args.zero, args.seqOp, args.combOp, args.numPartitions);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class foldByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, foldByKey_args> {
      public foldByKey() {
        super("foldByKey");
      }

      public foldByKey_args getEmptyArgsInstance() {
        return new foldByKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public foldByKey_result getResult(I iface, foldByKey_args args) throws org.apache.thrift.TException {
        foldByKey_result result = new foldByKey_result();
        try {
          iface.foldByKey(args.zero, args.src, args.numPartitions, args.localFold);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class sortByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortByKey_args> {
      public sortByKey() {
        super("sortByKey");
      }

      public sortByKey_args getEmptyArgsInstance() {
        return new sortByKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sortByKey_result getResult(I iface, sortByKey_args args) throws org.apache.thrift.TException {
        sortByKey_result result = new sortByKey_result();
        try {
          iface.sortByKey(args.ascending);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class sortByKey2a<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortByKey2a_args> {
      public sortByKey2a() {
        super("sortByKey2a");
      }

      public sortByKey2a_args getEmptyArgsInstance() {
        return new sortByKey2a_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sortByKey2a_result getResult(I iface, sortByKey2a_args args) throws org.apache.thrift.TException {
        sortByKey2a_result result = new sortByKey2a_result();
        try {
          iface.sortByKey2a(args.ascending, args.numPartitions);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class sortByKey2b<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortByKey2b_args> {
      public sortByKey2b() {
        super("sortByKey2b");
      }

      public sortByKey2b_args getEmptyArgsInstance() {
        return new sortByKey2b_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sortByKey2b_result getResult(I iface, sortByKey2b_args args) throws org.apache.thrift.TException {
        sortByKey2b_result result = new sortByKey2b_result();
        try {
          iface.sortByKey2b(args.src, args.ascending);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class sortByKey3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortByKey3_args> {
      public sortByKey3() {
        super("sortByKey3");
      }

      public sortByKey3_args getEmptyArgsInstance() {
        return new sortByKey3_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sortByKey3_result getResult(I iface, sortByKey3_args args) throws org.apache.thrift.TException {
        sortByKey3_result result = new sortByKey3_result();
        try {
          iface.sortByKey3(args.src, args.ascending, args.numPartitions);
        } catch (org.ignis.rpc.IExecutorException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("map_", new map_());
      processMap.put("filter", new filter());
      processMap.put("flatmap", new flatmap());
      processMap.put("keyBy", new keyBy());
      processMap.put("mapPartitions", new mapPartitions());
      processMap.put("mapPartitionsWithIndex", new mapPartitionsWithIndex());
      processMap.put("mapExecutor", new mapExecutor());
      processMap.put("mapExecutorTo", new mapExecutorTo());
      processMap.put("groupBy", new groupBy());
      processMap.put("sort", new sort());
      processMap.put("sort2", new sort2());
      processMap.put("sortBy", new sortBy());
      processMap.put("sortBy3", new sortBy3());
      processMap.put("flatMapValues", new flatMapValues());
      processMap.put("mapValues", new mapValues());
      processMap.put("groupByKey", new groupByKey());
      processMap.put("groupByKey2", new groupByKey2());
      processMap.put("reduceByKey", new reduceByKey());
      processMap.put("aggregateByKey", new aggregateByKey());
      processMap.put("aggregateByKey4", new aggregateByKey4());
      processMap.put("foldByKey", new foldByKey());
      processMap.put("sortByKey", new sortByKey());
      processMap.put("sortByKey2a", new sortByKey2a());
      processMap.put("sortByKey2b", new sortByKey2b());
      processMap.put("sortByKey3", new sortByKey3());
      return processMap;
    }

    public static class map_<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, map__args, Void> {
      public map_() {
        super("map_");
      }

      public map__args getEmptyArgsInstance() {
        return new map__args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            map__result result = new map__result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            map__result result = new map__result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, map__args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.map_(args.src,resultHandler);
      }
    }

    public static class filter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, filter_args, Void> {
      public filter() {
        super("filter");
      }

      public filter_args getEmptyArgsInstance() {
        return new filter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            filter_result result = new filter_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            filter_result result = new filter_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, filter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.filter(args.src,resultHandler);
      }
    }

    public static class flatmap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, flatmap_args, Void> {
      public flatmap() {
        super("flatmap");
      }

      public flatmap_args getEmptyArgsInstance() {
        return new flatmap_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            flatmap_result result = new flatmap_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            flatmap_result result = new flatmap_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, flatmap_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.flatmap(args.src,resultHandler);
      }
    }

    public static class keyBy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, keyBy_args, Void> {
      public keyBy() {
        super("keyBy");
      }

      public keyBy_args getEmptyArgsInstance() {
        return new keyBy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            keyBy_result result = new keyBy_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            keyBy_result result = new keyBy_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, keyBy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.keyBy(args.src,resultHandler);
      }
    }

    public static class mapPartitions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapPartitions_args, Void> {
      public mapPartitions() {
        super("mapPartitions");
      }

      public mapPartitions_args getEmptyArgsInstance() {
        return new mapPartitions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            mapPartitions_result result = new mapPartitions_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mapPartitions_result result = new mapPartitions_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mapPartitions_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.mapPartitions(args.src,resultHandler);
      }
    }

    public static class mapPartitionsWithIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapPartitionsWithIndex_args, Void> {
      public mapPartitionsWithIndex() {
        super("mapPartitionsWithIndex");
      }

      public mapPartitionsWithIndex_args getEmptyArgsInstance() {
        return new mapPartitionsWithIndex_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            mapPartitionsWithIndex_result result = new mapPartitionsWithIndex_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mapPartitionsWithIndex_result result = new mapPartitionsWithIndex_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mapPartitionsWithIndex_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.mapPartitionsWithIndex(args.src, args.preservesPartitioning,resultHandler);
      }
    }

    public static class mapExecutor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapExecutor_args, Void> {
      public mapExecutor() {
        super("mapExecutor");
      }

      public mapExecutor_args getEmptyArgsInstance() {
        return new mapExecutor_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            mapExecutor_result result = new mapExecutor_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mapExecutor_result result = new mapExecutor_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mapExecutor_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.mapExecutor(args.src,resultHandler);
      }
    }

    public static class mapExecutorTo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapExecutorTo_args, Void> {
      public mapExecutorTo() {
        super("mapExecutorTo");
      }

      public mapExecutorTo_args getEmptyArgsInstance() {
        return new mapExecutorTo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            mapExecutorTo_result result = new mapExecutorTo_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mapExecutorTo_result result = new mapExecutorTo_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mapExecutorTo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.mapExecutorTo(args.src,resultHandler);
      }
    }

    public static class groupBy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, groupBy_args, Void> {
      public groupBy() {
        super("groupBy");
      }

      public groupBy_args getEmptyArgsInstance() {
        return new groupBy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            groupBy_result result = new groupBy_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            groupBy_result result = new groupBy_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, groupBy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.groupBy(args.src, args.numPartitions,resultHandler);
      }
    }

    public static class sort<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sort_args, Void> {
      public sort() {
        super("sort");
      }

      public sort_args getEmptyArgsInstance() {
        return new sort_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sort_result result = new sort_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sort_result result = new sort_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sort_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sort(args.ascending,resultHandler);
      }
    }

    public static class sort2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sort2_args, Void> {
      public sort2() {
        super("sort2");
      }

      public sort2_args getEmptyArgsInstance() {
        return new sort2_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sort2_result result = new sort2_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sort2_result result = new sort2_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sort2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sort2(args.ascending, args.numPartitions,resultHandler);
      }
    }

    public static class sortBy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortBy_args, Void> {
      public sortBy() {
        super("sortBy");
      }

      public sortBy_args getEmptyArgsInstance() {
        return new sortBy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sortBy_result result = new sortBy_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sortBy_result result = new sortBy_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sortBy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sortBy(args.src, args.ascending,resultHandler);
      }
    }

    public static class sortBy3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortBy3_args, Void> {
      public sortBy3() {
        super("sortBy3");
      }

      public sortBy3_args getEmptyArgsInstance() {
        return new sortBy3_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sortBy3_result result = new sortBy3_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sortBy3_result result = new sortBy3_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sortBy3_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sortBy3(args.src, args.ascending, args.numPartitions,resultHandler);
      }
    }

    public static class flatMapValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, flatMapValues_args, Void> {
      public flatMapValues() {
        super("flatMapValues");
      }

      public flatMapValues_args getEmptyArgsInstance() {
        return new flatMapValues_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            flatMapValues_result result = new flatMapValues_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            flatMapValues_result result = new flatMapValues_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, flatMapValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.flatMapValues(args.src,resultHandler);
      }
    }

    public static class mapValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapValues_args, Void> {
      public mapValues() {
        super("mapValues");
      }

      public mapValues_args getEmptyArgsInstance() {
        return new mapValues_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            mapValues_result result = new mapValues_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mapValues_result result = new mapValues_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mapValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.mapValues(args.src,resultHandler);
      }
    }

    public static class groupByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, groupByKey_args, Void> {
      public groupByKey() {
        super("groupByKey");
      }

      public groupByKey_args getEmptyArgsInstance() {
        return new groupByKey_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            groupByKey_result result = new groupByKey_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            groupByKey_result result = new groupByKey_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, groupByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.groupByKey(args.numPartitions,resultHandler);
      }
    }

    public static class groupByKey2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, groupByKey2_args, Void> {
      public groupByKey2() {
        super("groupByKey2");
      }

      public groupByKey2_args getEmptyArgsInstance() {
        return new groupByKey2_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            groupByKey2_result result = new groupByKey2_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            groupByKey2_result result = new groupByKey2_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, groupByKey2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.groupByKey2(args.numPartitions, args.src,resultHandler);
      }
    }

    public static class reduceByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reduceByKey_args, Void> {
      public reduceByKey() {
        super("reduceByKey");
      }

      public reduceByKey_args getEmptyArgsInstance() {
        return new reduceByKey_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            reduceByKey_result result = new reduceByKey_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reduceByKey_result result = new reduceByKey_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reduceByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.reduceByKey(args.src, args.numPartitions, args.localReduce,resultHandler);
      }
    }

    public static class aggregateByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, aggregateByKey_args, Void> {
      public aggregateByKey() {
        super("aggregateByKey");
      }

      public aggregateByKey_args getEmptyArgsInstance() {
        return new aggregateByKey_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            aggregateByKey_result result = new aggregateByKey_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            aggregateByKey_result result = new aggregateByKey_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, aggregateByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.aggregateByKey(args.zero, args.seqOp, args.numPartitions,resultHandler);
      }
    }

    public static class aggregateByKey4<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, aggregateByKey4_args, Void> {
      public aggregateByKey4() {
        super("aggregateByKey4");
      }

      public aggregateByKey4_args getEmptyArgsInstance() {
        return new aggregateByKey4_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            aggregateByKey4_result result = new aggregateByKey4_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            aggregateByKey4_result result = new aggregateByKey4_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, aggregateByKey4_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.aggregateByKey4(args.zero, args.seqOp, args.combOp, args.numPartitions,resultHandler);
      }
    }

    public static class foldByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, foldByKey_args, Void> {
      public foldByKey() {
        super("foldByKey");
      }

      public foldByKey_args getEmptyArgsInstance() {
        return new foldByKey_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            foldByKey_result result = new foldByKey_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            foldByKey_result result = new foldByKey_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, foldByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.foldByKey(args.zero, args.src, args.numPartitions, args.localFold,resultHandler);
      }
    }

    public static class sortByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortByKey_args, Void> {
      public sortByKey() {
        super("sortByKey");
      }

      public sortByKey_args getEmptyArgsInstance() {
        return new sortByKey_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sortByKey_result result = new sortByKey_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sortByKey_result result = new sortByKey_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sortByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sortByKey(args.ascending,resultHandler);
      }
    }

    public static class sortByKey2a<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortByKey2a_args, Void> {
      public sortByKey2a() {
        super("sortByKey2a");
      }

      public sortByKey2a_args getEmptyArgsInstance() {
        return new sortByKey2a_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sortByKey2a_result result = new sortByKey2a_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sortByKey2a_result result = new sortByKey2a_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sortByKey2a_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sortByKey2a(args.ascending, args.numPartitions,resultHandler);
      }
    }

    public static class sortByKey2b<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortByKey2b_args, Void> {
      public sortByKey2b() {
        super("sortByKey2b");
      }

      public sortByKey2b_args getEmptyArgsInstance() {
        return new sortByKey2b_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sortByKey2b_result result = new sortByKey2b_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sortByKey2b_result result = new sortByKey2b_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sortByKey2b_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sortByKey2b(args.src, args.ascending,resultHandler);
      }
    }

    public static class sortByKey3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortByKey3_args, Void> {
      public sortByKey3() {
        super("sortByKey3");
      }

      public sortByKey3_args getEmptyArgsInstance() {
        return new sortByKey3_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sortByKey3_result result = new sortByKey3_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sortByKey3_result result = new sortByKey3_result();
            if (e instanceof org.ignis.rpc.IExecutorException) {
              result.ex = (org.ignis.rpc.IExecutorException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sortByKey3_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sortByKey3(args.src, args.ascending, args.numPartitions,resultHandler);
      }
    }

  }

  public static class map__args implements org.apache.thrift.TBase<map__args, map__args._Fields>, java.io.Serializable, Cloneable, Comparable<map__args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("map__args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new map__argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new map__argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(map__args.class, metaDataMap);
    }

    public map__args() {
    }

    public map__args(
      org.ignis.rpc.ISource src)
    {
      this();
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public map__args(map__args other) {
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public map__args deepCopy() {
      return new map__args(this);
    }

    @Override
    public void clear() {
      this.src = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public map__args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof map__args)
        return this.equals((map__args)that);
      return false;
    }

    public boolean equals(map__args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(map__args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("map__args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class map__argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public map__argsStandardScheme getScheme() {
        return new map__argsStandardScheme();
      }
    }

    private static class map__argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<map__args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, map__args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, map__args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class map__argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public map__argsTupleScheme getScheme() {
        return new map__argsTupleScheme();
      }
    }

    private static class map__argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<map__args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, map__args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, map__args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class map__result implements org.apache.thrift.TBase<map__result, map__result._Fields>, java.io.Serializable, Cloneable, Comparable<map__result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("map__result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new map__resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new map__resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(map__result.class, metaDataMap);
    }

    public map__result() {
    }

    public map__result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public map__result(map__result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public map__result deepCopy() {
      return new map__result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public map__result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof map__result)
        return this.equals((map__result)that);
      return false;
    }

    public boolean equals(map__result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(map__result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("map__result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class map__resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public map__resultStandardScheme getScheme() {
        return new map__resultStandardScheme();
      }
    }

    private static class map__resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<map__result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, map__result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, map__result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class map__resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public map__resultTupleScheme getScheme() {
        return new map__resultTupleScheme();
      }
    }

    private static class map__resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<map__result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, map__result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, map__result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class filter_args implements org.apache.thrift.TBase<filter_args, filter_args._Fields>, java.io.Serializable, Cloneable, Comparable<filter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filter_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new filter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new filter_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filter_args.class, metaDataMap);
    }

    public filter_args() {
    }

    public filter_args(
      org.ignis.rpc.ISource src)
    {
      this();
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public filter_args(filter_args other) {
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public filter_args deepCopy() {
      return new filter_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public filter_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof filter_args)
        return this.equals((filter_args)that);
      return false;
    }

    public boolean equals(filter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(filter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("filter_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class filter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public filter_argsStandardScheme getScheme() {
        return new filter_argsStandardScheme();
      }
    }

    private static class filter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<filter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, filter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, filter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class filter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public filter_argsTupleScheme getScheme() {
        return new filter_argsTupleScheme();
      }
    }

    private static class filter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<filter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, filter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, filter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class filter_result implements org.apache.thrift.TBase<filter_result, filter_result._Fields>, java.io.Serializable, Cloneable, Comparable<filter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filter_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new filter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new filter_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filter_result.class, metaDataMap);
    }

    public filter_result() {
    }

    public filter_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public filter_result(filter_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public filter_result deepCopy() {
      return new filter_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public filter_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof filter_result)
        return this.equals((filter_result)that);
      return false;
    }

    public boolean equals(filter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(filter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("filter_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class filter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public filter_resultStandardScheme getScheme() {
        return new filter_resultStandardScheme();
      }
    }

    private static class filter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<filter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, filter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, filter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class filter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public filter_resultTupleScheme getScheme() {
        return new filter_resultTupleScheme();
      }
    }

    private static class filter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<filter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, filter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, filter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class flatmap_args implements org.apache.thrift.TBase<flatmap_args, flatmap_args._Fields>, java.io.Serializable, Cloneable, Comparable<flatmap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flatmap_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new flatmap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new flatmap_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flatmap_args.class, metaDataMap);
    }

    public flatmap_args() {
    }

    public flatmap_args(
      org.ignis.rpc.ISource src)
    {
      this();
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flatmap_args(flatmap_args other) {
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public flatmap_args deepCopy() {
      return new flatmap_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public flatmap_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof flatmap_args)
        return this.equals((flatmap_args)that);
      return false;
    }

    public boolean equals(flatmap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(flatmap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("flatmap_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class flatmap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public flatmap_argsStandardScheme getScheme() {
        return new flatmap_argsStandardScheme();
      }
    }

    private static class flatmap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<flatmap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, flatmap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, flatmap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class flatmap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public flatmap_argsTupleScheme getScheme() {
        return new flatmap_argsTupleScheme();
      }
    }

    private static class flatmap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<flatmap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, flatmap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, flatmap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class flatmap_result implements org.apache.thrift.TBase<flatmap_result, flatmap_result._Fields>, java.io.Serializable, Cloneable, Comparable<flatmap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flatmap_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new flatmap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new flatmap_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flatmap_result.class, metaDataMap);
    }

    public flatmap_result() {
    }

    public flatmap_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flatmap_result(flatmap_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public flatmap_result deepCopy() {
      return new flatmap_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public flatmap_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof flatmap_result)
        return this.equals((flatmap_result)that);
      return false;
    }

    public boolean equals(flatmap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(flatmap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("flatmap_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class flatmap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public flatmap_resultStandardScheme getScheme() {
        return new flatmap_resultStandardScheme();
      }
    }

    private static class flatmap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<flatmap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, flatmap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, flatmap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class flatmap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public flatmap_resultTupleScheme getScheme() {
        return new flatmap_resultTupleScheme();
      }
    }

    private static class flatmap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<flatmap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, flatmap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, flatmap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class keyBy_args implements org.apache.thrift.TBase<keyBy_args, keyBy_args._Fields>, java.io.Serializable, Cloneable, Comparable<keyBy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("keyBy_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new keyBy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new keyBy_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(keyBy_args.class, metaDataMap);
    }

    public keyBy_args() {
    }

    public keyBy_args(
      org.ignis.rpc.ISource src)
    {
      this();
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public keyBy_args(keyBy_args other) {
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public keyBy_args deepCopy() {
      return new keyBy_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public keyBy_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof keyBy_args)
        return this.equals((keyBy_args)that);
      return false;
    }

    public boolean equals(keyBy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(keyBy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("keyBy_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class keyBy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public keyBy_argsStandardScheme getScheme() {
        return new keyBy_argsStandardScheme();
      }
    }

    private static class keyBy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<keyBy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, keyBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, keyBy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class keyBy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public keyBy_argsTupleScheme getScheme() {
        return new keyBy_argsTupleScheme();
      }
    }

    private static class keyBy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<keyBy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, keyBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, keyBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class keyBy_result implements org.apache.thrift.TBase<keyBy_result, keyBy_result._Fields>, java.io.Serializable, Cloneable, Comparable<keyBy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("keyBy_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new keyBy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new keyBy_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(keyBy_result.class, metaDataMap);
    }

    public keyBy_result() {
    }

    public keyBy_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public keyBy_result(keyBy_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public keyBy_result deepCopy() {
      return new keyBy_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public keyBy_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof keyBy_result)
        return this.equals((keyBy_result)that);
      return false;
    }

    public boolean equals(keyBy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(keyBy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("keyBy_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class keyBy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public keyBy_resultStandardScheme getScheme() {
        return new keyBy_resultStandardScheme();
      }
    }

    private static class keyBy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<keyBy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, keyBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, keyBy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class keyBy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public keyBy_resultTupleScheme getScheme() {
        return new keyBy_resultTupleScheme();
      }
    }

    private static class keyBy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<keyBy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, keyBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, keyBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapPartitions_args implements org.apache.thrift.TBase<mapPartitions_args, mapPartitions_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapPartitions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapPartitions_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapPartitions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapPartitions_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapPartitions_args.class, metaDataMap);
    }

    public mapPartitions_args() {
    }

    public mapPartitions_args(
      org.ignis.rpc.ISource src)
    {
      this();
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapPartitions_args(mapPartitions_args other) {
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public mapPartitions_args deepCopy() {
      return new mapPartitions_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public mapPartitions_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapPartitions_args)
        return this.equals((mapPartitions_args)that);
      return false;
    }

    public boolean equals(mapPartitions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapPartitions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapPartitions_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapPartitions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapPartitions_argsStandardScheme getScheme() {
        return new mapPartitions_argsStandardScheme();
      }
    }

    private static class mapPartitions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapPartitions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapPartitions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapPartitions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapPartitions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapPartitions_argsTupleScheme getScheme() {
        return new mapPartitions_argsTupleScheme();
      }
    }

    private static class mapPartitions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapPartitions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapPartitions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapPartitions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapPartitions_result implements org.apache.thrift.TBase<mapPartitions_result, mapPartitions_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapPartitions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapPartitions_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapPartitions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapPartitions_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapPartitions_result.class, metaDataMap);
    }

    public mapPartitions_result() {
    }

    public mapPartitions_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapPartitions_result(mapPartitions_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public mapPartitions_result deepCopy() {
      return new mapPartitions_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public mapPartitions_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapPartitions_result)
        return this.equals((mapPartitions_result)that);
      return false;
    }

    public boolean equals(mapPartitions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapPartitions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapPartitions_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapPartitions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapPartitions_resultStandardScheme getScheme() {
        return new mapPartitions_resultStandardScheme();
      }
    }

    private static class mapPartitions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapPartitions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapPartitions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapPartitions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapPartitions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapPartitions_resultTupleScheme getScheme() {
        return new mapPartitions_resultTupleScheme();
      }
    }

    private static class mapPartitions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapPartitions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapPartitions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapPartitions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapPartitionsWithIndex_args implements org.apache.thrift.TBase<mapPartitionsWithIndex_args, mapPartitionsWithIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapPartitionsWithIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapPartitionsWithIndex_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRESERVES_PARTITIONING_FIELD_DESC = new org.apache.thrift.protocol.TField("preservesPartitioning", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapPartitionsWithIndex_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapPartitionsWithIndex_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
    private boolean preservesPartitioning; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      PRESERVES_PARTITIONING((short)2, "preservesPartitioning");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // PRESERVES_PARTITIONING
            return PRESERVES_PARTITIONING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRESERVESPARTITIONING_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.PRESERVES_PARTITIONING, new org.apache.thrift.meta_data.FieldMetaData("preservesPartitioning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapPartitionsWithIndex_args.class, metaDataMap);
    }

    public mapPartitionsWithIndex_args() {
    }

    public mapPartitionsWithIndex_args(
      org.ignis.rpc.ISource src,
      boolean preservesPartitioning)
    {
      this();
      this.src = src;
      this.preservesPartitioning = preservesPartitioning;
      setPreservesPartitioningIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapPartitionsWithIndex_args(mapPartitionsWithIndex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
      this.preservesPartitioning = other.preservesPartitioning;
    }

    public mapPartitionsWithIndex_args deepCopy() {
      return new mapPartitionsWithIndex_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setPreservesPartitioningIsSet(false);
      this.preservesPartitioning = false;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public mapPartitionsWithIndex_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public boolean isPreservesPartitioning() {
      return this.preservesPartitioning;
    }

    public mapPartitionsWithIndex_args setPreservesPartitioning(boolean preservesPartitioning) {
      this.preservesPartitioning = preservesPartitioning;
      setPreservesPartitioningIsSet(true);
      return this;
    }

    public void unsetPreservesPartitioning() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESERVESPARTITIONING_ISSET_ID);
    }

    /** Returns true if field preservesPartitioning is set (has been assigned a value) and false otherwise */
    public boolean isSetPreservesPartitioning() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESERVESPARTITIONING_ISSET_ID);
    }

    public void setPreservesPartitioningIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESERVESPARTITIONING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      case PRESERVES_PARTITIONING:
        if (value == null) {
          unsetPreservesPartitioning();
        } else {
          setPreservesPartitioning((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case PRESERVES_PARTITIONING:
        return isPreservesPartitioning();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case PRESERVES_PARTITIONING:
        return isSetPreservesPartitioning();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapPartitionsWithIndex_args)
        return this.equals((mapPartitionsWithIndex_args)that);
      return false;
    }

    public boolean equals(mapPartitionsWithIndex_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_preservesPartitioning = true;
      boolean that_present_preservesPartitioning = true;
      if (this_present_preservesPartitioning || that_present_preservesPartitioning) {
        if (!(this_present_preservesPartitioning && that_present_preservesPartitioning))
          return false;
        if (this.preservesPartitioning != that.preservesPartitioning)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      hashCode = hashCode * 8191 + ((preservesPartitioning) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(mapPartitionsWithIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPreservesPartitioning()).compareTo(other.isSetPreservesPartitioning());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreservesPartitioning()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preservesPartitioning, other.preservesPartitioning);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapPartitionsWithIndex_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("preservesPartitioning:");
      sb.append(this.preservesPartitioning);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapPartitionsWithIndex_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapPartitionsWithIndex_argsStandardScheme getScheme() {
        return new mapPartitionsWithIndex_argsStandardScheme();
      }
    }

    private static class mapPartitionsWithIndex_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapPartitionsWithIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapPartitionsWithIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRESERVES_PARTITIONING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.preservesPartitioning = iprot.readBool();
                struct.setPreservesPartitioningIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapPartitionsWithIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRESERVES_PARTITIONING_FIELD_DESC);
        oprot.writeBool(struct.preservesPartitioning);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapPartitionsWithIndex_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapPartitionsWithIndex_argsTupleScheme getScheme() {
        return new mapPartitionsWithIndex_argsTupleScheme();
      }
    }

    private static class mapPartitionsWithIndex_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapPartitionsWithIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapPartitionsWithIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetPreservesPartitioning()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
        if (struct.isSetPreservesPartitioning()) {
          oprot.writeBool(struct.preservesPartitioning);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapPartitionsWithIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.preservesPartitioning = iprot.readBool();
          struct.setPreservesPartitioningIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapPartitionsWithIndex_result implements org.apache.thrift.TBase<mapPartitionsWithIndex_result, mapPartitionsWithIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapPartitionsWithIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapPartitionsWithIndex_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapPartitionsWithIndex_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapPartitionsWithIndex_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapPartitionsWithIndex_result.class, metaDataMap);
    }

    public mapPartitionsWithIndex_result() {
    }

    public mapPartitionsWithIndex_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapPartitionsWithIndex_result(mapPartitionsWithIndex_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public mapPartitionsWithIndex_result deepCopy() {
      return new mapPartitionsWithIndex_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public mapPartitionsWithIndex_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapPartitionsWithIndex_result)
        return this.equals((mapPartitionsWithIndex_result)that);
      return false;
    }

    public boolean equals(mapPartitionsWithIndex_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapPartitionsWithIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapPartitionsWithIndex_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapPartitionsWithIndex_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapPartitionsWithIndex_resultStandardScheme getScheme() {
        return new mapPartitionsWithIndex_resultStandardScheme();
      }
    }

    private static class mapPartitionsWithIndex_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapPartitionsWithIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapPartitionsWithIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapPartitionsWithIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapPartitionsWithIndex_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapPartitionsWithIndex_resultTupleScheme getScheme() {
        return new mapPartitionsWithIndex_resultTupleScheme();
      }
    }

    private static class mapPartitionsWithIndex_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapPartitionsWithIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapPartitionsWithIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapPartitionsWithIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapExecutor_args implements org.apache.thrift.TBase<mapExecutor_args, mapExecutor_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapExecutor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapExecutor_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapExecutor_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapExecutor_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapExecutor_args.class, metaDataMap);
    }

    public mapExecutor_args() {
    }

    public mapExecutor_args(
      org.ignis.rpc.ISource src)
    {
      this();
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapExecutor_args(mapExecutor_args other) {
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public mapExecutor_args deepCopy() {
      return new mapExecutor_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public mapExecutor_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapExecutor_args)
        return this.equals((mapExecutor_args)that);
      return false;
    }

    public boolean equals(mapExecutor_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapExecutor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapExecutor_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapExecutor_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapExecutor_argsStandardScheme getScheme() {
        return new mapExecutor_argsStandardScheme();
      }
    }

    private static class mapExecutor_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapExecutor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapExecutor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapExecutor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapExecutor_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapExecutor_argsTupleScheme getScheme() {
        return new mapExecutor_argsTupleScheme();
      }
    }

    private static class mapExecutor_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapExecutor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapExecutor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapExecutor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapExecutor_result implements org.apache.thrift.TBase<mapExecutor_result, mapExecutor_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapExecutor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapExecutor_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapExecutor_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapExecutor_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapExecutor_result.class, metaDataMap);
    }

    public mapExecutor_result() {
    }

    public mapExecutor_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapExecutor_result(mapExecutor_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public mapExecutor_result deepCopy() {
      return new mapExecutor_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public mapExecutor_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapExecutor_result)
        return this.equals((mapExecutor_result)that);
      return false;
    }

    public boolean equals(mapExecutor_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapExecutor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapExecutor_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapExecutor_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapExecutor_resultStandardScheme getScheme() {
        return new mapExecutor_resultStandardScheme();
      }
    }

    private static class mapExecutor_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapExecutor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapExecutor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapExecutor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapExecutor_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapExecutor_resultTupleScheme getScheme() {
        return new mapExecutor_resultTupleScheme();
      }
    }

    private static class mapExecutor_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapExecutor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapExecutor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapExecutor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapExecutorTo_args implements org.apache.thrift.TBase<mapExecutorTo_args, mapExecutorTo_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapExecutorTo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapExecutorTo_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapExecutorTo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapExecutorTo_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapExecutorTo_args.class, metaDataMap);
    }

    public mapExecutorTo_args() {
    }

    public mapExecutorTo_args(
      org.ignis.rpc.ISource src)
    {
      this();
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapExecutorTo_args(mapExecutorTo_args other) {
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public mapExecutorTo_args deepCopy() {
      return new mapExecutorTo_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public mapExecutorTo_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapExecutorTo_args)
        return this.equals((mapExecutorTo_args)that);
      return false;
    }

    public boolean equals(mapExecutorTo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapExecutorTo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapExecutorTo_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapExecutorTo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapExecutorTo_argsStandardScheme getScheme() {
        return new mapExecutorTo_argsStandardScheme();
      }
    }

    private static class mapExecutorTo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapExecutorTo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapExecutorTo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapExecutorTo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapExecutorTo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapExecutorTo_argsTupleScheme getScheme() {
        return new mapExecutorTo_argsTupleScheme();
      }
    }

    private static class mapExecutorTo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapExecutorTo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapExecutorTo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapExecutorTo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapExecutorTo_result implements org.apache.thrift.TBase<mapExecutorTo_result, mapExecutorTo_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapExecutorTo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapExecutorTo_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapExecutorTo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapExecutorTo_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapExecutorTo_result.class, metaDataMap);
    }

    public mapExecutorTo_result() {
    }

    public mapExecutorTo_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapExecutorTo_result(mapExecutorTo_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public mapExecutorTo_result deepCopy() {
      return new mapExecutorTo_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public mapExecutorTo_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapExecutorTo_result)
        return this.equals((mapExecutorTo_result)that);
      return false;
    }

    public boolean equals(mapExecutorTo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapExecutorTo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapExecutorTo_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapExecutorTo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapExecutorTo_resultStandardScheme getScheme() {
        return new mapExecutorTo_resultStandardScheme();
      }
    }

    private static class mapExecutorTo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapExecutorTo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapExecutorTo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapExecutorTo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapExecutorTo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapExecutorTo_resultTupleScheme getScheme() {
        return new mapExecutorTo_resultTupleScheme();
      }
    }

    private static class mapExecutorTo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapExecutorTo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapExecutorTo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapExecutorTo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class groupBy_args implements org.apache.thrift.TBase<groupBy_args, groupBy_args._Fields>, java.io.Serializable, Cloneable, Comparable<groupBy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupBy_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupBy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupBy_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
    private long numPartitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      NUM_PARTITIONS((short)2, "numPartitions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMPARTITIONS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupBy_args.class, metaDataMap);
    }

    public groupBy_args() {
    }

    public groupBy_args(
      org.ignis.rpc.ISource src,
      long numPartitions)
    {
      this();
      this.src = src;
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupBy_args(groupBy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
      this.numPartitions = other.numPartitions;
    }

    public groupBy_args deepCopy() {
      return new groupBy_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public groupBy_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public groupBy_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case NUM_PARTITIONS:
        return getNumPartitions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof groupBy_args)
        return this.equals((groupBy_args)that);
      return false;
    }

    public boolean equals(groupBy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      return hashCode;
    }

    @Override
    public int compareTo(groupBy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("groupBy_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class groupBy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupBy_argsStandardScheme getScheme() {
        return new groupBy_argsStandardScheme();
      }
    }

    private static class groupBy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupBy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, groupBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, groupBy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class groupBy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupBy_argsTupleScheme getScheme() {
        return new groupBy_argsTupleScheme();
      }
    }

    private static class groupBy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupBy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, groupBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetNumPartitions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, groupBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class groupBy_result implements org.apache.thrift.TBase<groupBy_result, groupBy_result._Fields>, java.io.Serializable, Cloneable, Comparable<groupBy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupBy_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupBy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupBy_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupBy_result.class, metaDataMap);
    }

    public groupBy_result() {
    }

    public groupBy_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupBy_result(groupBy_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public groupBy_result deepCopy() {
      return new groupBy_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public groupBy_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof groupBy_result)
        return this.equals((groupBy_result)that);
      return false;
    }

    public boolean equals(groupBy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(groupBy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("groupBy_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class groupBy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupBy_resultStandardScheme getScheme() {
        return new groupBy_resultStandardScheme();
      }
    }

    private static class groupBy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupBy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, groupBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, groupBy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class groupBy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupBy_resultTupleScheme getScheme() {
        return new groupBy_resultTupleScheme();
      }
    }

    private static class groupBy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupBy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, groupBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, groupBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sort_args implements org.apache.thrift.TBase<sort_args, sort_args._Fields>, java.io.Serializable, Cloneable, Comparable<sort_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sort_args");

    private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sort_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sort_argsTupleSchemeFactory();

    private boolean ascending; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASCENDING((short)1, "ascending");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASCENDING
            return ASCENDING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASCENDING_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sort_args.class, metaDataMap);
    }

    public sort_args() {
    }

    public sort_args(
      boolean ascending)
    {
      this();
      this.ascending = ascending;
      setAscendingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sort_args(sort_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ascending = other.ascending;
    }

    public sort_args deepCopy() {
      return new sort_args(this);
    }

    @Override
    public void clear() {
      setAscendingIsSet(false);
      this.ascending = false;
    }

    public boolean isAscending() {
      return this.ascending;
    }

    public sort_args setAscending(boolean ascending) {
      this.ascending = ascending;
      setAscendingIsSet(true);
      return this;
    }

    public void unsetAscending() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
    public boolean isSetAscending() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    public void setAscendingIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ASCENDING:
        if (value == null) {
          unsetAscending();
        } else {
          setAscending((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ASCENDING:
        return isAscending();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ASCENDING:
        return isSetAscending();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sort_args)
        return this.equals((sort_args)that);
      return false;
    }

    public boolean equals(sort_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ascending = true;
      boolean that_present_ascending = true;
      if (this_present_ascending || that_present_ascending) {
        if (!(this_present_ascending && that_present_ascending))
          return false;
        if (this.ascending != that.ascending)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(sort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAscending()).compareTo(other.isSetAscending());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAscending()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sort_args(");
      boolean first = true;

      sb.append("ascending:");
      sb.append(this.ascending);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sort_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sort_argsStandardScheme getScheme() {
        return new sort_argsStandardScheme();
      }
    }

    private static class sort_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sort_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASCENDING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.ascending = iprot.readBool();
                struct.setAscendingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
        oprot.writeBool(struct.ascending);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sort_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sort_argsTupleScheme getScheme() {
        return new sort_argsTupleScheme();
      }
    }

    private static class sort_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAscending()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAscending()) {
          oprot.writeBool(struct.ascending);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ascending = iprot.readBool();
          struct.setAscendingIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sort_result implements org.apache.thrift.TBase<sort_result, sort_result._Fields>, java.io.Serializable, Cloneable, Comparable<sort_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sort_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sort_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sort_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sort_result.class, metaDataMap);
    }

    public sort_result() {
    }

    public sort_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sort_result(sort_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public sort_result deepCopy() {
      return new sort_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public sort_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sort_result)
        return this.equals((sort_result)that);
      return false;
    }

    public boolean equals(sort_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sort_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sort_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sort_resultStandardScheme getScheme() {
        return new sort_resultStandardScheme();
      }
    }

    private static class sort_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sort_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sort_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sort_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sort_resultTupleScheme getScheme() {
        return new sort_resultTupleScheme();
      }
    }

    private static class sort_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sort_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sort2_args implements org.apache.thrift.TBase<sort2_args, sort2_args._Fields>, java.io.Serializable, Cloneable, Comparable<sort2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sort2_args");

    private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sort2_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sort2_argsTupleSchemeFactory();

    private boolean ascending; // required
    private long numPartitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASCENDING((short)1, "ascending"),
      NUM_PARTITIONS((short)2, "numPartitions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASCENDING
            return ASCENDING;
          case 2: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASCENDING_ISSET_ID = 0;
    private static final int __NUMPARTITIONS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sort2_args.class, metaDataMap);
    }

    public sort2_args() {
    }

    public sort2_args(
      boolean ascending,
      long numPartitions)
    {
      this();
      this.ascending = ascending;
      setAscendingIsSet(true);
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sort2_args(sort2_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ascending = other.ascending;
      this.numPartitions = other.numPartitions;
    }

    public sort2_args deepCopy() {
      return new sort2_args(this);
    }

    @Override
    public void clear() {
      setAscendingIsSet(false);
      this.ascending = false;
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
    }

    public boolean isAscending() {
      return this.ascending;
    }

    public sort2_args setAscending(boolean ascending) {
      this.ascending = ascending;
      setAscendingIsSet(true);
      return this;
    }

    public void unsetAscending() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
    public boolean isSetAscending() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    public void setAscendingIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public sort2_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ASCENDING:
        if (value == null) {
          unsetAscending();
        } else {
          setAscending((java.lang.Boolean)value);
        }
        break;

      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ASCENDING:
        return isAscending();

      case NUM_PARTITIONS:
        return getNumPartitions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ASCENDING:
        return isSetAscending();
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sort2_args)
        return this.equals((sort2_args)that);
      return false;
    }

    public boolean equals(sort2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ascending = true;
      boolean that_present_ascending = true;
      if (this_present_ascending || that_present_ascending) {
        if (!(this_present_ascending && that_present_ascending))
          return false;
        if (this.ascending != that.ascending)
          return false;
      }

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      return hashCode;
    }

    @Override
    public int compareTo(sort2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAscending()).compareTo(other.isSetAscending());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAscending()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sort2_args(");
      boolean first = true;

      sb.append("ascending:");
      sb.append(this.ascending);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sort2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sort2_argsStandardScheme getScheme() {
        return new sort2_argsStandardScheme();
      }
    }

    private static class sort2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sort2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sort2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASCENDING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.ascending = iprot.readBool();
                struct.setAscendingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sort2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
        oprot.writeBool(struct.ascending);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sort2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sort2_argsTupleScheme getScheme() {
        return new sort2_argsTupleScheme();
      }
    }

    private static class sort2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sort2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sort2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAscending()) {
          optionals.set(0);
        }
        if (struct.isSetNumPartitions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAscending()) {
          oprot.writeBool(struct.ascending);
        }
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sort2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ascending = iprot.readBool();
          struct.setAscendingIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sort2_result implements org.apache.thrift.TBase<sort2_result, sort2_result._Fields>, java.io.Serializable, Cloneable, Comparable<sort2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sort2_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sort2_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sort2_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sort2_result.class, metaDataMap);
    }

    public sort2_result() {
    }

    public sort2_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sort2_result(sort2_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public sort2_result deepCopy() {
      return new sort2_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public sort2_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sort2_result)
        return this.equals((sort2_result)that);
      return false;
    }

    public boolean equals(sort2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sort2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sort2_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sort2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sort2_resultStandardScheme getScheme() {
        return new sort2_resultStandardScheme();
      }
    }

    private static class sort2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sort2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sort2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sort2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sort2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sort2_resultTupleScheme getScheme() {
        return new sort2_resultTupleScheme();
      }
    }

    private static class sort2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sort2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sort2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sort2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortBy_args implements org.apache.thrift.TBase<sortBy_args, sortBy_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortBy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortBy_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortBy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortBy_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
    private boolean ascending; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      ASCENDING((short)2, "ascending");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // ASCENDING
            return ASCENDING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASCENDING_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortBy_args.class, metaDataMap);
    }

    public sortBy_args() {
    }

    public sortBy_args(
      org.ignis.rpc.ISource src,
      boolean ascending)
    {
      this();
      this.src = src;
      this.ascending = ascending;
      setAscendingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortBy_args(sortBy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
      this.ascending = other.ascending;
    }

    public sortBy_args deepCopy() {
      return new sortBy_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setAscendingIsSet(false);
      this.ascending = false;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public sortBy_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public boolean isAscending() {
      return this.ascending;
    }

    public sortBy_args setAscending(boolean ascending) {
      this.ascending = ascending;
      setAscendingIsSet(true);
      return this;
    }

    public void unsetAscending() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
    public boolean isSetAscending() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    public void setAscendingIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      case ASCENDING:
        if (value == null) {
          unsetAscending();
        } else {
          setAscending((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case ASCENDING:
        return isAscending();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case ASCENDING:
        return isSetAscending();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortBy_args)
        return this.equals((sortBy_args)that);
      return false;
    }

    public boolean equals(sortBy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_ascending = true;
      boolean that_present_ascending = true;
      if (this_present_ascending || that_present_ascending) {
        if (!(this_present_ascending && that_present_ascending))
          return false;
        if (this.ascending != that.ascending)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(sortBy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAscending()).compareTo(other.isSetAscending());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAscending()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortBy_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ascending:");
      sb.append(this.ascending);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortBy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortBy_argsStandardScheme getScheme() {
        return new sortBy_argsStandardScheme();
      }
    }

    private static class sortBy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortBy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASCENDING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.ascending = iprot.readBool();
                struct.setAscendingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortBy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
        oprot.writeBool(struct.ascending);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortBy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortBy_argsTupleScheme getScheme() {
        return new sortBy_argsTupleScheme();
      }
    }

    private static class sortBy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortBy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetAscending()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
        if (struct.isSetAscending()) {
          oprot.writeBool(struct.ascending);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ascending = iprot.readBool();
          struct.setAscendingIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortBy_result implements org.apache.thrift.TBase<sortBy_result, sortBy_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortBy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortBy_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortBy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortBy_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortBy_result.class, metaDataMap);
    }

    public sortBy_result() {
    }

    public sortBy_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortBy_result(sortBy_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public sortBy_result deepCopy() {
      return new sortBy_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public sortBy_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortBy_result)
        return this.equals((sortBy_result)that);
      return false;
    }

    public boolean equals(sortBy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sortBy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortBy_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortBy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortBy_resultStandardScheme getScheme() {
        return new sortBy_resultStandardScheme();
      }
    }

    private static class sortBy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortBy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortBy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortBy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortBy_resultTupleScheme getScheme() {
        return new sortBy_resultTupleScheme();
      }
    }

    private static class sortBy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortBy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortBy3_args implements org.apache.thrift.TBase<sortBy3_args, sortBy3_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortBy3_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortBy3_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortBy3_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortBy3_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
    private boolean ascending; // required
    private long numPartitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      ASCENDING((short)2, "ascending"),
      NUM_PARTITIONS((short)3, "numPartitions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // ASCENDING
            return ASCENDING;
          case 3: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASCENDING_ISSET_ID = 0;
    private static final int __NUMPARTITIONS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortBy3_args.class, metaDataMap);
    }

    public sortBy3_args() {
    }

    public sortBy3_args(
      org.ignis.rpc.ISource src,
      boolean ascending,
      long numPartitions)
    {
      this();
      this.src = src;
      this.ascending = ascending;
      setAscendingIsSet(true);
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortBy3_args(sortBy3_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
      this.ascending = other.ascending;
      this.numPartitions = other.numPartitions;
    }

    public sortBy3_args deepCopy() {
      return new sortBy3_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setAscendingIsSet(false);
      this.ascending = false;
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public sortBy3_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public boolean isAscending() {
      return this.ascending;
    }

    public sortBy3_args setAscending(boolean ascending) {
      this.ascending = ascending;
      setAscendingIsSet(true);
      return this;
    }

    public void unsetAscending() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
    public boolean isSetAscending() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    public void setAscendingIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public sortBy3_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      case ASCENDING:
        if (value == null) {
          unsetAscending();
        } else {
          setAscending((java.lang.Boolean)value);
        }
        break;

      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case ASCENDING:
        return isAscending();

      case NUM_PARTITIONS:
        return getNumPartitions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case ASCENDING:
        return isSetAscending();
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortBy3_args)
        return this.equals((sortBy3_args)that);
      return false;
    }

    public boolean equals(sortBy3_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_ascending = true;
      boolean that_present_ascending = true;
      if (this_present_ascending || that_present_ascending) {
        if (!(this_present_ascending && that_present_ascending))
          return false;
        if (this.ascending != that.ascending)
          return false;
      }

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      return hashCode;
    }

    @Override
    public int compareTo(sortBy3_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAscending()).compareTo(other.isSetAscending());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAscending()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortBy3_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ascending:");
      sb.append(this.ascending);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortBy3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortBy3_argsStandardScheme getScheme() {
        return new sortBy3_argsStandardScheme();
      }
    }

    private static class sortBy3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortBy3_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortBy3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASCENDING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.ascending = iprot.readBool();
                struct.setAscendingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortBy3_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
        oprot.writeBool(struct.ascending);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortBy3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortBy3_argsTupleScheme getScheme() {
        return new sortBy3_argsTupleScheme();
      }
    }

    private static class sortBy3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortBy3_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortBy3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetAscending()) {
          optionals.set(1);
        }
        if (struct.isSetNumPartitions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
        if (struct.isSetAscending()) {
          oprot.writeBool(struct.ascending);
        }
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortBy3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ascending = iprot.readBool();
          struct.setAscendingIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortBy3_result implements org.apache.thrift.TBase<sortBy3_result, sortBy3_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortBy3_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortBy3_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortBy3_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortBy3_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortBy3_result.class, metaDataMap);
    }

    public sortBy3_result() {
    }

    public sortBy3_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortBy3_result(sortBy3_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public sortBy3_result deepCopy() {
      return new sortBy3_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public sortBy3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortBy3_result)
        return this.equals((sortBy3_result)that);
      return false;
    }

    public boolean equals(sortBy3_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sortBy3_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortBy3_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortBy3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortBy3_resultStandardScheme getScheme() {
        return new sortBy3_resultStandardScheme();
      }
    }

    private static class sortBy3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortBy3_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortBy3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortBy3_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortBy3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortBy3_resultTupleScheme getScheme() {
        return new sortBy3_resultTupleScheme();
      }
    }

    private static class sortBy3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortBy3_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortBy3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortBy3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class flatMapValues_args implements org.apache.thrift.TBase<flatMapValues_args, flatMapValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<flatMapValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flatMapValues_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new flatMapValues_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new flatMapValues_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flatMapValues_args.class, metaDataMap);
    }

    public flatMapValues_args() {
    }

    public flatMapValues_args(
      org.ignis.rpc.ISource src)
    {
      this();
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flatMapValues_args(flatMapValues_args other) {
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public flatMapValues_args deepCopy() {
      return new flatMapValues_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public flatMapValues_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof flatMapValues_args)
        return this.equals((flatMapValues_args)that);
      return false;
    }

    public boolean equals(flatMapValues_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(flatMapValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("flatMapValues_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class flatMapValues_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public flatMapValues_argsStandardScheme getScheme() {
        return new flatMapValues_argsStandardScheme();
      }
    }

    private static class flatMapValues_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<flatMapValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, flatMapValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, flatMapValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class flatMapValues_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public flatMapValues_argsTupleScheme getScheme() {
        return new flatMapValues_argsTupleScheme();
      }
    }

    private static class flatMapValues_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<flatMapValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, flatMapValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, flatMapValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class flatMapValues_result implements org.apache.thrift.TBase<flatMapValues_result, flatMapValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<flatMapValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flatMapValues_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new flatMapValues_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new flatMapValues_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flatMapValues_result.class, metaDataMap);
    }

    public flatMapValues_result() {
    }

    public flatMapValues_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flatMapValues_result(flatMapValues_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public flatMapValues_result deepCopy() {
      return new flatMapValues_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public flatMapValues_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof flatMapValues_result)
        return this.equals((flatMapValues_result)that);
      return false;
    }

    public boolean equals(flatMapValues_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(flatMapValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("flatMapValues_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class flatMapValues_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public flatMapValues_resultStandardScheme getScheme() {
        return new flatMapValues_resultStandardScheme();
      }
    }

    private static class flatMapValues_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<flatMapValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, flatMapValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, flatMapValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class flatMapValues_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public flatMapValues_resultTupleScheme getScheme() {
        return new flatMapValues_resultTupleScheme();
      }
    }

    private static class flatMapValues_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<flatMapValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, flatMapValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, flatMapValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapValues_args implements org.apache.thrift.TBase<mapValues_args, mapValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapValues_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapValues_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapValues_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapValues_args.class, metaDataMap);
    }

    public mapValues_args() {
    }

    public mapValues_args(
      org.ignis.rpc.ISource src)
    {
      this();
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapValues_args(mapValues_args other) {
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public mapValues_args deepCopy() {
      return new mapValues_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public mapValues_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapValues_args)
        return this.equals((mapValues_args)that);
      return false;
    }

    public boolean equals(mapValues_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapValues_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapValues_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapValues_argsStandardScheme getScheme() {
        return new mapValues_argsStandardScheme();
      }
    }

    private static class mapValues_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapValues_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapValues_argsTupleScheme getScheme() {
        return new mapValues_argsTupleScheme();
      }
    }

    private static class mapValues_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapValues_result implements org.apache.thrift.TBase<mapValues_result, mapValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapValues_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapValues_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapValues_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapValues_result.class, metaDataMap);
    }

    public mapValues_result() {
    }

    public mapValues_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapValues_result(mapValues_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public mapValues_result deepCopy() {
      return new mapValues_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public mapValues_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapValues_result)
        return this.equals((mapValues_result)that);
      return false;
    }

    public boolean equals(mapValues_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapValues_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapValues_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapValues_resultStandardScheme getScheme() {
        return new mapValues_resultStandardScheme();
      }
    }

    private static class mapValues_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapValues_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapValues_resultTupleScheme getScheme() {
        return new mapValues_resultTupleScheme();
      }
    }

    private static class mapValues_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class groupByKey_args implements org.apache.thrift.TBase<groupByKey_args, groupByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<groupByKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByKey_args");

    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupByKey_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupByKey_argsTupleSchemeFactory();

    private long numPartitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM_PARTITIONS((short)1, "numPartitions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMPARTITIONS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByKey_args.class, metaDataMap);
    }

    public groupByKey_args() {
    }

    public groupByKey_args(
      long numPartitions)
    {
      this();
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupByKey_args(groupByKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numPartitions = other.numPartitions;
    }

    public groupByKey_args deepCopy() {
      return new groupByKey_args(this);
    }

    @Override
    public void clear() {
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public groupByKey_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM_PARTITIONS:
        return getNumPartitions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof groupByKey_args)
        return this.equals((groupByKey_args)that);
      return false;
    }

    public boolean equals(groupByKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      return hashCode;
    }

    @Override
    public int compareTo(groupByKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("groupByKey_args(");
      boolean first = true;

      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class groupByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupByKey_argsStandardScheme getScheme() {
        return new groupByKey_argsStandardScheme();
      }
    }

    private static class groupByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupByKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, groupByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, groupByKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class groupByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupByKey_argsTupleScheme getScheme() {
        return new groupByKey_argsTupleScheme();
      }
    }

    private static class groupByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupByKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, groupByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNumPartitions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, groupByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class groupByKey_result implements org.apache.thrift.TBase<groupByKey_result, groupByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<groupByKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByKey_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupByKey_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupByKey_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByKey_result.class, metaDataMap);
    }

    public groupByKey_result() {
    }

    public groupByKey_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupByKey_result(groupByKey_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public groupByKey_result deepCopy() {
      return new groupByKey_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public groupByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof groupByKey_result)
        return this.equals((groupByKey_result)that);
      return false;
    }

    public boolean equals(groupByKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(groupByKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("groupByKey_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class groupByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupByKey_resultStandardScheme getScheme() {
        return new groupByKey_resultStandardScheme();
      }
    }

    private static class groupByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupByKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, groupByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, groupByKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class groupByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupByKey_resultTupleScheme getScheme() {
        return new groupByKey_resultTupleScheme();
      }
    }

    private static class groupByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupByKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, groupByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, groupByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class groupByKey2_args implements org.apache.thrift.TBase<groupByKey2_args, groupByKey2_args._Fields>, java.io.Serializable, Cloneable, Comparable<groupByKey2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByKey2_args");

    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupByKey2_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupByKey2_argsTupleSchemeFactory();

    private long numPartitions; // required
    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM_PARTITIONS((short)1, "numPartitions"),
      SRC((short)2, "src");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          case 2: // SRC
            return SRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMPARTITIONS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByKey2_args.class, metaDataMap);
    }

    public groupByKey2_args() {
    }

    public groupByKey2_args(
      long numPartitions,
      org.ignis.rpc.ISource src)
    {
      this();
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      this.src = src;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupByKey2_args(groupByKey2_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numPartitions = other.numPartitions;
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
    }

    public groupByKey2_args deepCopy() {
      return new groupByKey2_args(this);
    }

    @Override
    public void clear() {
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
      this.src = null;
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public groupByKey2_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public groupByKey2_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM_PARTITIONS:
        return getNumPartitions();

      case SRC:
        return getSrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      case SRC:
        return isSetSrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof groupByKey2_args)
        return this.equals((groupByKey2_args)that);
      return false;
    }

    public boolean equals(groupByKey2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(groupByKey2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("groupByKey2_args(");
      boolean first = true;

      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      if (!first) sb.append(", ");
      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class groupByKey2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupByKey2_argsStandardScheme getScheme() {
        return new groupByKey2_argsStandardScheme();
      }
    }

    private static class groupByKey2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupByKey2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, groupByKey2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, groupByKey2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class groupByKey2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupByKey2_argsTupleScheme getScheme() {
        return new groupByKey2_argsTupleScheme();
      }
    }

    private static class groupByKey2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupByKey2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, groupByKey2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNumPartitions()) {
          optionals.set(0);
        }
        if (struct.isSetSrc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, groupByKey2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class groupByKey2_result implements org.apache.thrift.TBase<groupByKey2_result, groupByKey2_result._Fields>, java.io.Serializable, Cloneable, Comparable<groupByKey2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByKey2_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupByKey2_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupByKey2_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByKey2_result.class, metaDataMap);
    }

    public groupByKey2_result() {
    }

    public groupByKey2_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupByKey2_result(groupByKey2_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public groupByKey2_result deepCopy() {
      return new groupByKey2_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public groupByKey2_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof groupByKey2_result)
        return this.equals((groupByKey2_result)that);
      return false;
    }

    public boolean equals(groupByKey2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(groupByKey2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("groupByKey2_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class groupByKey2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupByKey2_resultStandardScheme getScheme() {
        return new groupByKey2_resultStandardScheme();
      }
    }

    private static class groupByKey2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupByKey2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, groupByKey2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, groupByKey2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class groupByKey2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public groupByKey2_resultTupleScheme getScheme() {
        return new groupByKey2_resultTupleScheme();
      }
    }

    private static class groupByKey2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupByKey2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, groupByKey2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, groupByKey2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reduceByKey_args implements org.apache.thrift.TBase<reduceByKey_args, reduceByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<reduceByKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduceByKey_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LOCAL_REDUCE_FIELD_DESC = new org.apache.thrift.protocol.TField("localReduce", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reduceByKey_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reduceByKey_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
    private long numPartitions; // required
    private boolean localReduce; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      NUM_PARTITIONS((short)2, "numPartitions"),
      LOCAL_REDUCE((short)3, "localReduce");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          case 3: // LOCAL_REDUCE
            return LOCAL_REDUCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMPARTITIONS_ISSET_ID = 0;
    private static final int __LOCALREDUCE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LOCAL_REDUCE, new org.apache.thrift.meta_data.FieldMetaData("localReduce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduceByKey_args.class, metaDataMap);
    }

    public reduceByKey_args() {
    }

    public reduceByKey_args(
      org.ignis.rpc.ISource src,
      long numPartitions,
      boolean localReduce)
    {
      this();
      this.src = src;
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      this.localReduce = localReduce;
      setLocalReduceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reduceByKey_args(reduceByKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
      this.numPartitions = other.numPartitions;
      this.localReduce = other.localReduce;
    }

    public reduceByKey_args deepCopy() {
      return new reduceByKey_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
      setLocalReduceIsSet(false);
      this.localReduce = false;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public reduceByKey_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public reduceByKey_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public boolean isLocalReduce() {
      return this.localReduce;
    }

    public reduceByKey_args setLocalReduce(boolean localReduce) {
      this.localReduce = localReduce;
      setLocalReduceIsSet(true);
      return this;
    }

    public void unsetLocalReduce() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCALREDUCE_ISSET_ID);
    }

    /** Returns true if field localReduce is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalReduce() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCALREDUCE_ISSET_ID);
    }

    public void setLocalReduceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCALREDUCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      case LOCAL_REDUCE:
        if (value == null) {
          unsetLocalReduce();
        } else {
          setLocalReduce((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case NUM_PARTITIONS:
        return getNumPartitions();

      case LOCAL_REDUCE:
        return isLocalReduce();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      case LOCAL_REDUCE:
        return isSetLocalReduce();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reduceByKey_args)
        return this.equals((reduceByKey_args)that);
      return false;
    }

    public boolean equals(reduceByKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      boolean this_present_localReduce = true;
      boolean that_present_localReduce = true;
      if (this_present_localReduce || that_present_localReduce) {
        if (!(this_present_localReduce && that_present_localReduce))
          return false;
        if (this.localReduce != that.localReduce)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      hashCode = hashCode * 8191 + ((localReduce) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(reduceByKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocalReduce()).compareTo(other.isSetLocalReduce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalReduce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localReduce, other.localReduce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reduceByKey_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      if (!first) sb.append(", ");
      sb.append("localReduce:");
      sb.append(this.localReduce);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reduceByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reduceByKey_argsStandardScheme getScheme() {
        return new reduceByKey_argsStandardScheme();
      }
    }

    private static class reduceByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reduceByKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reduceByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCAL_REDUCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.localReduce = iprot.readBool();
                struct.setLocalReduceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reduceByKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOCAL_REDUCE_FIELD_DESC);
        oprot.writeBool(struct.localReduce);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reduceByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reduceByKey_argsTupleScheme getScheme() {
        return new reduceByKey_argsTupleScheme();
      }
    }

    private static class reduceByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reduceByKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reduceByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetNumPartitions()) {
          optionals.set(1);
        }
        if (struct.isSetLocalReduce()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
        if (struct.isSetLocalReduce()) {
          oprot.writeBool(struct.localReduce);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reduceByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.localReduce = iprot.readBool();
          struct.setLocalReduceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reduceByKey_result implements org.apache.thrift.TBase<reduceByKey_result, reduceByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<reduceByKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduceByKey_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reduceByKey_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reduceByKey_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduceByKey_result.class, metaDataMap);
    }

    public reduceByKey_result() {
    }

    public reduceByKey_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reduceByKey_result(reduceByKey_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public reduceByKey_result deepCopy() {
      return new reduceByKey_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public reduceByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reduceByKey_result)
        return this.equals((reduceByKey_result)that);
      return false;
    }

    public boolean equals(reduceByKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reduceByKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reduceByKey_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reduceByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reduceByKey_resultStandardScheme getScheme() {
        return new reduceByKey_resultStandardScheme();
      }
    }

    private static class reduceByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reduceByKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reduceByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reduceByKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reduceByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reduceByKey_resultTupleScheme getScheme() {
        return new reduceByKey_resultTupleScheme();
      }
    }

    private static class reduceByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reduceByKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reduceByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reduceByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class aggregateByKey_args implements org.apache.thrift.TBase<aggregateByKey_args, aggregateByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<aggregateByKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregateByKey_args");

    private static final org.apache.thrift.protocol.TField ZERO_FIELD_DESC = new org.apache.thrift.protocol.TField("zero", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SEQ_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("seqOp", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new aggregateByKey_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new aggregateByKey_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero; // required
    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource seqOp; // required
    private long numPartitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZERO((short)1, "zero"),
      SEQ_OP((short)2, "seqOp"),
      NUM_PARTITIONS((short)3, "numPartitions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZERO
            return ZERO;
          case 2: // SEQ_OP
            return SEQ_OP;
          case 3: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMPARTITIONS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZERO, new org.apache.thrift.meta_data.FieldMetaData("zero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.SEQ_OP, new org.apache.thrift.meta_data.FieldMetaData("seqOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregateByKey_args.class, metaDataMap);
    }

    public aggregateByKey_args() {
    }

    public aggregateByKey_args(
      org.ignis.rpc.ISource zero,
      org.ignis.rpc.ISource seqOp,
      long numPartitions)
    {
      this();
      this.zero = zero;
      this.seqOp = seqOp;
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public aggregateByKey_args(aggregateByKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetZero()) {
        this.zero = new org.ignis.rpc.ISource(other.zero);
      }
      if (other.isSetSeqOp()) {
        this.seqOp = new org.ignis.rpc.ISource(other.seqOp);
      }
      this.numPartitions = other.numPartitions;
    }

    public aggregateByKey_args deepCopy() {
      return new aggregateByKey_args(this);
    }

    @Override
    public void clear() {
      this.zero = null;
      this.seqOp = null;
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getZero() {
      return this.zero;
    }

    public aggregateByKey_args setZero(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero) {
      this.zero = zero;
      return this;
    }

    public void unsetZero() {
      this.zero = null;
    }

    /** Returns true if field zero is set (has been assigned a value) and false otherwise */
    public boolean isSetZero() {
      return this.zero != null;
    }

    public void setZeroIsSet(boolean value) {
      if (!value) {
        this.zero = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSeqOp() {
      return this.seqOp;
    }

    public aggregateByKey_args setSeqOp(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource seqOp) {
      this.seqOp = seqOp;
      return this;
    }

    public void unsetSeqOp() {
      this.seqOp = null;
    }

    /** Returns true if field seqOp is set (has been assigned a value) and false otherwise */
    public boolean isSetSeqOp() {
      return this.seqOp != null;
    }

    public void setSeqOpIsSet(boolean value) {
      if (!value) {
        this.seqOp = null;
      }
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public aggregateByKey_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ZERO:
        if (value == null) {
          unsetZero();
        } else {
          setZero((org.ignis.rpc.ISource)value);
        }
        break;

      case SEQ_OP:
        if (value == null) {
          unsetSeqOp();
        } else {
          setSeqOp((org.ignis.rpc.ISource)value);
        }
        break;

      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ZERO:
        return getZero();

      case SEQ_OP:
        return getSeqOp();

      case NUM_PARTITIONS:
        return getNumPartitions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ZERO:
        return isSetZero();
      case SEQ_OP:
        return isSetSeqOp();
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof aggregateByKey_args)
        return this.equals((aggregateByKey_args)that);
      return false;
    }

    public boolean equals(aggregateByKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zero = true && this.isSetZero();
      boolean that_present_zero = true && that.isSetZero();
      if (this_present_zero || that_present_zero) {
        if (!(this_present_zero && that_present_zero))
          return false;
        if (!this.zero.equals(that.zero))
          return false;
      }

      boolean this_present_seqOp = true && this.isSetSeqOp();
      boolean that_present_seqOp = true && that.isSetSeqOp();
      if (this_present_seqOp || that_present_seqOp) {
        if (!(this_present_seqOp && that_present_seqOp))
          return false;
        if (!this.seqOp.equals(that.seqOp))
          return false;
      }

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZero()) ? 131071 : 524287);
      if (isSetZero())
        hashCode = hashCode * 8191 + zero.hashCode();

      hashCode = hashCode * 8191 + ((isSetSeqOp()) ? 131071 : 524287);
      if (isSetSeqOp())
        hashCode = hashCode * 8191 + seqOp.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      return hashCode;
    }

    @Override
    public int compareTo(aggregateByKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetZero()).compareTo(other.isSetZero());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZero()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zero, other.zero);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSeqOp()).compareTo(other.isSetSeqOp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeqOp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqOp, other.seqOp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("aggregateByKey_args(");
      boolean first = true;

      sb.append("zero:");
      if (this.zero == null) {
        sb.append("null");
      } else {
        sb.append(this.zero);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seqOp:");
      if (this.seqOp == null) {
        sb.append("null");
      } else {
        sb.append(this.seqOp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (zero != null) {
        zero.validate();
      }
      if (seqOp != null) {
        seqOp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class aggregateByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public aggregateByKey_argsStandardScheme getScheme() {
        return new aggregateByKey_argsStandardScheme();
      }
    }

    private static class aggregateByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<aggregateByKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, aggregateByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZERO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.zero = new org.ignis.rpc.ISource();
                struct.zero.read(iprot);
                struct.setZeroIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEQ_OP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seqOp = new org.ignis.rpc.ISource();
                struct.seqOp.read(iprot);
                struct.setSeqOpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, aggregateByKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zero != null) {
          oprot.writeFieldBegin(ZERO_FIELD_DESC);
          struct.zero.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.seqOp != null) {
          oprot.writeFieldBegin(SEQ_OP_FIELD_DESC);
          struct.seqOp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class aggregateByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public aggregateByKey_argsTupleScheme getScheme() {
        return new aggregateByKey_argsTupleScheme();
      }
    }

    private static class aggregateByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<aggregateByKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, aggregateByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetZero()) {
          optionals.set(0);
        }
        if (struct.isSetSeqOp()) {
          optionals.set(1);
        }
        if (struct.isSetNumPartitions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetZero()) {
          struct.zero.write(oprot);
        }
        if (struct.isSetSeqOp()) {
          struct.seqOp.write(oprot);
        }
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, aggregateByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.zero = new org.ignis.rpc.ISource();
          struct.zero.read(iprot);
          struct.setZeroIsSet(true);
        }
        if (incoming.get(1)) {
          struct.seqOp = new org.ignis.rpc.ISource();
          struct.seqOp.read(iprot);
          struct.setSeqOpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class aggregateByKey_result implements org.apache.thrift.TBase<aggregateByKey_result, aggregateByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<aggregateByKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregateByKey_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new aggregateByKey_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new aggregateByKey_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregateByKey_result.class, metaDataMap);
    }

    public aggregateByKey_result() {
    }

    public aggregateByKey_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public aggregateByKey_result(aggregateByKey_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public aggregateByKey_result deepCopy() {
      return new aggregateByKey_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public aggregateByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof aggregateByKey_result)
        return this.equals((aggregateByKey_result)that);
      return false;
    }

    public boolean equals(aggregateByKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(aggregateByKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("aggregateByKey_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class aggregateByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public aggregateByKey_resultStandardScheme getScheme() {
        return new aggregateByKey_resultStandardScheme();
      }
    }

    private static class aggregateByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<aggregateByKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, aggregateByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, aggregateByKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class aggregateByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public aggregateByKey_resultTupleScheme getScheme() {
        return new aggregateByKey_resultTupleScheme();
      }
    }

    private static class aggregateByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<aggregateByKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, aggregateByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, aggregateByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class aggregateByKey4_args implements org.apache.thrift.TBase<aggregateByKey4_args, aggregateByKey4_args._Fields>, java.io.Serializable, Cloneable, Comparable<aggregateByKey4_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregateByKey4_args");

    private static final org.apache.thrift.protocol.TField ZERO_FIELD_DESC = new org.apache.thrift.protocol.TField("zero", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SEQ_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("seqOp", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COMB_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("combOp", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new aggregateByKey4_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new aggregateByKey4_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero; // required
    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource seqOp; // required
    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource combOp; // required
    private long numPartitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZERO((short)1, "zero"),
      SEQ_OP((short)2, "seqOp"),
      COMB_OP((short)3, "combOp"),
      NUM_PARTITIONS((short)4, "numPartitions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZERO
            return ZERO;
          case 2: // SEQ_OP
            return SEQ_OP;
          case 3: // COMB_OP
            return COMB_OP;
          case 4: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMPARTITIONS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZERO, new org.apache.thrift.meta_data.FieldMetaData("zero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.SEQ_OP, new org.apache.thrift.meta_data.FieldMetaData("seqOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.COMB_OP, new org.apache.thrift.meta_data.FieldMetaData("combOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregateByKey4_args.class, metaDataMap);
    }

    public aggregateByKey4_args() {
    }

    public aggregateByKey4_args(
      org.ignis.rpc.ISource zero,
      org.ignis.rpc.ISource seqOp,
      org.ignis.rpc.ISource combOp,
      long numPartitions)
    {
      this();
      this.zero = zero;
      this.seqOp = seqOp;
      this.combOp = combOp;
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public aggregateByKey4_args(aggregateByKey4_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetZero()) {
        this.zero = new org.ignis.rpc.ISource(other.zero);
      }
      if (other.isSetSeqOp()) {
        this.seqOp = new org.ignis.rpc.ISource(other.seqOp);
      }
      if (other.isSetCombOp()) {
        this.combOp = new org.ignis.rpc.ISource(other.combOp);
      }
      this.numPartitions = other.numPartitions;
    }

    public aggregateByKey4_args deepCopy() {
      return new aggregateByKey4_args(this);
    }

    @Override
    public void clear() {
      this.zero = null;
      this.seqOp = null;
      this.combOp = null;
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getZero() {
      return this.zero;
    }

    public aggregateByKey4_args setZero(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero) {
      this.zero = zero;
      return this;
    }

    public void unsetZero() {
      this.zero = null;
    }

    /** Returns true if field zero is set (has been assigned a value) and false otherwise */
    public boolean isSetZero() {
      return this.zero != null;
    }

    public void setZeroIsSet(boolean value) {
      if (!value) {
        this.zero = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSeqOp() {
      return this.seqOp;
    }

    public aggregateByKey4_args setSeqOp(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource seqOp) {
      this.seqOp = seqOp;
      return this;
    }

    public void unsetSeqOp() {
      this.seqOp = null;
    }

    /** Returns true if field seqOp is set (has been assigned a value) and false otherwise */
    public boolean isSetSeqOp() {
      return this.seqOp != null;
    }

    public void setSeqOpIsSet(boolean value) {
      if (!value) {
        this.seqOp = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getCombOp() {
      return this.combOp;
    }

    public aggregateByKey4_args setCombOp(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource combOp) {
      this.combOp = combOp;
      return this;
    }

    public void unsetCombOp() {
      this.combOp = null;
    }

    /** Returns true if field combOp is set (has been assigned a value) and false otherwise */
    public boolean isSetCombOp() {
      return this.combOp != null;
    }

    public void setCombOpIsSet(boolean value) {
      if (!value) {
        this.combOp = null;
      }
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public aggregateByKey4_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ZERO:
        if (value == null) {
          unsetZero();
        } else {
          setZero((org.ignis.rpc.ISource)value);
        }
        break;

      case SEQ_OP:
        if (value == null) {
          unsetSeqOp();
        } else {
          setSeqOp((org.ignis.rpc.ISource)value);
        }
        break;

      case COMB_OP:
        if (value == null) {
          unsetCombOp();
        } else {
          setCombOp((org.ignis.rpc.ISource)value);
        }
        break;

      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ZERO:
        return getZero();

      case SEQ_OP:
        return getSeqOp();

      case COMB_OP:
        return getCombOp();

      case NUM_PARTITIONS:
        return getNumPartitions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ZERO:
        return isSetZero();
      case SEQ_OP:
        return isSetSeqOp();
      case COMB_OP:
        return isSetCombOp();
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof aggregateByKey4_args)
        return this.equals((aggregateByKey4_args)that);
      return false;
    }

    public boolean equals(aggregateByKey4_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zero = true && this.isSetZero();
      boolean that_present_zero = true && that.isSetZero();
      if (this_present_zero || that_present_zero) {
        if (!(this_present_zero && that_present_zero))
          return false;
        if (!this.zero.equals(that.zero))
          return false;
      }

      boolean this_present_seqOp = true && this.isSetSeqOp();
      boolean that_present_seqOp = true && that.isSetSeqOp();
      if (this_present_seqOp || that_present_seqOp) {
        if (!(this_present_seqOp && that_present_seqOp))
          return false;
        if (!this.seqOp.equals(that.seqOp))
          return false;
      }

      boolean this_present_combOp = true && this.isSetCombOp();
      boolean that_present_combOp = true && that.isSetCombOp();
      if (this_present_combOp || that_present_combOp) {
        if (!(this_present_combOp && that_present_combOp))
          return false;
        if (!this.combOp.equals(that.combOp))
          return false;
      }

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZero()) ? 131071 : 524287);
      if (isSetZero())
        hashCode = hashCode * 8191 + zero.hashCode();

      hashCode = hashCode * 8191 + ((isSetSeqOp()) ? 131071 : 524287);
      if (isSetSeqOp())
        hashCode = hashCode * 8191 + seqOp.hashCode();

      hashCode = hashCode * 8191 + ((isSetCombOp()) ? 131071 : 524287);
      if (isSetCombOp())
        hashCode = hashCode * 8191 + combOp.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      return hashCode;
    }

    @Override
    public int compareTo(aggregateByKey4_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetZero()).compareTo(other.isSetZero());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZero()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zero, other.zero);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSeqOp()).compareTo(other.isSetSeqOp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeqOp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqOp, other.seqOp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCombOp()).compareTo(other.isSetCombOp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCombOp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combOp, other.combOp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("aggregateByKey4_args(");
      boolean first = true;

      sb.append("zero:");
      if (this.zero == null) {
        sb.append("null");
      } else {
        sb.append(this.zero);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seqOp:");
      if (this.seqOp == null) {
        sb.append("null");
      } else {
        sb.append(this.seqOp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("combOp:");
      if (this.combOp == null) {
        sb.append("null");
      } else {
        sb.append(this.combOp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (zero != null) {
        zero.validate();
      }
      if (seqOp != null) {
        seqOp.validate();
      }
      if (combOp != null) {
        combOp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class aggregateByKey4_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public aggregateByKey4_argsStandardScheme getScheme() {
        return new aggregateByKey4_argsStandardScheme();
      }
    }

    private static class aggregateByKey4_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<aggregateByKey4_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, aggregateByKey4_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZERO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.zero = new org.ignis.rpc.ISource();
                struct.zero.read(iprot);
                struct.setZeroIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEQ_OP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seqOp = new org.ignis.rpc.ISource();
                struct.seqOp.read(iprot);
                struct.setSeqOpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMB_OP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.combOp = new org.ignis.rpc.ISource();
                struct.combOp.read(iprot);
                struct.setCombOpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, aggregateByKey4_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zero != null) {
          oprot.writeFieldBegin(ZERO_FIELD_DESC);
          struct.zero.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.seqOp != null) {
          oprot.writeFieldBegin(SEQ_OP_FIELD_DESC);
          struct.seqOp.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.combOp != null) {
          oprot.writeFieldBegin(COMB_OP_FIELD_DESC);
          struct.combOp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class aggregateByKey4_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public aggregateByKey4_argsTupleScheme getScheme() {
        return new aggregateByKey4_argsTupleScheme();
      }
    }

    private static class aggregateByKey4_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<aggregateByKey4_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, aggregateByKey4_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetZero()) {
          optionals.set(0);
        }
        if (struct.isSetSeqOp()) {
          optionals.set(1);
        }
        if (struct.isSetCombOp()) {
          optionals.set(2);
        }
        if (struct.isSetNumPartitions()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetZero()) {
          struct.zero.write(oprot);
        }
        if (struct.isSetSeqOp()) {
          struct.seqOp.write(oprot);
        }
        if (struct.isSetCombOp()) {
          struct.combOp.write(oprot);
        }
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, aggregateByKey4_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.zero = new org.ignis.rpc.ISource();
          struct.zero.read(iprot);
          struct.setZeroIsSet(true);
        }
        if (incoming.get(1)) {
          struct.seqOp = new org.ignis.rpc.ISource();
          struct.seqOp.read(iprot);
          struct.setSeqOpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.combOp = new org.ignis.rpc.ISource();
          struct.combOp.read(iprot);
          struct.setCombOpIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class aggregateByKey4_result implements org.apache.thrift.TBase<aggregateByKey4_result, aggregateByKey4_result._Fields>, java.io.Serializable, Cloneable, Comparable<aggregateByKey4_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregateByKey4_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new aggregateByKey4_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new aggregateByKey4_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregateByKey4_result.class, metaDataMap);
    }

    public aggregateByKey4_result() {
    }

    public aggregateByKey4_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public aggregateByKey4_result(aggregateByKey4_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public aggregateByKey4_result deepCopy() {
      return new aggregateByKey4_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public aggregateByKey4_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof aggregateByKey4_result)
        return this.equals((aggregateByKey4_result)that);
      return false;
    }

    public boolean equals(aggregateByKey4_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(aggregateByKey4_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("aggregateByKey4_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class aggregateByKey4_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public aggregateByKey4_resultStandardScheme getScheme() {
        return new aggregateByKey4_resultStandardScheme();
      }
    }

    private static class aggregateByKey4_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<aggregateByKey4_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, aggregateByKey4_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, aggregateByKey4_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class aggregateByKey4_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public aggregateByKey4_resultTupleScheme getScheme() {
        return new aggregateByKey4_resultTupleScheme();
      }
    }

    private static class aggregateByKey4_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<aggregateByKey4_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, aggregateByKey4_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, aggregateByKey4_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class foldByKey_args implements org.apache.thrift.TBase<foldByKey_args, foldByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<foldByKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("foldByKey_args");

    private static final org.apache.thrift.protocol.TField ZERO_FIELD_DESC = new org.apache.thrift.protocol.TField("zero", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField LOCAL_FOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("localFold", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new foldByKey_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new foldByKey_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero; // required
    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
    private long numPartitions; // required
    private boolean localFold; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZERO((short)1, "zero"),
      SRC((short)2, "src"),
      NUM_PARTITIONS((short)3, "numPartitions"),
      LOCAL_FOLD((short)4, "localFold");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZERO
            return ZERO;
          case 2: // SRC
            return SRC;
          case 3: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          case 4: // LOCAL_FOLD
            return LOCAL_FOLD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMPARTITIONS_ISSET_ID = 0;
    private static final int __LOCALFOLD_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZERO, new org.apache.thrift.meta_data.FieldMetaData("zero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LOCAL_FOLD, new org.apache.thrift.meta_data.FieldMetaData("localFold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(foldByKey_args.class, metaDataMap);
    }

    public foldByKey_args() {
    }

    public foldByKey_args(
      org.ignis.rpc.ISource zero,
      org.ignis.rpc.ISource src,
      long numPartitions,
      boolean localFold)
    {
      this();
      this.zero = zero;
      this.src = src;
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      this.localFold = localFold;
      setLocalFoldIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public foldByKey_args(foldByKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetZero()) {
        this.zero = new org.ignis.rpc.ISource(other.zero);
      }
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
      this.numPartitions = other.numPartitions;
      this.localFold = other.localFold;
    }

    public foldByKey_args deepCopy() {
      return new foldByKey_args(this);
    }

    @Override
    public void clear() {
      this.zero = null;
      this.src = null;
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
      setLocalFoldIsSet(false);
      this.localFold = false;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getZero() {
      return this.zero;
    }

    public foldByKey_args setZero(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero) {
      this.zero = zero;
      return this;
    }

    public void unsetZero() {
      this.zero = null;
    }

    /** Returns true if field zero is set (has been assigned a value) and false otherwise */
    public boolean isSetZero() {
      return this.zero != null;
    }

    public void setZeroIsSet(boolean value) {
      if (!value) {
        this.zero = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public foldByKey_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public foldByKey_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public boolean isLocalFold() {
      return this.localFold;
    }

    public foldByKey_args setLocalFold(boolean localFold) {
      this.localFold = localFold;
      setLocalFoldIsSet(true);
      return this;
    }

    public void unsetLocalFold() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCALFOLD_ISSET_ID);
    }

    /** Returns true if field localFold is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalFold() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCALFOLD_ISSET_ID);
    }

    public void setLocalFoldIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCALFOLD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ZERO:
        if (value == null) {
          unsetZero();
        } else {
          setZero((org.ignis.rpc.ISource)value);
        }
        break;

      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      case LOCAL_FOLD:
        if (value == null) {
          unsetLocalFold();
        } else {
          setLocalFold((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ZERO:
        return getZero();

      case SRC:
        return getSrc();

      case NUM_PARTITIONS:
        return getNumPartitions();

      case LOCAL_FOLD:
        return isLocalFold();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ZERO:
        return isSetZero();
      case SRC:
        return isSetSrc();
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      case LOCAL_FOLD:
        return isSetLocalFold();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof foldByKey_args)
        return this.equals((foldByKey_args)that);
      return false;
    }

    public boolean equals(foldByKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zero = true && this.isSetZero();
      boolean that_present_zero = true && that.isSetZero();
      if (this_present_zero || that_present_zero) {
        if (!(this_present_zero && that_present_zero))
          return false;
        if (!this.zero.equals(that.zero))
          return false;
      }

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      boolean this_present_localFold = true;
      boolean that_present_localFold = true;
      if (this_present_localFold || that_present_localFold) {
        if (!(this_present_localFold && that_present_localFold))
          return false;
        if (this.localFold != that.localFold)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZero()) ? 131071 : 524287);
      if (isSetZero())
        hashCode = hashCode * 8191 + zero.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      hashCode = hashCode * 8191 + ((localFold) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(foldByKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetZero()).compareTo(other.isSetZero());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZero()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zero, other.zero);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocalFold()).compareTo(other.isSetLocalFold());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalFold()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localFold, other.localFold);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("foldByKey_args(");
      boolean first = true;

      sb.append("zero:");
      if (this.zero == null) {
        sb.append("null");
      } else {
        sb.append(this.zero);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      if (!first) sb.append(", ");
      sb.append("localFold:");
      sb.append(this.localFold);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (zero != null) {
        zero.validate();
      }
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class foldByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public foldByKey_argsStandardScheme getScheme() {
        return new foldByKey_argsStandardScheme();
      }
    }

    private static class foldByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<foldByKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, foldByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZERO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.zero = new org.ignis.rpc.ISource();
                struct.zero.read(iprot);
                struct.setZeroIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOCAL_FOLD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.localFold = iprot.readBool();
                struct.setLocalFoldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, foldByKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zero != null) {
          oprot.writeFieldBegin(ZERO_FIELD_DESC);
          struct.zero.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOCAL_FOLD_FIELD_DESC);
        oprot.writeBool(struct.localFold);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class foldByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public foldByKey_argsTupleScheme getScheme() {
        return new foldByKey_argsTupleScheme();
      }
    }

    private static class foldByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<foldByKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, foldByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetZero()) {
          optionals.set(0);
        }
        if (struct.isSetSrc()) {
          optionals.set(1);
        }
        if (struct.isSetNumPartitions()) {
          optionals.set(2);
        }
        if (struct.isSetLocalFold()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetZero()) {
          struct.zero.write(oprot);
        }
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
        if (struct.isSetLocalFold()) {
          oprot.writeBool(struct.localFold);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, foldByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.zero = new org.ignis.rpc.ISource();
          struct.zero.read(iprot);
          struct.setZeroIsSet(true);
        }
        if (incoming.get(1)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.localFold = iprot.readBool();
          struct.setLocalFoldIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class foldByKey_result implements org.apache.thrift.TBase<foldByKey_result, foldByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<foldByKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("foldByKey_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new foldByKey_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new foldByKey_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(foldByKey_result.class, metaDataMap);
    }

    public foldByKey_result() {
    }

    public foldByKey_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public foldByKey_result(foldByKey_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public foldByKey_result deepCopy() {
      return new foldByKey_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public foldByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof foldByKey_result)
        return this.equals((foldByKey_result)that);
      return false;
    }

    public boolean equals(foldByKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(foldByKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("foldByKey_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class foldByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public foldByKey_resultStandardScheme getScheme() {
        return new foldByKey_resultStandardScheme();
      }
    }

    private static class foldByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<foldByKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, foldByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, foldByKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class foldByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public foldByKey_resultTupleScheme getScheme() {
        return new foldByKey_resultTupleScheme();
      }
    }

    private static class foldByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<foldByKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, foldByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, foldByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortByKey_args implements org.apache.thrift.TBase<sortByKey_args, sortByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey_args");

    private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey_argsTupleSchemeFactory();

    private boolean ascending; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASCENDING((short)1, "ascending");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASCENDING
            return ASCENDING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASCENDING_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey_args.class, metaDataMap);
    }

    public sortByKey_args() {
    }

    public sortByKey_args(
      boolean ascending)
    {
      this();
      this.ascending = ascending;
      setAscendingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortByKey_args(sortByKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ascending = other.ascending;
    }

    public sortByKey_args deepCopy() {
      return new sortByKey_args(this);
    }

    @Override
    public void clear() {
      setAscendingIsSet(false);
      this.ascending = false;
    }

    public boolean isAscending() {
      return this.ascending;
    }

    public sortByKey_args setAscending(boolean ascending) {
      this.ascending = ascending;
      setAscendingIsSet(true);
      return this;
    }

    public void unsetAscending() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
    public boolean isSetAscending() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    public void setAscendingIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ASCENDING:
        if (value == null) {
          unsetAscending();
        } else {
          setAscending((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ASCENDING:
        return isAscending();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ASCENDING:
        return isSetAscending();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortByKey_args)
        return this.equals((sortByKey_args)that);
      return false;
    }

    public boolean equals(sortByKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ascending = true;
      boolean that_present_ascending = true;
      if (this_present_ascending || that_present_ascending) {
        if (!(this_present_ascending && that_present_ascending))
          return false;
        if (this.ascending != that.ascending)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(sortByKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAscending()).compareTo(other.isSetAscending());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAscending()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey_args(");
      boolean first = true;

      sb.append("ascending:");
      sb.append(this.ascending);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey_argsStandardScheme getScheme() {
        return new sortByKey_argsStandardScheme();
      }
    }

    private static class sortByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASCENDING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.ascending = iprot.readBool();
                struct.setAscendingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
        oprot.writeBool(struct.ascending);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey_argsTupleScheme getScheme() {
        return new sortByKey_argsTupleScheme();
      }
    }

    private static class sortByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAscending()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAscending()) {
          oprot.writeBool(struct.ascending);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ascending = iprot.readBool();
          struct.setAscendingIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortByKey_result implements org.apache.thrift.TBase<sortByKey_result, sortByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey_result.class, metaDataMap);
    }

    public sortByKey_result() {
    }

    public sortByKey_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortByKey_result(sortByKey_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public sortByKey_result deepCopy() {
      return new sortByKey_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public sortByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortByKey_result)
        return this.equals((sortByKey_result)that);
      return false;
    }

    public boolean equals(sortByKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sortByKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey_resultStandardScheme getScheme() {
        return new sortByKey_resultStandardScheme();
      }
    }

    private static class sortByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey_resultTupleScheme getScheme() {
        return new sortByKey_resultTupleScheme();
      }
    }

    private static class sortByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortByKey2a_args implements org.apache.thrift.TBase<sortByKey2a_args, sortByKey2a_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey2a_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey2a_args");

    private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey2a_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey2a_argsTupleSchemeFactory();

    private boolean ascending; // required
    private long numPartitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASCENDING((short)1, "ascending"),
      NUM_PARTITIONS((short)2, "numPartitions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASCENDING
            return ASCENDING;
          case 2: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASCENDING_ISSET_ID = 0;
    private static final int __NUMPARTITIONS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey2a_args.class, metaDataMap);
    }

    public sortByKey2a_args() {
    }

    public sortByKey2a_args(
      boolean ascending,
      long numPartitions)
    {
      this();
      this.ascending = ascending;
      setAscendingIsSet(true);
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortByKey2a_args(sortByKey2a_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ascending = other.ascending;
      this.numPartitions = other.numPartitions;
    }

    public sortByKey2a_args deepCopy() {
      return new sortByKey2a_args(this);
    }

    @Override
    public void clear() {
      setAscendingIsSet(false);
      this.ascending = false;
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
    }

    public boolean isAscending() {
      return this.ascending;
    }

    public sortByKey2a_args setAscending(boolean ascending) {
      this.ascending = ascending;
      setAscendingIsSet(true);
      return this;
    }

    public void unsetAscending() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
    public boolean isSetAscending() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    public void setAscendingIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public sortByKey2a_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ASCENDING:
        if (value == null) {
          unsetAscending();
        } else {
          setAscending((java.lang.Boolean)value);
        }
        break;

      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ASCENDING:
        return isAscending();

      case NUM_PARTITIONS:
        return getNumPartitions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ASCENDING:
        return isSetAscending();
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortByKey2a_args)
        return this.equals((sortByKey2a_args)that);
      return false;
    }

    public boolean equals(sortByKey2a_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ascending = true;
      boolean that_present_ascending = true;
      if (this_present_ascending || that_present_ascending) {
        if (!(this_present_ascending && that_present_ascending))
          return false;
        if (this.ascending != that.ascending)
          return false;
      }

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      return hashCode;
    }

    @Override
    public int compareTo(sortByKey2a_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAscending()).compareTo(other.isSetAscending());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAscending()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey2a_args(");
      boolean first = true;

      sb.append("ascending:");
      sb.append(this.ascending);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortByKey2a_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey2a_argsStandardScheme getScheme() {
        return new sortByKey2a_argsStandardScheme();
      }
    }

    private static class sortByKey2a_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey2a_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey2a_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASCENDING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.ascending = iprot.readBool();
                struct.setAscendingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey2a_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
        oprot.writeBool(struct.ascending);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortByKey2a_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey2a_argsTupleScheme getScheme() {
        return new sortByKey2a_argsTupleScheme();
      }
    }

    private static class sortByKey2a_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey2a_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey2a_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAscending()) {
          optionals.set(0);
        }
        if (struct.isSetNumPartitions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAscending()) {
          oprot.writeBool(struct.ascending);
        }
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey2a_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ascending = iprot.readBool();
          struct.setAscendingIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortByKey2a_result implements org.apache.thrift.TBase<sortByKey2a_result, sortByKey2a_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey2a_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey2a_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey2a_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey2a_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey2a_result.class, metaDataMap);
    }

    public sortByKey2a_result() {
    }

    public sortByKey2a_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortByKey2a_result(sortByKey2a_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public sortByKey2a_result deepCopy() {
      return new sortByKey2a_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public sortByKey2a_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortByKey2a_result)
        return this.equals((sortByKey2a_result)that);
      return false;
    }

    public boolean equals(sortByKey2a_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sortByKey2a_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey2a_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortByKey2a_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey2a_resultStandardScheme getScheme() {
        return new sortByKey2a_resultStandardScheme();
      }
    }

    private static class sortByKey2a_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey2a_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey2a_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey2a_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortByKey2a_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey2a_resultTupleScheme getScheme() {
        return new sortByKey2a_resultTupleScheme();
      }
    }

    private static class sortByKey2a_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey2a_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey2a_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey2a_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortByKey2b_args implements org.apache.thrift.TBase<sortByKey2b_args, sortByKey2b_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey2b_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey2b_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey2b_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey2b_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
    private boolean ascending; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      ASCENDING((short)2, "ascending");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // ASCENDING
            return ASCENDING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASCENDING_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey2b_args.class, metaDataMap);
    }

    public sortByKey2b_args() {
    }

    public sortByKey2b_args(
      org.ignis.rpc.ISource src,
      boolean ascending)
    {
      this();
      this.src = src;
      this.ascending = ascending;
      setAscendingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortByKey2b_args(sortByKey2b_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
      this.ascending = other.ascending;
    }

    public sortByKey2b_args deepCopy() {
      return new sortByKey2b_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setAscendingIsSet(false);
      this.ascending = false;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public sortByKey2b_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public boolean isAscending() {
      return this.ascending;
    }

    public sortByKey2b_args setAscending(boolean ascending) {
      this.ascending = ascending;
      setAscendingIsSet(true);
      return this;
    }

    public void unsetAscending() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
    public boolean isSetAscending() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    public void setAscendingIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      case ASCENDING:
        if (value == null) {
          unsetAscending();
        } else {
          setAscending((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case ASCENDING:
        return isAscending();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case ASCENDING:
        return isSetAscending();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortByKey2b_args)
        return this.equals((sortByKey2b_args)that);
      return false;
    }

    public boolean equals(sortByKey2b_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_ascending = true;
      boolean that_present_ascending = true;
      if (this_present_ascending || that_present_ascending) {
        if (!(this_present_ascending && that_present_ascending))
          return false;
        if (this.ascending != that.ascending)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(sortByKey2b_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAscending()).compareTo(other.isSetAscending());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAscending()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey2b_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ascending:");
      sb.append(this.ascending);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortByKey2b_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey2b_argsStandardScheme getScheme() {
        return new sortByKey2b_argsStandardScheme();
      }
    }

    private static class sortByKey2b_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey2b_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey2b_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASCENDING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.ascending = iprot.readBool();
                struct.setAscendingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey2b_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
        oprot.writeBool(struct.ascending);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortByKey2b_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey2b_argsTupleScheme getScheme() {
        return new sortByKey2b_argsTupleScheme();
      }
    }

    private static class sortByKey2b_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey2b_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey2b_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetAscending()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
        if (struct.isSetAscending()) {
          oprot.writeBool(struct.ascending);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey2b_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ascending = iprot.readBool();
          struct.setAscendingIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortByKey2b_result implements org.apache.thrift.TBase<sortByKey2b_result, sortByKey2b_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey2b_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey2b_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey2b_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey2b_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey2b_result.class, metaDataMap);
    }

    public sortByKey2b_result() {
    }

    public sortByKey2b_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortByKey2b_result(sortByKey2b_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public sortByKey2b_result deepCopy() {
      return new sortByKey2b_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public sortByKey2b_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortByKey2b_result)
        return this.equals((sortByKey2b_result)that);
      return false;
    }

    public boolean equals(sortByKey2b_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sortByKey2b_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey2b_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortByKey2b_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey2b_resultStandardScheme getScheme() {
        return new sortByKey2b_resultStandardScheme();
      }
    }

    private static class sortByKey2b_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey2b_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey2b_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey2b_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortByKey2b_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey2b_resultTupleScheme getScheme() {
        return new sortByKey2b_resultTupleScheme();
      }
    }

    private static class sortByKey2b_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey2b_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey2b_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey2b_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortByKey3_args implements org.apache.thrift.TBase<sortByKey3_args, sortByKey3_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey3_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey3_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey3_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey3_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
    private boolean ascending; // required
    private long numPartitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      ASCENDING((short)2, "ascending"),
      NUM_PARTITIONS((short)3, "numPartitions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // ASCENDING
            return ASCENDING;
          case 3: // NUM_PARTITIONS
            return NUM_PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASCENDING_ISSET_ID = 0;
    private static final int __NUMPARTITIONS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
      tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey3_args.class, metaDataMap);
    }

    public sortByKey3_args() {
    }

    public sortByKey3_args(
      org.ignis.rpc.ISource src,
      boolean ascending,
      long numPartitions)
    {
      this();
      this.src = src;
      this.ascending = ascending;
      setAscendingIsSet(true);
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortByKey3_args(sortByKey3_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = new org.ignis.rpc.ISource(other.src);
      }
      this.ascending = other.ascending;
      this.numPartitions = other.numPartitions;
    }

    public sortByKey3_args deepCopy() {
      return new sortByKey3_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setAscendingIsSet(false);
      this.ascending = false;
      setNumPartitionsIsSet(false);
      this.numPartitions = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.ISource getSrc() {
      return this.src;
    }

    public sortByKey3_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public boolean isAscending() {
      return this.ascending;
    }

    public sortByKey3_args setAscending(boolean ascending) {
      this.ascending = ascending;
      setAscendingIsSet(true);
      return this;
    }

    public void unsetAscending() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
    public boolean isSetAscending() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
    }

    public void setAscendingIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
    }

    public long getNumPartitions() {
      return this.numPartitions;
    }

    public sortByKey3_args setNumPartitions(long numPartitions) {
      this.numPartitions = numPartitions;
      setNumPartitionsIsSet(true);
      return this;
    }

    public void unsetNumPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
    }

    public void setNumPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((org.ignis.rpc.ISource)value);
        }
        break;

      case ASCENDING:
        if (value == null) {
          unsetAscending();
        } else {
          setAscending((java.lang.Boolean)value);
        }
        break;

      case NUM_PARTITIONS:
        if (value == null) {
          unsetNumPartitions();
        } else {
          setNumPartitions((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case ASCENDING:
        return isAscending();

      case NUM_PARTITIONS:
        return getNumPartitions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case ASCENDING:
        return isSetAscending();
      case NUM_PARTITIONS:
        return isSetNumPartitions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortByKey3_args)
        return this.equals((sortByKey3_args)that);
      return false;
    }

    public boolean equals(sortByKey3_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_ascending = true;
      boolean that_present_ascending = true;
      if (this_present_ascending || that_present_ascending) {
        if (!(this_present_ascending && that_present_ascending))
          return false;
        if (this.ascending != that.ascending)
          return false;
      }

      boolean this_present_numPartitions = true;
      boolean that_present_numPartitions = true;
      if (this_present_numPartitions || that_present_numPartitions) {
        if (!(this_present_numPartitions && that_present_numPartitions))
          return false;
        if (this.numPartitions != that.numPartitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
      if (isSetSrc())
        hashCode = hashCode * 8191 + src.hashCode();

      hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

      return hashCode;
    }

    @Override
    public int compareTo(sortByKey3_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAscending()).compareTo(other.isSetAscending());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAscending()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumPartitions()).compareTo(other.isSetNumPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey3_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ascending:");
      sb.append(this.ascending);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPartitions:");
      sb.append(this.numPartitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (src != null) {
        src.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortByKey3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey3_argsStandardScheme getScheme() {
        return new sortByKey3_argsStandardScheme();
      }
    }

    private static class sortByKey3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey3_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.src = new org.ignis.rpc.ISource();
                struct.src.read(iprot);
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASCENDING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.ascending = iprot.readBool();
                struct.setAscendingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPartitions = iprot.readI64();
                struct.setNumPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey3_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
        oprot.writeBool(struct.ascending);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
        oprot.writeI64(struct.numPartitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortByKey3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey3_argsTupleScheme getScheme() {
        return new sortByKey3_argsTupleScheme();
      }
    }

    private static class sortByKey3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey3_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetAscending()) {
          optionals.set(1);
        }
        if (struct.isSetNumPartitions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSrc()) {
          struct.src.write(oprot);
        }
        if (struct.isSetAscending()) {
          oprot.writeBool(struct.ascending);
        }
        if (struct.isSetNumPartitions()) {
          oprot.writeI64(struct.numPartitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.src = new org.ignis.rpc.ISource();
          struct.src.read(iprot);
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ascending = iprot.readBool();
          struct.setAscendingIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numPartitions = iprot.readI64();
          struct.setNumPartitionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sortByKey3_result implements org.apache.thrift.TBase<sortByKey3_result, sortByKey3_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey3_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey3_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey3_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey3_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey3_result.class, metaDataMap);
    }

    public sortByKey3_result() {
    }

    public sortByKey3_result(
      org.ignis.rpc.IExecutorException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sortByKey3_result(sortByKey3_result other) {
      if (other.isSetEx()) {
        this.ex = new org.ignis.rpc.IExecutorException(other.ex);
      }
    }

    public sortByKey3_result deepCopy() {
      return new sortByKey3_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.ignis.rpc.IExecutorException getEx() {
      return this.ex;
    }

    public sortByKey3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.ignis.rpc.IExecutorException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sortByKey3_result)
        return this.equals((sortByKey3_result)that);
      return false;
    }

    public boolean equals(sortByKey3_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sortByKey3_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey3_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sortByKey3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey3_resultStandardScheme getScheme() {
        return new sortByKey3_resultStandardScheme();
      }
    }

    private static class sortByKey3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey3_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.ignis.rpc.IExecutorException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey3_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sortByKey3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sortByKey3_resultTupleScheme getScheme() {
        return new sortByKey3_resultTupleScheme();
      }
    }

    private static class sortByKey3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey3_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new org.ignis.rpc.IExecutorException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
