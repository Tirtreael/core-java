/**
 * Autogenerated by Thrift Compiler (0.15.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.ignis.rpc.executor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IGeneralModule {

    public interface Iface {

        public void executeTo(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void map_(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void filter(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void flatmap(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void keyBy(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void mapWithIndex(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void mapPartitions(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void mapPartitionsWithIndex(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void mapExecutor(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void mapExecutorTo(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void groupBy(org.ignis.rpc.ISource src, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void sort(boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void sort2(boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void sortBy(org.ignis.rpc.ISource src, boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void union_(java.lang.String other, boolean preserveOrder) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void union2(java.lang.String other, boolean preserveOrder, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void join(java.lang.String other, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void join3(java.lang.String other, long numPartitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void distinct(long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void distinct2(long numPartitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void repartition(long numPartitions, boolean preserveOrdering, boolean global_) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void partitionByRandom(long numPartitions, int seed) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void partitionByHash(long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void partitionBy(org.ignis.rpc.ISource src, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void flatMapValues(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void mapValues(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void groupByKey(long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void groupByKey2(long numPartitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void sortByKey(boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void sortByKey2a(boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void sortByKey2b(org.ignis.rpc.ISource src, boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void executeTo(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void map_(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void filter(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void flatmap(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void keyBy(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void mapWithIndex(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void mapPartitions(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void mapPartitionsWithIndex(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void mapExecutor(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void mapExecutorTo(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void groupBy(org.ignis.rpc.ISource src, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void sort(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void sort2(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void sortBy(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void union_(java.lang.String other, boolean preserveOrder, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void union2(java.lang.String other, boolean preserveOrder, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void join(java.lang.String other, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void join3(java.lang.String other, long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void distinct(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void distinct2(long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void repartition(long numPartitions, boolean preserveOrdering, boolean global_, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void partitionByRandom(long numPartitions, int seed, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void partitionByHash(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void partitionBy(org.ignis.rpc.ISource src, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void flatMapValues(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void mapValues(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void groupByKey(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void groupByKey2(long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void sortByKey(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void sortByKey2a(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void sortByKey2b(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void executeTo(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_executeTo(src);
            recv_executeTo();
        }

        public void send_executeTo(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            executeTo_args args = new executeTo_args();
            args.setSrc(src);
            sendBase("executeTo", args);
        }

        public void recv_executeTo() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            executeTo_result result = new executeTo_result();
            receiveBase(result, "executeTo");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void map_(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_map_(src);
            recv_map_();
        }

        public void send_map_(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            map__args args = new map__args();
            args.setSrc(src);
            sendBase("map_", args);
        }

        public void recv_map_() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            map__result result = new map__result();
            receiveBase(result, "map_");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void filter(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_filter(src);
            recv_filter();
        }

        public void send_filter(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            filter_args args = new filter_args();
            args.setSrc(src);
            sendBase("filter", args);
        }

        public void recv_filter() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            filter_result result = new filter_result();
            receiveBase(result, "filter");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void flatmap(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_flatmap(src);
            recv_flatmap();
        }

        public void send_flatmap(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            flatmap_args args = new flatmap_args();
            args.setSrc(src);
            sendBase("flatmap", args);
        }

        public void recv_flatmap() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            flatmap_result result = new flatmap_result();
            receiveBase(result, "flatmap");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void keyBy(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_keyBy(src);
            recv_keyBy();
        }

        public void send_keyBy(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            keyBy_args args = new keyBy_args();
            args.setSrc(src);
            sendBase("keyBy", args);
        }

        public void recv_keyBy() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            keyBy_result result = new keyBy_result();
            receiveBase(result, "keyBy");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void mapWithIndex(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_mapWithIndex(src);
            recv_mapWithIndex();
        }

        public void send_mapWithIndex(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            mapWithIndex_args args = new mapWithIndex_args();
            args.setSrc(src);
            sendBase("mapWithIndex", args);
        }

        public void recv_mapWithIndex() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            mapWithIndex_result result = new mapWithIndex_result();
            receiveBase(result, "mapWithIndex");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void mapPartitions(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_mapPartitions(src);
            recv_mapPartitions();
        }

        public void send_mapPartitions(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            mapPartitions_args args = new mapPartitions_args();
            args.setSrc(src);
            sendBase("mapPartitions", args);
        }

        public void recv_mapPartitions() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            mapPartitions_result result = new mapPartitions_result();
            receiveBase(result, "mapPartitions");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void mapPartitionsWithIndex(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_mapPartitionsWithIndex(src);
            recv_mapPartitionsWithIndex();
        }

        public void send_mapPartitionsWithIndex(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            mapPartitionsWithIndex_args args = new mapPartitionsWithIndex_args();
            args.setSrc(src);
            sendBase("mapPartitionsWithIndex", args);
        }

        public void recv_mapPartitionsWithIndex() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            mapPartitionsWithIndex_result result = new mapPartitionsWithIndex_result();
            receiveBase(result, "mapPartitionsWithIndex");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void mapExecutor(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_mapExecutor(src);
            recv_mapExecutor();
        }

        public void send_mapExecutor(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            mapExecutor_args args = new mapExecutor_args();
            args.setSrc(src);
            sendBase("mapExecutor", args);
        }

        public void recv_mapExecutor() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            mapExecutor_result result = new mapExecutor_result();
            receiveBase(result, "mapExecutor");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void mapExecutorTo(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_mapExecutorTo(src);
            recv_mapExecutorTo();
        }

        public void send_mapExecutorTo(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            mapExecutorTo_args args = new mapExecutorTo_args();
            args.setSrc(src);
            sendBase("mapExecutorTo", args);
        }

        public void recv_mapExecutorTo() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            mapExecutorTo_result result = new mapExecutorTo_result();
            receiveBase(result, "mapExecutorTo");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void groupBy(org.ignis.rpc.ISource src, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_groupBy(src, numPartitions);
            recv_groupBy();
        }

        public void send_groupBy(org.ignis.rpc.ISource src, long numPartitions) throws org.apache.thrift.TException {
            groupBy_args args = new groupBy_args();
            args.setSrc(src);
            args.setNumPartitions(numPartitions);
            sendBase("groupBy", args);
        }

        public void recv_groupBy() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            groupBy_result result = new groupBy_result();
            receiveBase(result, "groupBy");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sort(boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sort(ascending);
            recv_sort();
        }

        public void send_sort(boolean ascending) throws org.apache.thrift.TException {
            sort_args args = new sort_args();
            args.setAscending(ascending);
            sendBase("sort", args);
        }

        public void recv_sort() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sort_result result = new sort_result();
            receiveBase(result, "sort");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sort2(boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sort2(ascending, numPartitions);
            recv_sort2();
        }

        public void send_sort2(boolean ascending, long numPartitions) throws org.apache.thrift.TException {
            sort2_args args = new sort2_args();
            args.setAscending(ascending);
            args.setNumPartitions(numPartitions);
            sendBase("sort2", args);
        }

        public void recv_sort2() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sort2_result result = new sort2_result();
            receiveBase(result, "sort2");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sortBy(org.ignis.rpc.ISource src, boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sortBy(src, ascending);
            recv_sortBy();
        }

        public void send_sortBy(org.ignis.rpc.ISource src, boolean ascending) throws org.apache.thrift.TException {
            sortBy_args args = new sortBy_args();
            args.setSrc(src);
            args.setAscending(ascending);
            sendBase("sortBy", args);
        }

        public void recv_sortBy() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sortBy_result result = new sortBy_result();
            receiveBase(result, "sortBy");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sortBy3(src, ascending, numPartitions);
            recv_sortBy3();
        }

        public void send_sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.apache.thrift.TException {
            sortBy3_args args = new sortBy3_args();
            args.setSrc(src);
            args.setAscending(ascending);
            args.setNumPartitions(numPartitions);
            sendBase("sortBy3", args);
        }

        public void recv_sortBy3() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sortBy3_result result = new sortBy3_result();
            receiveBase(result, "sortBy3");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void union_(java.lang.String other, boolean preserveOrder) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_union_(other, preserveOrder);
            recv_union_();
        }

        public void send_union_(java.lang.String other, boolean preserveOrder) throws org.apache.thrift.TException {
            union__args args = new union__args();
            args.setOther(other);
            args.setPreserveOrder(preserveOrder);
            sendBase("union_", args);
        }

        public void recv_union_() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            union__result result = new union__result();
            receiveBase(result, "union_");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void union2(java.lang.String other, boolean preserveOrder, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_union2(other, preserveOrder, src);
            recv_union2();
        }

        public void send_union2(java.lang.String other, boolean preserveOrder, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            union2_args args = new union2_args();
            args.setOther(other);
            args.setPreserveOrder(preserveOrder);
            args.setSrc(src);
            sendBase("union2", args);
        }

        public void recv_union2() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            union2_result result = new union2_result();
            receiveBase(result, "union2");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void join(java.lang.String other, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_join(other, numPartitions);
            recv_join();
        }

        public void send_join(java.lang.String other, long numPartitions) throws org.apache.thrift.TException {
            join_args args = new join_args();
            args.setOther(other);
            args.setNumPartitions(numPartitions);
            sendBase("join", args);
        }

        public void recv_join() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            join_result result = new join_result();
            receiveBase(result, "join");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void join3(java.lang.String other, long numPartitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_join3(other, numPartitions, src);
            recv_join3();
        }

        public void send_join3(java.lang.String other, long numPartitions, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            join3_args args = new join3_args();
            args.setOther(other);
            args.setNumPartitions(numPartitions);
            args.setSrc(src);
            sendBase("join3", args);
        }

        public void recv_join3() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            join3_result result = new join3_result();
            receiveBase(result, "join3");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void distinct(long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_distinct(numPartitions);
            recv_distinct();
        }

        public void send_distinct(long numPartitions) throws org.apache.thrift.TException {
            distinct_args args = new distinct_args();
            args.setNumPartitions(numPartitions);
            sendBase("distinct", args);
        }

        public void recv_distinct() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            distinct_result result = new distinct_result();
            receiveBase(result, "distinct");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void distinct2(long numPartitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_distinct2(numPartitions, src);
            recv_distinct2();
        }

        public void send_distinct2(long numPartitions, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            distinct2_args args = new distinct2_args();
            args.setNumPartitions(numPartitions);
            args.setSrc(src);
            sendBase("distinct2", args);
        }

        public void recv_distinct2() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            distinct2_result result = new distinct2_result();
            receiveBase(result, "distinct2");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void repartition(long numPartitions, boolean preserveOrdering, boolean global_) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_repartition(numPartitions, preserveOrdering, global_);
            recv_repartition();
        }

        public void send_repartition(long numPartitions, boolean preserveOrdering, boolean global_) throws org.apache.thrift.TException {
            repartition_args args = new repartition_args();
            args.setNumPartitions(numPartitions);
            args.setPreserveOrdering(preserveOrdering);
            args.setGlobal_(global_);
            sendBase("repartition", args);
        }

        public void recv_repartition() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            repartition_result result = new repartition_result();
            receiveBase(result, "repartition");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void partitionByRandom(long numPartitions, int seed) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_partitionByRandom(numPartitions, seed);
            recv_partitionByRandom();
        }

        public void send_partitionByRandom(long numPartitions, int seed) throws org.apache.thrift.TException {
            partitionByRandom_args args = new partitionByRandom_args();
            args.setNumPartitions(numPartitions);
            args.setSeed(seed);
            sendBase("partitionByRandom", args);
        }

        public void recv_partitionByRandom() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            partitionByRandom_result result = new partitionByRandom_result();
            receiveBase(result, "partitionByRandom");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void partitionByHash(long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_partitionByHash(numPartitions);
            recv_partitionByHash();
        }

        public void send_partitionByHash(long numPartitions) throws org.apache.thrift.TException {
            partitionByHash_args args = new partitionByHash_args();
            args.setNumPartitions(numPartitions);
            sendBase("partitionByHash", args);
        }

        public void recv_partitionByHash() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            partitionByHash_result result = new partitionByHash_result();
            receiveBase(result, "partitionByHash");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void partitionBy(org.ignis.rpc.ISource src, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_partitionBy(src, numPartitions);
            recv_partitionBy();
        }

        public void send_partitionBy(org.ignis.rpc.ISource src, long numPartitions) throws org.apache.thrift.TException {
            partitionBy_args args = new partitionBy_args();
            args.setSrc(src);
            args.setNumPartitions(numPartitions);
            sendBase("partitionBy", args);
        }

        public void recv_partitionBy() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            partitionBy_result result = new partitionBy_result();
            receiveBase(result, "partitionBy");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void flatMapValues(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_flatMapValues(src);
            recv_flatMapValues();
        }

        public void send_flatMapValues(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            flatMapValues_args args = new flatMapValues_args();
            args.setSrc(src);
            sendBase("flatMapValues", args);
        }

        public void recv_flatMapValues() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            flatMapValues_result result = new flatMapValues_result();
            receiveBase(result, "flatMapValues");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void mapValues(org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_mapValues(src);
            recv_mapValues();
        }

        public void send_mapValues(org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            mapValues_args args = new mapValues_args();
            args.setSrc(src);
            sendBase("mapValues", args);
        }

        public void recv_mapValues() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            mapValues_result result = new mapValues_result();
            receiveBase(result, "mapValues");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void groupByKey(long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_groupByKey(numPartitions);
            recv_groupByKey();
        }

        public void send_groupByKey(long numPartitions) throws org.apache.thrift.TException {
            groupByKey_args args = new groupByKey_args();
            args.setNumPartitions(numPartitions);
            sendBase("groupByKey", args);
        }

        public void recv_groupByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            groupByKey_result result = new groupByKey_result();
            receiveBase(result, "groupByKey");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void groupByKey2(long numPartitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_groupByKey2(numPartitions, src);
            recv_groupByKey2();
        }

        public void send_groupByKey2(long numPartitions, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            groupByKey2_args args = new groupByKey2_args();
            args.setNumPartitions(numPartitions);
            args.setSrc(src);
            sendBase("groupByKey2", args);
        }

        public void recv_groupByKey2() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            groupByKey2_result result = new groupByKey2_result();
            receiveBase(result, "groupByKey2");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_reduceByKey(src, numPartitions, localReduce);
            recv_reduceByKey();
        }

        public void send_reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce) throws org.apache.thrift.TException {
            reduceByKey_args args = new reduceByKey_args();
            args.setSrc(src);
            args.setNumPartitions(numPartitions);
            args.setLocalReduce(localReduce);
            sendBase("reduceByKey", args);
        }

        public void recv_reduceByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            reduceByKey_result result = new reduceByKey_result();
            receiveBase(result, "reduceByKey");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_aggregateByKey(zero, seqOp, numPartitions);
            recv_aggregateByKey();
        }

        public void send_aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions) throws org.apache.thrift.TException {
            aggregateByKey_args args = new aggregateByKey_args();
            args.setZero(zero);
            args.setSeqOp(seqOp);
            args.setNumPartitions(numPartitions);
            sendBase("aggregateByKey", args);
        }

        public void recv_aggregateByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            aggregateByKey_result result = new aggregateByKey_result();
            receiveBase(result, "aggregateByKey");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_aggregateByKey4(zero, seqOp, combOp, numPartitions);
            recv_aggregateByKey4();
        }

        public void send_aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions) throws org.apache.thrift.TException {
            aggregateByKey4_args args = new aggregateByKey4_args();
            args.setZero(zero);
            args.setSeqOp(seqOp);
            args.setCombOp(combOp);
            args.setNumPartitions(numPartitions);
            sendBase("aggregateByKey4", args);
        }

        public void recv_aggregateByKey4() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            aggregateByKey4_result result = new aggregateByKey4_result();
            receiveBase(result, "aggregateByKey4");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_foldByKey(zero, src, numPartitions, localFold);
            recv_foldByKey();
        }

        public void send_foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold) throws org.apache.thrift.TException {
            foldByKey_args args = new foldByKey_args();
            args.setZero(zero);
            args.setSrc(src);
            args.setNumPartitions(numPartitions);
            args.setLocalFold(localFold);
            sendBase("foldByKey", args);
        }

        public void recv_foldByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            foldByKey_result result = new foldByKey_result();
            receiveBase(result, "foldByKey");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sortByKey(boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sortByKey(ascending);
            recv_sortByKey();
        }

        public void send_sortByKey(boolean ascending) throws org.apache.thrift.TException {
            sortByKey_args args = new sortByKey_args();
            args.setAscending(ascending);
            sendBase("sortByKey", args);
        }

        public void recv_sortByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sortByKey_result result = new sortByKey_result();
            receiveBase(result, "sortByKey");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sortByKey2a(boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sortByKey2a(ascending, numPartitions);
            recv_sortByKey2a();
        }

        public void send_sortByKey2a(boolean ascending, long numPartitions) throws org.apache.thrift.TException {
            sortByKey2a_args args = new sortByKey2a_args();
            args.setAscending(ascending);
            args.setNumPartitions(numPartitions);
            sendBase("sortByKey2a", args);
        }

        public void recv_sortByKey2a() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sortByKey2a_result result = new sortByKey2a_result();
            receiveBase(result, "sortByKey2a");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sortByKey2b(org.ignis.rpc.ISource src, boolean ascending) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sortByKey2b(src, ascending);
            recv_sortByKey2b();
        }

        public void send_sortByKey2b(org.ignis.rpc.ISource src, boolean ascending) throws org.apache.thrift.TException {
            sortByKey2b_args args = new sortByKey2b_args();
            args.setSrc(src);
            args.setAscending(ascending);
            sendBase("sortByKey2b", args);
        }

        public void recv_sortByKey2b() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sortByKey2b_result result = new sortByKey2b_result();
            receiveBase(result, "sortByKey2b");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sortByKey3(src, ascending, numPartitions);
            recv_sortByKey3();
        }

        public void send_sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions) throws org.apache.thrift.TException {
            sortByKey3_args args = new sortByKey3_args();
            args.setSrc(src);
            args.setAscending(ascending);
            args.setNumPartitions(numPartitions);
            sendBase("sortByKey3", args);
        }

        public void recv_sortByKey3() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sortByKey3_result result = new sortByKey3_result();
            receiveBase(result, "sortByKey3");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void executeTo(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            executeTo_call method_call = new executeTo_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class executeTo_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public executeTo_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeTo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                executeTo_args args = new executeTo_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void map_(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            map__call method_call = new map__call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class map__call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public map__call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("map_", org.apache.thrift.protocol.TMessageType.CALL, 0));
                map__args args = new map__args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void filter(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            filter_call method_call = new filter_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class filter_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public filter_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("filter", org.apache.thrift.protocol.TMessageType.CALL, 0));
                filter_args args = new filter_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void flatmap(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            flatmap_call method_call = new flatmap_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class flatmap_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public flatmap_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("flatmap", org.apache.thrift.protocol.TMessageType.CALL, 0));
                flatmap_args args = new flatmap_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void keyBy(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            keyBy_call method_call = new keyBy_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class keyBy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public keyBy_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("keyBy", org.apache.thrift.protocol.TMessageType.CALL, 0));
                keyBy_args args = new keyBy_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void mapWithIndex(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            mapWithIndex_call method_call = new mapWithIndex_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class mapWithIndex_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public mapWithIndex_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapWithIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
                mapWithIndex_args args = new mapWithIndex_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void mapPartitions(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            mapPartitions_call method_call = new mapPartitions_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class mapPartitions_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public mapPartitions_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapPartitions", org.apache.thrift.protocol.TMessageType.CALL, 0));
                mapPartitions_args args = new mapPartitions_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void mapPartitionsWithIndex(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            mapPartitionsWithIndex_call method_call = new mapPartitionsWithIndex_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class mapPartitionsWithIndex_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public mapPartitionsWithIndex_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapPartitionsWithIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
                mapPartitionsWithIndex_args args = new mapPartitionsWithIndex_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void mapExecutor(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            mapExecutor_call method_call = new mapExecutor_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class mapExecutor_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public mapExecutor_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapExecutor", org.apache.thrift.protocol.TMessageType.CALL, 0));
                mapExecutor_args args = new mapExecutor_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void mapExecutorTo(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            mapExecutorTo_call method_call = new mapExecutorTo_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class mapExecutorTo_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public mapExecutorTo_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapExecutorTo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                mapExecutorTo_args args = new mapExecutorTo_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void groupBy(org.ignis.rpc.ISource src, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            groupBy_call method_call = new groupBy_call(src, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class groupBy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;
            private long numPartitions;

            public groupBy_call(org.ignis.rpc.ISource src, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupBy", org.apache.thrift.protocol.TMessageType.CALL, 0));
                groupBy_args args = new groupBy_args();
                args.setSrc(src);
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void sort(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sort_call method_call = new sort_call(ascending, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sort_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private boolean ascending;

            public sort_call(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.ascending = ascending;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sort", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sort_args args = new sort_args();
                args.setAscending(ascending);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void sort2(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sort2_call method_call = new sort2_call(ascending, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sort2_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private boolean ascending;
            private long numPartitions;

            public sort2_call(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.ascending = ascending;
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sort2", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sort2_args args = new sort2_args();
                args.setAscending(ascending);
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void sortBy(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sortBy_call method_call = new sortBy_call(src, ascending, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sortBy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;
            private boolean ascending;

            public sortBy_call(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
                this.ascending = ascending;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortBy", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sortBy_args args = new sortBy_args();
                args.setSrc(src);
                args.setAscending(ascending);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void sortBy3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sortBy3_call method_call = new sortBy3_call(src, ascending, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sortBy3_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;
            private boolean ascending;
            private long numPartitions;

            public sortBy3_call(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
                this.ascending = ascending;
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortBy3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sortBy3_args args = new sortBy3_args();
                args.setSrc(src);
                args.setAscending(ascending);
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void union_(java.lang.String other, boolean preserveOrder, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            union__call method_call = new union__call(other, preserveOrder, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class union__call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String other;
            private boolean preserveOrder;

            public union__call(java.lang.String other, boolean preserveOrder, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.other = other;
                this.preserveOrder = preserveOrder;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("union_", org.apache.thrift.protocol.TMessageType.CALL, 0));
                union__args args = new union__args();
                args.setOther(other);
                args.setPreserveOrder(preserveOrder);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void union2(java.lang.String other, boolean preserveOrder, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            union2_call method_call = new union2_call(other, preserveOrder, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class union2_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String other;
            private boolean preserveOrder;
            private org.ignis.rpc.ISource src;

            public union2_call(java.lang.String other, boolean preserveOrder, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.other = other;
                this.preserveOrder = preserveOrder;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("union2", org.apache.thrift.protocol.TMessageType.CALL, 0));
                union2_args args = new union2_args();
                args.setOther(other);
                args.setPreserveOrder(preserveOrder);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void join(java.lang.String other, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            join_call method_call = new join_call(other, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class join_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String other;
            private long numPartitions;

            public join_call(java.lang.String other, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.other = other;
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("join", org.apache.thrift.protocol.TMessageType.CALL, 0));
                join_args args = new join_args();
                args.setOther(other);
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void join3(java.lang.String other, long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            join3_call method_call = new join3_call(other, numPartitions, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class join3_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String other;
            private long numPartitions;
            private org.ignis.rpc.ISource src;

            public join3_call(java.lang.String other, long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.other = other;
                this.numPartitions = numPartitions;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("join3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                join3_args args = new join3_args();
                args.setOther(other);
                args.setNumPartitions(numPartitions);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void distinct(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            distinct_call method_call = new distinct_call(numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class distinct_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long numPartitions;

            public distinct_call(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("distinct", org.apache.thrift.protocol.TMessageType.CALL, 0));
                distinct_args args = new distinct_args();
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void distinct2(long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            distinct2_call method_call = new distinct2_call(numPartitions, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class distinct2_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long numPartitions;
            private org.ignis.rpc.ISource src;

            public distinct2_call(long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.numPartitions = numPartitions;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("distinct2", org.apache.thrift.protocol.TMessageType.CALL, 0));
                distinct2_args args = new distinct2_args();
                args.setNumPartitions(numPartitions);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void repartition(long numPartitions, boolean preserveOrdering, boolean global_, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            repartition_call method_call = new repartition_call(numPartitions, preserveOrdering, global_, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class repartition_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long numPartitions;
            private boolean preserveOrdering;
            private boolean global_;

            public repartition_call(long numPartitions, boolean preserveOrdering, boolean global_, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.numPartitions = numPartitions;
                this.preserveOrdering = preserveOrdering;
                this.global_ = global_;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("repartition", org.apache.thrift.protocol.TMessageType.CALL, 0));
                repartition_args args = new repartition_args();
                args.setNumPartitions(numPartitions);
                args.setPreserveOrdering(preserveOrdering);
                args.setGlobal_(global_);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void partitionByRandom(long numPartitions, int seed, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            partitionByRandom_call method_call = new partitionByRandom_call(numPartitions, seed, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class partitionByRandom_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long numPartitions;
            private int seed;

            public partitionByRandom_call(long numPartitions, int seed, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.numPartitions = numPartitions;
                this.seed = seed;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partitionByRandom", org.apache.thrift.protocol.TMessageType.CALL, 0));
                partitionByRandom_args args = new partitionByRandom_args();
                args.setNumPartitions(numPartitions);
                args.setSeed(seed);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void partitionByHash(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            partitionByHash_call method_call = new partitionByHash_call(numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class partitionByHash_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long numPartitions;

            public partitionByHash_call(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partitionByHash", org.apache.thrift.protocol.TMessageType.CALL, 0));
                partitionByHash_args args = new partitionByHash_args();
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void partitionBy(org.ignis.rpc.ISource src, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            partitionBy_call method_call = new partitionBy_call(src, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class partitionBy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;
            private long numPartitions;

            public partitionBy_call(org.ignis.rpc.ISource src, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partitionBy", org.apache.thrift.protocol.TMessageType.CALL, 0));
                partitionBy_args args = new partitionBy_args();
                args.setSrc(src);
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void flatMapValues(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            flatMapValues_call method_call = new flatMapValues_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class flatMapValues_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public flatMapValues_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("flatMapValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
                flatMapValues_args args = new flatMapValues_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void mapValues(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            mapValues_call method_call = new mapValues_call(src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class mapValues_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;

            public mapValues_call(org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
                mapValues_args args = new mapValues_args();
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void groupByKey(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            groupByKey_call method_call = new groupByKey_call(numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class groupByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long numPartitions;

            public groupByKey_call(long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
                groupByKey_args args = new groupByKey_args();
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void groupByKey2(long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            groupByKey2_call method_call = new groupByKey2_call(numPartitions, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class groupByKey2_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long numPartitions;
            private org.ignis.rpc.ISource src;

            public groupByKey2_call(long numPartitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.numPartitions = numPartitions;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupByKey2", org.apache.thrift.protocol.TMessageType.CALL, 0));
                groupByKey2_args args = new groupByKey2_args();
                args.setNumPartitions(numPartitions);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void reduceByKey(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            reduceByKey_call method_call = new reduceByKey_call(src, numPartitions, localReduce, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class reduceByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;
            private long numPartitions;
            private boolean localReduce;

            public reduceByKey_call(org.ignis.rpc.ISource src, long numPartitions, boolean localReduce, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
                this.numPartitions = numPartitions;
                this.localReduce = localReduce;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reduceByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
                reduceByKey_args args = new reduceByKey_args();
                args.setSrc(src);
                args.setNumPartitions(numPartitions);
                args.setLocalReduce(localReduce);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void aggregateByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            aggregateByKey_call method_call = new aggregateByKey_call(zero, seqOp, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class aggregateByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource zero;
            private org.ignis.rpc.ISource seqOp;
            private long numPartitions;

            public aggregateByKey_call(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.zero = zero;
                this.seqOp = seqOp;
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("aggregateByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
                aggregateByKey_args args = new aggregateByKey_args();
                args.setZero(zero);
                args.setSeqOp(seqOp);
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void aggregateByKey4(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            aggregateByKey4_call method_call = new aggregateByKey4_call(zero, seqOp, combOp, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class aggregateByKey4_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource zero;
            private org.ignis.rpc.ISource seqOp;
            private org.ignis.rpc.ISource combOp;
            private long numPartitions;

            public aggregateByKey4_call(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource seqOp, org.ignis.rpc.ISource combOp, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.zero = zero;
                this.seqOp = seqOp;
                this.combOp = combOp;
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("aggregateByKey4", org.apache.thrift.protocol.TMessageType.CALL, 0));
                aggregateByKey4_args args = new aggregateByKey4_args();
                args.setZero(zero);
                args.setSeqOp(seqOp);
                args.setCombOp(combOp);
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void foldByKey(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            foldByKey_call method_call = new foldByKey_call(zero, src, numPartitions, localFold, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class foldByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource zero;
            private org.ignis.rpc.ISource src;
            private long numPartitions;
            private boolean localFold;

            public foldByKey_call(org.ignis.rpc.ISource zero, org.ignis.rpc.ISource src, long numPartitions, boolean localFold, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.zero = zero;
                this.src = src;
                this.numPartitions = numPartitions;
                this.localFold = localFold;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("foldByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
                foldByKey_args args = new foldByKey_args();
                args.setZero(zero);
                args.setSrc(src);
                args.setNumPartitions(numPartitions);
                args.setLocalFold(localFold);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void sortByKey(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sortByKey_call method_call = new sortByKey_call(ascending, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sortByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private boolean ascending;

            public sortByKey_call(boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.ascending = ascending;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sortByKey_args args = new sortByKey_args();
                args.setAscending(ascending);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void sortByKey2a(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sortByKey2a_call method_call = new sortByKey2a_call(ascending, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sortByKey2a_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private boolean ascending;
            private long numPartitions;

            public sortByKey2a_call(boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.ascending = ascending;
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortByKey2a", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sortByKey2a_args args = new sortByKey2a_args();
                args.setAscending(ascending);
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void sortByKey2b(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sortByKey2b_call method_call = new sortByKey2b_call(src, ascending, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sortByKey2b_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;
            private boolean ascending;

            public sortByKey2b_call(org.ignis.rpc.ISource src, boolean ascending, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
                this.ascending = ascending;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortByKey2b", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sortByKey2b_args args = new sortByKey2b_args();
                args.setSrc(src);
                args.setAscending(ascending);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void sortByKey3(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sortByKey3_call method_call = new sortByKey3_call(src, ascending, numPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sortByKey3_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource src;
            private boolean ascending;
            private long numPartitions;

            public sortByKey3_call(org.ignis.rpc.ISource src, boolean ascending, long numPartitions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.src = src;
                this.ascending = ascending;
                this.numPartitions = numPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sortByKey3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sortByKey3_args args = new sortByKey3_args();
                args.setSrc(src);
                args.setAscending(ascending);
                args.setNumPartitions(numPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("executeTo", new executeTo());
            processMap.put("map_", new map_());
            processMap.put("filter", new filter());
            processMap.put("flatmap", new flatmap());
            processMap.put("keyBy", new keyBy());
            processMap.put("mapWithIndex", new mapWithIndex());
            processMap.put("mapPartitions", new mapPartitions());
            processMap.put("mapPartitionsWithIndex", new mapPartitionsWithIndex());
            processMap.put("mapExecutor", new mapExecutor());
            processMap.put("mapExecutorTo", new mapExecutorTo());
            processMap.put("groupBy", new groupBy());
            processMap.put("sort", new sort());
            processMap.put("sort2", new sort2());
            processMap.put("sortBy", new sortBy());
            processMap.put("sortBy3", new sortBy3());
            processMap.put("union_", new union_());
            processMap.put("union2", new union2());
            processMap.put("join", new join());
            processMap.put("join3", new join3());
            processMap.put("distinct", new distinct());
            processMap.put("distinct2", new distinct2());
            processMap.put("repartition", new repartition());
            processMap.put("partitionByRandom", new partitionByRandom());
            processMap.put("partitionByHash", new partitionByHash());
            processMap.put("partitionBy", new partitionBy());
            processMap.put("flatMapValues", new flatMapValues());
            processMap.put("mapValues", new mapValues());
            processMap.put("groupByKey", new groupByKey());
            processMap.put("groupByKey2", new groupByKey2());
            processMap.put("reduceByKey", new reduceByKey());
            processMap.put("aggregateByKey", new aggregateByKey());
            processMap.put("aggregateByKey4", new aggregateByKey4());
            processMap.put("foldByKey", new foldByKey());
            processMap.put("sortByKey", new sortByKey());
            processMap.put("sortByKey2a", new sortByKey2a());
            processMap.put("sortByKey2b", new sortByKey2b());
            processMap.put("sortByKey3", new sortByKey3());
            return processMap;
        }

        public static class executeTo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeTo_args> {
            public executeTo() {
                super("executeTo");
            }

            public executeTo_args getEmptyArgsInstance() {
                return new executeTo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public executeTo_result getResult(I iface, executeTo_args args) throws org.apache.thrift.TException {
                executeTo_result result = new executeTo_result();
                try {
                    iface.executeTo(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class map_<I extends Iface> extends org.apache.thrift.ProcessFunction<I, map__args> {
            public map_() {
                super("map_");
            }

            public map__args getEmptyArgsInstance() {
                return new map__args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public map__result getResult(I iface, map__args args) throws org.apache.thrift.TException {
                map__result result = new map__result();
                try {
                    iface.map_(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class filter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, filter_args> {
            public filter() {
                super("filter");
            }

            public filter_args getEmptyArgsInstance() {
                return new filter_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public filter_result getResult(I iface, filter_args args) throws org.apache.thrift.TException {
                filter_result result = new filter_result();
                try {
                    iface.filter(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class flatmap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, flatmap_args> {
            public flatmap() {
                super("flatmap");
            }

            public flatmap_args getEmptyArgsInstance() {
                return new flatmap_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public flatmap_result getResult(I iface, flatmap_args args) throws org.apache.thrift.TException {
                flatmap_result result = new flatmap_result();
                try {
                    iface.flatmap(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class keyBy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, keyBy_args> {
            public keyBy() {
                super("keyBy");
            }

            public keyBy_args getEmptyArgsInstance() {
                return new keyBy_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public keyBy_result getResult(I iface, keyBy_args args) throws org.apache.thrift.TException {
                keyBy_result result = new keyBy_result();
                try {
                    iface.keyBy(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class mapWithIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapWithIndex_args> {
            public mapWithIndex() {
                super("mapWithIndex");
            }

            public mapWithIndex_args getEmptyArgsInstance() {
                return new mapWithIndex_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public mapWithIndex_result getResult(I iface, mapWithIndex_args args) throws org.apache.thrift.TException {
                mapWithIndex_result result = new mapWithIndex_result();
                try {
                    iface.mapWithIndex(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class mapPartitions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapPartitions_args> {
            public mapPartitions() {
                super("mapPartitions");
            }

            public mapPartitions_args getEmptyArgsInstance() {
                return new mapPartitions_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public mapPartitions_result getResult(I iface, mapPartitions_args args) throws org.apache.thrift.TException {
                mapPartitions_result result = new mapPartitions_result();
                try {
                    iface.mapPartitions(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class mapPartitionsWithIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapPartitionsWithIndex_args> {
            public mapPartitionsWithIndex() {
                super("mapPartitionsWithIndex");
            }

            public mapPartitionsWithIndex_args getEmptyArgsInstance() {
                return new mapPartitionsWithIndex_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public mapPartitionsWithIndex_result getResult(I iface, mapPartitionsWithIndex_args args) throws org.apache.thrift.TException {
                mapPartitionsWithIndex_result result = new mapPartitionsWithIndex_result();
                try {
                    iface.mapPartitionsWithIndex(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class mapExecutor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapExecutor_args> {
            public mapExecutor() {
                super("mapExecutor");
            }

            public mapExecutor_args getEmptyArgsInstance() {
                return new mapExecutor_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public mapExecutor_result getResult(I iface, mapExecutor_args args) throws org.apache.thrift.TException {
                mapExecutor_result result = new mapExecutor_result();
                try {
                    iface.mapExecutor(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class mapExecutorTo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapExecutorTo_args> {
            public mapExecutorTo() {
                super("mapExecutorTo");
            }

            public mapExecutorTo_args getEmptyArgsInstance() {
                return new mapExecutorTo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public mapExecutorTo_result getResult(I iface, mapExecutorTo_args args) throws org.apache.thrift.TException {
                mapExecutorTo_result result = new mapExecutorTo_result();
                try {
                    iface.mapExecutorTo(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class groupBy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, groupBy_args> {
            public groupBy() {
                super("groupBy");
            }

            public groupBy_args getEmptyArgsInstance() {
                return new groupBy_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public groupBy_result getResult(I iface, groupBy_args args) throws org.apache.thrift.TException {
                groupBy_result result = new groupBy_result();
                try {
                    iface.groupBy(args.src, args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sort_args> {
            public sort() {
                super("sort");
            }

            public sort_args getEmptyArgsInstance() {
                return new sort_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sort_result getResult(I iface, sort_args args) throws org.apache.thrift.TException {
                sort_result result = new sort_result();
                try {
                    iface.sort(args.ascending);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sort2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sort2_args> {
            public sort2() {
                super("sort2");
            }

            public sort2_args getEmptyArgsInstance() {
                return new sort2_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sort2_result getResult(I iface, sort2_args args) throws org.apache.thrift.TException {
                sort2_result result = new sort2_result();
                try {
                    iface.sort2(args.ascending, args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sortBy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortBy_args> {
            public sortBy() {
                super("sortBy");
            }

            public sortBy_args getEmptyArgsInstance() {
                return new sortBy_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sortBy_result getResult(I iface, sortBy_args args) throws org.apache.thrift.TException {
                sortBy_result result = new sortBy_result();
                try {
                    iface.sortBy(args.src, args.ascending);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sortBy3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortBy3_args> {
            public sortBy3() {
                super("sortBy3");
            }

            public sortBy3_args getEmptyArgsInstance() {
                return new sortBy3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sortBy3_result getResult(I iface, sortBy3_args args) throws org.apache.thrift.TException {
                sortBy3_result result = new sortBy3_result();
                try {
                    iface.sortBy3(args.src, args.ascending, args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class union_<I extends Iface> extends org.apache.thrift.ProcessFunction<I, union__args> {
            public union_() {
                super("union_");
            }

            public union__args getEmptyArgsInstance() {
                return new union__args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public union__result getResult(I iface, union__args args) throws org.apache.thrift.TException {
                union__result result = new union__result();
                try {
                    iface.union_(args.other, args.preserveOrder);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class union2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, union2_args> {
            public union2() {
                super("union2");
            }

            public union2_args getEmptyArgsInstance() {
                return new union2_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public union2_result getResult(I iface, union2_args args) throws org.apache.thrift.TException {
                union2_result result = new union2_result();
                try {
                    iface.union2(args.other, args.preserveOrder, args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class join<I extends Iface> extends org.apache.thrift.ProcessFunction<I, join_args> {
            public join() {
                super("join");
            }

            public join_args getEmptyArgsInstance() {
                return new join_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public join_result getResult(I iface, join_args args) throws org.apache.thrift.TException {
                join_result result = new join_result();
                try {
                    iface.join(args.other, args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class join3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, join3_args> {
            public join3() {
                super("join3");
            }

            public join3_args getEmptyArgsInstance() {
                return new join3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public join3_result getResult(I iface, join3_args args) throws org.apache.thrift.TException {
                join3_result result = new join3_result();
                try {
                    iface.join3(args.other, args.numPartitions, args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class distinct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, distinct_args> {
            public distinct() {
                super("distinct");
            }

            public distinct_args getEmptyArgsInstance() {
                return new distinct_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public distinct_result getResult(I iface, distinct_args args) throws org.apache.thrift.TException {
                distinct_result result = new distinct_result();
                try {
                    iface.distinct(args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class distinct2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, distinct2_args> {
            public distinct2() {
                super("distinct2");
            }

            public distinct2_args getEmptyArgsInstance() {
                return new distinct2_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public distinct2_result getResult(I iface, distinct2_args args) throws org.apache.thrift.TException {
                distinct2_result result = new distinct2_result();
                try {
                    iface.distinct2(args.numPartitions, args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class repartition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, repartition_args> {
            public repartition() {
                super("repartition");
            }

            public repartition_args getEmptyArgsInstance() {
                return new repartition_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public repartition_result getResult(I iface, repartition_args args) throws org.apache.thrift.TException {
                repartition_result result = new repartition_result();
                try {
                    iface.repartition(args.numPartitions, args.preserveOrdering, args.global_);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class partitionByRandom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partitionByRandom_args> {
            public partitionByRandom() {
                super("partitionByRandom");
            }

            public partitionByRandom_args getEmptyArgsInstance() {
                return new partitionByRandom_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public partitionByRandom_result getResult(I iface, partitionByRandom_args args) throws org.apache.thrift.TException {
                partitionByRandom_result result = new partitionByRandom_result();
                try {
                    iface.partitionByRandom(args.numPartitions, args.seed);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class partitionByHash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partitionByHash_args> {
            public partitionByHash() {
                super("partitionByHash");
            }

            public partitionByHash_args getEmptyArgsInstance() {
                return new partitionByHash_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public partitionByHash_result getResult(I iface, partitionByHash_args args) throws org.apache.thrift.TException {
                partitionByHash_result result = new partitionByHash_result();
                try {
                    iface.partitionByHash(args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class partitionBy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partitionBy_args> {
            public partitionBy() {
                super("partitionBy");
            }

            public partitionBy_args getEmptyArgsInstance() {
                return new partitionBy_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public partitionBy_result getResult(I iface, partitionBy_args args) throws org.apache.thrift.TException {
                partitionBy_result result = new partitionBy_result();
                try {
                    iface.partitionBy(args.src, args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class flatMapValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, flatMapValues_args> {
            public flatMapValues() {
                super("flatMapValues");
            }

            public flatMapValues_args getEmptyArgsInstance() {
                return new flatMapValues_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public flatMapValues_result getResult(I iface, flatMapValues_args args) throws org.apache.thrift.TException {
                flatMapValues_result result = new flatMapValues_result();
                try {
                    iface.flatMapValues(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class mapValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapValues_args> {
            public mapValues() {
                super("mapValues");
            }

            public mapValues_args getEmptyArgsInstance() {
                return new mapValues_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public mapValues_result getResult(I iface, mapValues_args args) throws org.apache.thrift.TException {
                mapValues_result result = new mapValues_result();
                try {
                    iface.mapValues(args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class groupByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, groupByKey_args> {
            public groupByKey() {
                super("groupByKey");
            }

            public groupByKey_args getEmptyArgsInstance() {
                return new groupByKey_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public groupByKey_result getResult(I iface, groupByKey_args args) throws org.apache.thrift.TException {
                groupByKey_result result = new groupByKey_result();
                try {
                    iface.groupByKey(args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class groupByKey2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, groupByKey2_args> {
            public groupByKey2() {
                super("groupByKey2");
            }

            public groupByKey2_args getEmptyArgsInstance() {
                return new groupByKey2_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public groupByKey2_result getResult(I iface, groupByKey2_args args) throws org.apache.thrift.TException {
                groupByKey2_result result = new groupByKey2_result();
                try {
                    iface.groupByKey2(args.numPartitions, args.src);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class reduceByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reduceByKey_args> {
            public reduceByKey() {
                super("reduceByKey");
            }

            public reduceByKey_args getEmptyArgsInstance() {
                return new reduceByKey_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public reduceByKey_result getResult(I iface, reduceByKey_args args) throws org.apache.thrift.TException {
                reduceByKey_result result = new reduceByKey_result();
                try {
                    iface.reduceByKey(args.src, args.numPartitions, args.localReduce);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class aggregateByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, aggregateByKey_args> {
            public aggregateByKey() {
                super("aggregateByKey");
            }

            public aggregateByKey_args getEmptyArgsInstance() {
                return new aggregateByKey_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public aggregateByKey_result getResult(I iface, aggregateByKey_args args) throws org.apache.thrift.TException {
                aggregateByKey_result result = new aggregateByKey_result();
                try {
                    iface.aggregateByKey(args.zero, args.seqOp, args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class aggregateByKey4<I extends Iface> extends org.apache.thrift.ProcessFunction<I, aggregateByKey4_args> {
            public aggregateByKey4() {
                super("aggregateByKey4");
            }

            public aggregateByKey4_args getEmptyArgsInstance() {
                return new aggregateByKey4_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public aggregateByKey4_result getResult(I iface, aggregateByKey4_args args) throws org.apache.thrift.TException {
                aggregateByKey4_result result = new aggregateByKey4_result();
                try {
                    iface.aggregateByKey4(args.zero, args.seqOp, args.combOp, args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class foldByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, foldByKey_args> {
            public foldByKey() {
                super("foldByKey");
            }

            public foldByKey_args getEmptyArgsInstance() {
                return new foldByKey_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public foldByKey_result getResult(I iface, foldByKey_args args) throws org.apache.thrift.TException {
                foldByKey_result result = new foldByKey_result();
                try {
                    iface.foldByKey(args.zero, args.src, args.numPartitions, args.localFold);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sortByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortByKey_args> {
            public sortByKey() {
                super("sortByKey");
            }

            public sortByKey_args getEmptyArgsInstance() {
                return new sortByKey_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sortByKey_result getResult(I iface, sortByKey_args args) throws org.apache.thrift.TException {
                sortByKey_result result = new sortByKey_result();
                try {
                    iface.sortByKey(args.ascending);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sortByKey2a<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortByKey2a_args> {
            public sortByKey2a() {
                super("sortByKey2a");
            }

            public sortByKey2a_args getEmptyArgsInstance() {
                return new sortByKey2a_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sortByKey2a_result getResult(I iface, sortByKey2a_args args) throws org.apache.thrift.TException {
                sortByKey2a_result result = new sortByKey2a_result();
                try {
                    iface.sortByKey2a(args.ascending, args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sortByKey2b<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortByKey2b_args> {
            public sortByKey2b() {
                super("sortByKey2b");
            }

            public sortByKey2b_args getEmptyArgsInstance() {
                return new sortByKey2b_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sortByKey2b_result getResult(I iface, sortByKey2b_args args) throws org.apache.thrift.TException {
                sortByKey2b_result result = new sortByKey2b_result();
                try {
                    iface.sortByKey2b(args.src, args.ascending);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sortByKey3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sortByKey3_args> {
            public sortByKey3() {
                super("sortByKey3");
            }

            public sortByKey3_args getEmptyArgsInstance() {
                return new sortByKey3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sortByKey3_result getResult(I iface, sortByKey3_args args) throws org.apache.thrift.TException {
                sortByKey3_result result = new sortByKey3_result();
                try {
                    iface.sortByKey3(args.src, args.ascending, args.numPartitions);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("executeTo", new executeTo());
            processMap.put("map_", new map_());
            processMap.put("filter", new filter());
            processMap.put("flatmap", new flatmap());
            processMap.put("keyBy", new keyBy());
            processMap.put("mapWithIndex", new mapWithIndex());
            processMap.put("mapPartitions", new mapPartitions());
            processMap.put("mapPartitionsWithIndex", new mapPartitionsWithIndex());
            processMap.put("mapExecutor", new mapExecutor());
            processMap.put("mapExecutorTo", new mapExecutorTo());
            processMap.put("groupBy", new groupBy());
            processMap.put("sort", new sort());
            processMap.put("sort2", new sort2());
            processMap.put("sortBy", new sortBy());
            processMap.put("sortBy3", new sortBy3());
            processMap.put("union_", new union_());
            processMap.put("union2", new union2());
            processMap.put("join", new join());
            processMap.put("join3", new join3());
            processMap.put("distinct", new distinct());
            processMap.put("distinct2", new distinct2());
            processMap.put("repartition", new repartition());
            processMap.put("partitionByRandom", new partitionByRandom());
            processMap.put("partitionByHash", new partitionByHash());
            processMap.put("partitionBy", new partitionBy());
            processMap.put("flatMapValues", new flatMapValues());
            processMap.put("mapValues", new mapValues());
            processMap.put("groupByKey", new groupByKey());
            processMap.put("groupByKey2", new groupByKey2());
            processMap.put("reduceByKey", new reduceByKey());
            processMap.put("aggregateByKey", new aggregateByKey());
            processMap.put("aggregateByKey4", new aggregateByKey4());
            processMap.put("foldByKey", new foldByKey());
            processMap.put("sortByKey", new sortByKey());
            processMap.put("sortByKey2a", new sortByKey2a());
            processMap.put("sortByKey2b", new sortByKey2b());
            processMap.put("sortByKey3", new sortByKey3());
            return processMap;
        }

        public static class executeTo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeTo_args, Void> {
            public executeTo() {
                super("executeTo");
            }

            public executeTo_args getEmptyArgsInstance() {
                return new executeTo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        executeTo_result result = new executeTo_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        executeTo_result result = new executeTo_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, executeTo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.executeTo(args.src, resultHandler);
            }
        }

        public static class map_<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, map__args, Void> {
            public map_() {
                super("map_");
            }

            public map__args getEmptyArgsInstance() {
                return new map__args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        map__result result = new map__result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        map__result result = new map__result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, map__args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.map_(args.src, resultHandler);
            }
        }

        public static class filter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, filter_args, Void> {
            public filter() {
                super("filter");
            }

            public filter_args getEmptyArgsInstance() {
                return new filter_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        filter_result result = new filter_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        filter_result result = new filter_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, filter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.filter(args.src, resultHandler);
            }
        }

        public static class flatmap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, flatmap_args, Void> {
            public flatmap() {
                super("flatmap");
            }

            public flatmap_args getEmptyArgsInstance() {
                return new flatmap_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        flatmap_result result = new flatmap_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        flatmap_result result = new flatmap_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, flatmap_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.flatmap(args.src, resultHandler);
            }
        }

        public static class keyBy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, keyBy_args, Void> {
            public keyBy() {
                super("keyBy");
            }

            public keyBy_args getEmptyArgsInstance() {
                return new keyBy_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        keyBy_result result = new keyBy_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        keyBy_result result = new keyBy_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, keyBy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.keyBy(args.src, resultHandler);
            }
        }

        public static class mapWithIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapWithIndex_args, Void> {
            public mapWithIndex() {
                super("mapWithIndex");
            }

            public mapWithIndex_args getEmptyArgsInstance() {
                return new mapWithIndex_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        mapWithIndex_result result = new mapWithIndex_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        mapWithIndex_result result = new mapWithIndex_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, mapWithIndex_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.mapWithIndex(args.src, resultHandler);
            }
        }

        public static class mapPartitions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapPartitions_args, Void> {
            public mapPartitions() {
                super("mapPartitions");
            }

            public mapPartitions_args getEmptyArgsInstance() {
                return new mapPartitions_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        mapPartitions_result result = new mapPartitions_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        mapPartitions_result result = new mapPartitions_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, mapPartitions_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.mapPartitions(args.src, resultHandler);
            }
        }

        public static class mapPartitionsWithIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapPartitionsWithIndex_args, Void> {
            public mapPartitionsWithIndex() {
                super("mapPartitionsWithIndex");
            }

            public mapPartitionsWithIndex_args getEmptyArgsInstance() {
                return new mapPartitionsWithIndex_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        mapPartitionsWithIndex_result result = new mapPartitionsWithIndex_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        mapPartitionsWithIndex_result result = new mapPartitionsWithIndex_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, mapPartitionsWithIndex_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.mapPartitionsWithIndex(args.src, resultHandler);
            }
        }

        public static class mapExecutor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapExecutor_args, Void> {
            public mapExecutor() {
                super("mapExecutor");
            }

            public mapExecutor_args getEmptyArgsInstance() {
                return new mapExecutor_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        mapExecutor_result result = new mapExecutor_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        mapExecutor_result result = new mapExecutor_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, mapExecutor_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.mapExecutor(args.src, resultHandler);
            }
        }

        public static class mapExecutorTo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapExecutorTo_args, Void> {
            public mapExecutorTo() {
                super("mapExecutorTo");
            }

            public mapExecutorTo_args getEmptyArgsInstance() {
                return new mapExecutorTo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        mapExecutorTo_result result = new mapExecutorTo_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        mapExecutorTo_result result = new mapExecutorTo_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, mapExecutorTo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.mapExecutorTo(args.src, resultHandler);
            }
        }

        public static class groupBy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, groupBy_args, Void> {
            public groupBy() {
                super("groupBy");
            }

            public groupBy_args getEmptyArgsInstance() {
                return new groupBy_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        groupBy_result result = new groupBy_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        groupBy_result result = new groupBy_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, groupBy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.groupBy(args.src, args.numPartitions, resultHandler);
            }
        }

        public static class sort<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sort_args, Void> {
            public sort() {
                super("sort");
            }

            public sort_args getEmptyArgsInstance() {
                return new sort_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sort_result result = new sort_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sort_result result = new sort_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sort_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sort(args.ascending, resultHandler);
            }
        }

        public static class sort2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sort2_args, Void> {
            public sort2() {
                super("sort2");
            }

            public sort2_args getEmptyArgsInstance() {
                return new sort2_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sort2_result result = new sort2_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sort2_result result = new sort2_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sort2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sort2(args.ascending, args.numPartitions, resultHandler);
            }
        }

        public static class sortBy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortBy_args, Void> {
            public sortBy() {
                super("sortBy");
            }

            public sortBy_args getEmptyArgsInstance() {
                return new sortBy_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sortBy_result result = new sortBy_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sortBy_result result = new sortBy_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sortBy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sortBy(args.src, args.ascending, resultHandler);
            }
        }

        public static class sortBy3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortBy3_args, Void> {
            public sortBy3() {
                super("sortBy3");
            }

            public sortBy3_args getEmptyArgsInstance() {
                return new sortBy3_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sortBy3_result result = new sortBy3_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sortBy3_result result = new sortBy3_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sortBy3_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sortBy3(args.src, args.ascending, args.numPartitions, resultHandler);
            }
        }

        public static class union_<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, union__args, Void> {
            public union_() {
                super("union_");
            }

            public union__args getEmptyArgsInstance() {
                return new union__args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        union__result result = new union__result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        union__result result = new union__result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, union__args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.union_(args.other, args.preserveOrder, resultHandler);
            }
        }

        public static class union2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, union2_args, Void> {
            public union2() {
                super("union2");
            }

            public union2_args getEmptyArgsInstance() {
                return new union2_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        union2_result result = new union2_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        union2_result result = new union2_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, union2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.union2(args.other, args.preserveOrder, args.src, resultHandler);
            }
        }

        public static class join<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, join_args, Void> {
            public join() {
                super("join");
            }

            public join_args getEmptyArgsInstance() {
                return new join_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        join_result result = new join_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        join_result result = new join_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, join_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.join(args.other, args.numPartitions, resultHandler);
            }
        }

        public static class join3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, join3_args, Void> {
            public join3() {
                super("join3");
            }

            public join3_args getEmptyArgsInstance() {
                return new join3_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        join3_result result = new join3_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        join3_result result = new join3_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, join3_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.join3(args.other, args.numPartitions, args.src, resultHandler);
            }
        }

        public static class distinct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, distinct_args, Void> {
            public distinct() {
                super("distinct");
            }

            public distinct_args getEmptyArgsInstance() {
                return new distinct_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        distinct_result result = new distinct_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        distinct_result result = new distinct_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, distinct_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.distinct(args.numPartitions, resultHandler);
            }
        }

        public static class distinct2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, distinct2_args, Void> {
            public distinct2() {
                super("distinct2");
            }

            public distinct2_args getEmptyArgsInstance() {
                return new distinct2_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        distinct2_result result = new distinct2_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        distinct2_result result = new distinct2_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, distinct2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.distinct2(args.numPartitions, args.src, resultHandler);
            }
        }

        public static class repartition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, repartition_args, Void> {
            public repartition() {
                super("repartition");
            }

            public repartition_args getEmptyArgsInstance() {
                return new repartition_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        repartition_result result = new repartition_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        repartition_result result = new repartition_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, repartition_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.repartition(args.numPartitions, args.preserveOrdering, args.global_, resultHandler);
            }
        }

        public static class partitionByRandom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partitionByRandom_args, Void> {
            public partitionByRandom() {
                super("partitionByRandom");
            }

            public partitionByRandom_args getEmptyArgsInstance() {
                return new partitionByRandom_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        partitionByRandom_result result = new partitionByRandom_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        partitionByRandom_result result = new partitionByRandom_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, partitionByRandom_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.partitionByRandom(args.numPartitions, args.seed, resultHandler);
            }
        }

        public static class partitionByHash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partitionByHash_args, Void> {
            public partitionByHash() {
                super("partitionByHash");
            }

            public partitionByHash_args getEmptyArgsInstance() {
                return new partitionByHash_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        partitionByHash_result result = new partitionByHash_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        partitionByHash_result result = new partitionByHash_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, partitionByHash_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.partitionByHash(args.numPartitions, resultHandler);
            }
        }

        public static class partitionBy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partitionBy_args, Void> {
            public partitionBy() {
                super("partitionBy");
            }

            public partitionBy_args getEmptyArgsInstance() {
                return new partitionBy_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        partitionBy_result result = new partitionBy_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        partitionBy_result result = new partitionBy_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, partitionBy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.partitionBy(args.src, args.numPartitions, resultHandler);
            }
        }

        public static class flatMapValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, flatMapValues_args, Void> {
            public flatMapValues() {
                super("flatMapValues");
            }

            public flatMapValues_args getEmptyArgsInstance() {
                return new flatMapValues_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        flatMapValues_result result = new flatMapValues_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        flatMapValues_result result = new flatMapValues_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, flatMapValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.flatMapValues(args.src, resultHandler);
            }
        }

        public static class mapValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapValues_args, Void> {
            public mapValues() {
                super("mapValues");
            }

            public mapValues_args getEmptyArgsInstance() {
                return new mapValues_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        mapValues_result result = new mapValues_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        mapValues_result result = new mapValues_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, mapValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.mapValues(args.src, resultHandler);
            }
        }

        public static class groupByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, groupByKey_args, Void> {
            public groupByKey() {
                super("groupByKey");
            }

            public groupByKey_args getEmptyArgsInstance() {
                return new groupByKey_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        groupByKey_result result = new groupByKey_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        groupByKey_result result = new groupByKey_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, groupByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.groupByKey(args.numPartitions, resultHandler);
            }
        }

        public static class groupByKey2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, groupByKey2_args, Void> {
            public groupByKey2() {
                super("groupByKey2");
            }

            public groupByKey2_args getEmptyArgsInstance() {
                return new groupByKey2_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        groupByKey2_result result = new groupByKey2_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        groupByKey2_result result = new groupByKey2_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, groupByKey2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.groupByKey2(args.numPartitions, args.src, resultHandler);
            }
        }

        public static class reduceByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reduceByKey_args, Void> {
            public reduceByKey() {
                super("reduceByKey");
            }

            public reduceByKey_args getEmptyArgsInstance() {
                return new reduceByKey_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        reduceByKey_result result = new reduceByKey_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        reduceByKey_result result = new reduceByKey_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, reduceByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.reduceByKey(args.src, args.numPartitions, args.localReduce, resultHandler);
            }
        }

        public static class aggregateByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, aggregateByKey_args, Void> {
            public aggregateByKey() {
                super("aggregateByKey");
            }

            public aggregateByKey_args getEmptyArgsInstance() {
                return new aggregateByKey_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        aggregateByKey_result result = new aggregateByKey_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        aggregateByKey_result result = new aggregateByKey_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, aggregateByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.aggregateByKey(args.zero, args.seqOp, args.numPartitions, resultHandler);
            }
        }

        public static class aggregateByKey4<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, aggregateByKey4_args, Void> {
            public aggregateByKey4() {
                super("aggregateByKey4");
            }

            public aggregateByKey4_args getEmptyArgsInstance() {
                return new aggregateByKey4_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        aggregateByKey4_result result = new aggregateByKey4_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        aggregateByKey4_result result = new aggregateByKey4_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, aggregateByKey4_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.aggregateByKey4(args.zero, args.seqOp, args.combOp, args.numPartitions, resultHandler);
            }
        }

        public static class foldByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, foldByKey_args, Void> {
            public foldByKey() {
                super("foldByKey");
            }

            public foldByKey_args getEmptyArgsInstance() {
                return new foldByKey_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        foldByKey_result result = new foldByKey_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        foldByKey_result result = new foldByKey_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, foldByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.foldByKey(args.zero, args.src, args.numPartitions, args.localFold, resultHandler);
            }
        }

        public static class sortByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortByKey_args, Void> {
            public sortByKey() {
                super("sortByKey");
            }

            public sortByKey_args getEmptyArgsInstance() {
                return new sortByKey_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sortByKey_result result = new sortByKey_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sortByKey_result result = new sortByKey_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sortByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sortByKey(args.ascending, resultHandler);
            }
        }

        public static class sortByKey2a<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortByKey2a_args, Void> {
            public sortByKey2a() {
                super("sortByKey2a");
            }

            public sortByKey2a_args getEmptyArgsInstance() {
                return new sortByKey2a_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sortByKey2a_result result = new sortByKey2a_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sortByKey2a_result result = new sortByKey2a_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sortByKey2a_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sortByKey2a(args.ascending, args.numPartitions, resultHandler);
            }
        }

        public static class sortByKey2b<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortByKey2b_args, Void> {
            public sortByKey2b() {
                super("sortByKey2b");
            }

            public sortByKey2b_args getEmptyArgsInstance() {
                return new sortByKey2b_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sortByKey2b_result result = new sortByKey2b_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sortByKey2b_result result = new sortByKey2b_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sortByKey2b_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sortByKey2b(args.src, args.ascending, resultHandler);
            }
        }

        public static class sortByKey3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sortByKey3_args, Void> {
            public sortByKey3() {
                super("sortByKey3");
            }

            public sortByKey3_args getEmptyArgsInstance() {
                return new sortByKey3_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sortByKey3_result result = new sortByKey3_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sortByKey3_result result = new sortByKey3_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sortByKey3_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sortByKey3(args.src, args.ascending, args.numPartitions, resultHandler);
            }
        }

    }

    public static class executeTo_args implements org.apache.thrift.TBase<executeTo_args, executeTo_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeTo_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeTo_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeTo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeTo_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeTo_args.class, metaDataMap);
        }

        public executeTo_args() {
        }

        public executeTo_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public executeTo_args(executeTo_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public executeTo_args deepCopy() {
            return new executeTo_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public executeTo_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof executeTo_args)
                return this.equals((executeTo_args) that);
            return false;
        }

        public boolean equals(executeTo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(executeTo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("executeTo_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class executeTo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public executeTo_argsStandardScheme getScheme() {
                return new executeTo_argsStandardScheme();
            }
        }

        private static class executeTo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeTo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, executeTo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, executeTo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class executeTo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public executeTo_argsTupleScheme getScheme() {
                return new executeTo_argsTupleScheme();
            }
        }

        private static class executeTo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeTo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, executeTo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, executeTo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class executeTo_result implements org.apache.thrift.TBase<executeTo_result, executeTo_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeTo_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeTo_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeTo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeTo_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeTo_result.class, metaDataMap);
        }

        public executeTo_result() {
        }

        public executeTo_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public executeTo_result(executeTo_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public executeTo_result deepCopy() {
            return new executeTo_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public executeTo_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof executeTo_result)
                return this.equals((executeTo_result) that);
            return false;
        }

        public boolean equals(executeTo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(executeTo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("executeTo_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class executeTo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public executeTo_resultStandardScheme getScheme() {
                return new executeTo_resultStandardScheme();
            }
        }

        private static class executeTo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeTo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, executeTo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, executeTo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class executeTo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public executeTo_resultTupleScheme getScheme() {
                return new executeTo_resultTupleScheme();
            }
        }

        private static class executeTo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeTo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, executeTo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, executeTo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class map__args implements org.apache.thrift.TBase<map__args, map__args._Fields>, java.io.Serializable, Cloneable, Comparable<map__args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("map__args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new map__argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new map__argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(map__args.class, metaDataMap);
        }

        public map__args() {
        }

        public map__args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public map__args(map__args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public map__args deepCopy() {
            return new map__args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public map__args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof map__args)
                return this.equals((map__args) that);
            return false;
        }

        public boolean equals(map__args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(map__args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("map__args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class map__argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public map__argsStandardScheme getScheme() {
                return new map__argsStandardScheme();
            }
        }

        private static class map__argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<map__args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, map__args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, map__args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class map__argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public map__argsTupleScheme getScheme() {
                return new map__argsTupleScheme();
            }
        }

        private static class map__argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<map__args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, map__args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, map__args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class map__result implements org.apache.thrift.TBase<map__result, map__result._Fields>, java.io.Serializable, Cloneable, Comparable<map__result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("map__result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new map__resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new map__resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(map__result.class, metaDataMap);
        }

        public map__result() {
        }

        public map__result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public map__result(map__result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public map__result deepCopy() {
            return new map__result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public map__result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof map__result)
                return this.equals((map__result) that);
            return false;
        }

        public boolean equals(map__result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(map__result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("map__result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class map__resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public map__resultStandardScheme getScheme() {
                return new map__resultStandardScheme();
            }
        }

        private static class map__resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<map__result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, map__result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, map__result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class map__resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public map__resultTupleScheme getScheme() {
                return new map__resultTupleScheme();
            }
        }

        private static class map__resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<map__result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, map__result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, map__result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class filter_args implements org.apache.thrift.TBase<filter_args, filter_args._Fields>, java.io.Serializable, Cloneable, Comparable<filter_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filter_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new filter_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new filter_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filter_args.class, metaDataMap);
        }

        public filter_args() {
        }

        public filter_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public filter_args(filter_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public filter_args deepCopy() {
            return new filter_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public filter_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof filter_args)
                return this.equals((filter_args) that);
            return false;
        }

        public boolean equals(filter_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(filter_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("filter_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class filter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public filter_argsStandardScheme getScheme() {
                return new filter_argsStandardScheme();
            }
        }

        private static class filter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<filter_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, filter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, filter_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class filter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public filter_argsTupleScheme getScheme() {
                return new filter_argsTupleScheme();
            }
        }

        private static class filter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<filter_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, filter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, filter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class filter_result implements org.apache.thrift.TBase<filter_result, filter_result._Fields>, java.io.Serializable, Cloneable, Comparable<filter_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filter_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new filter_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new filter_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filter_result.class, metaDataMap);
        }

        public filter_result() {
        }

        public filter_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public filter_result(filter_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public filter_result deepCopy() {
            return new filter_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public filter_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof filter_result)
                return this.equals((filter_result) that);
            return false;
        }

        public boolean equals(filter_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(filter_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("filter_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class filter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public filter_resultStandardScheme getScheme() {
                return new filter_resultStandardScheme();
            }
        }

        private static class filter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<filter_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, filter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, filter_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class filter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public filter_resultTupleScheme getScheme() {
                return new filter_resultTupleScheme();
            }
        }

        private static class filter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<filter_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, filter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, filter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class flatmap_args implements org.apache.thrift.TBase<flatmap_args, flatmap_args._Fields>, java.io.Serializable, Cloneable, Comparable<flatmap_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flatmap_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new flatmap_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new flatmap_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flatmap_args.class, metaDataMap);
        }

        public flatmap_args() {
        }

        public flatmap_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public flatmap_args(flatmap_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public flatmap_args deepCopy() {
            return new flatmap_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public flatmap_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof flatmap_args)
                return this.equals((flatmap_args) that);
            return false;
        }

        public boolean equals(flatmap_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(flatmap_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("flatmap_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class flatmap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flatmap_argsStandardScheme getScheme() {
                return new flatmap_argsStandardScheme();
            }
        }

        private static class flatmap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<flatmap_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, flatmap_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, flatmap_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class flatmap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flatmap_argsTupleScheme getScheme() {
                return new flatmap_argsTupleScheme();
            }
        }

        private static class flatmap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<flatmap_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, flatmap_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, flatmap_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class flatmap_result implements org.apache.thrift.TBase<flatmap_result, flatmap_result._Fields>, java.io.Serializable, Cloneable, Comparable<flatmap_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flatmap_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new flatmap_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new flatmap_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flatmap_result.class, metaDataMap);
        }

        public flatmap_result() {
        }

        public flatmap_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public flatmap_result(flatmap_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public flatmap_result deepCopy() {
            return new flatmap_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public flatmap_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof flatmap_result)
                return this.equals((flatmap_result) that);
            return false;
        }

        public boolean equals(flatmap_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(flatmap_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("flatmap_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class flatmap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flatmap_resultStandardScheme getScheme() {
                return new flatmap_resultStandardScheme();
            }
        }

        private static class flatmap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<flatmap_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, flatmap_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, flatmap_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class flatmap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flatmap_resultTupleScheme getScheme() {
                return new flatmap_resultTupleScheme();
            }
        }

        private static class flatmap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<flatmap_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, flatmap_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, flatmap_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class keyBy_args implements org.apache.thrift.TBase<keyBy_args, keyBy_args._Fields>, java.io.Serializable, Cloneable, Comparable<keyBy_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("keyBy_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new keyBy_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new keyBy_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(keyBy_args.class, metaDataMap);
        }

        public keyBy_args() {
        }

        public keyBy_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public keyBy_args(keyBy_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public keyBy_args deepCopy() {
            return new keyBy_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public keyBy_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof keyBy_args)
                return this.equals((keyBy_args) that);
            return false;
        }

        public boolean equals(keyBy_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(keyBy_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("keyBy_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class keyBy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public keyBy_argsStandardScheme getScheme() {
                return new keyBy_argsStandardScheme();
            }
        }

        private static class keyBy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<keyBy_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, keyBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, keyBy_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class keyBy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public keyBy_argsTupleScheme getScheme() {
                return new keyBy_argsTupleScheme();
            }
        }

        private static class keyBy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<keyBy_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, keyBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, keyBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class keyBy_result implements org.apache.thrift.TBase<keyBy_result, keyBy_result._Fields>, java.io.Serializable, Cloneable, Comparable<keyBy_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("keyBy_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new keyBy_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new keyBy_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(keyBy_result.class, metaDataMap);
        }

        public keyBy_result() {
        }

        public keyBy_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public keyBy_result(keyBy_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public keyBy_result deepCopy() {
            return new keyBy_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public keyBy_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof keyBy_result)
                return this.equals((keyBy_result) that);
            return false;
        }

        public boolean equals(keyBy_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(keyBy_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("keyBy_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class keyBy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public keyBy_resultStandardScheme getScheme() {
                return new keyBy_resultStandardScheme();
            }
        }

        private static class keyBy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<keyBy_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, keyBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, keyBy_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class keyBy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public keyBy_resultTupleScheme getScheme() {
                return new keyBy_resultTupleScheme();
            }
        }

        private static class keyBy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<keyBy_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, keyBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, keyBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapWithIndex_args implements org.apache.thrift.TBase<mapWithIndex_args, mapWithIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapWithIndex_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapWithIndex_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapWithIndex_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapWithIndex_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapWithIndex_args.class, metaDataMap);
        }

        public mapWithIndex_args() {
        }

        public mapWithIndex_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapWithIndex_args(mapWithIndex_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public mapWithIndex_args deepCopy() {
            return new mapWithIndex_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public mapWithIndex_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapWithIndex_args)
                return this.equals((mapWithIndex_args) that);
            return false;
        }

        public boolean equals(mapWithIndex_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapWithIndex_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapWithIndex_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapWithIndex_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapWithIndex_argsStandardScheme getScheme() {
                return new mapWithIndex_argsStandardScheme();
            }
        }

        private static class mapWithIndex_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapWithIndex_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapWithIndex_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapWithIndex_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapWithIndex_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapWithIndex_argsTupleScheme getScheme() {
                return new mapWithIndex_argsTupleScheme();
            }
        }

        private static class mapWithIndex_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapWithIndex_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapWithIndex_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapWithIndex_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapWithIndex_result implements org.apache.thrift.TBase<mapWithIndex_result, mapWithIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapWithIndex_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapWithIndex_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapWithIndex_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapWithIndex_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapWithIndex_result.class, metaDataMap);
        }

        public mapWithIndex_result() {
        }

        public mapWithIndex_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapWithIndex_result(mapWithIndex_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public mapWithIndex_result deepCopy() {
            return new mapWithIndex_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public mapWithIndex_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapWithIndex_result)
                return this.equals((mapWithIndex_result) that);
            return false;
        }

        public boolean equals(mapWithIndex_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapWithIndex_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapWithIndex_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapWithIndex_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapWithIndex_resultStandardScheme getScheme() {
                return new mapWithIndex_resultStandardScheme();
            }
        }

        private static class mapWithIndex_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapWithIndex_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapWithIndex_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapWithIndex_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapWithIndex_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapWithIndex_resultTupleScheme getScheme() {
                return new mapWithIndex_resultTupleScheme();
            }
        }

        private static class mapWithIndex_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapWithIndex_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapWithIndex_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapWithIndex_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapPartitions_args implements org.apache.thrift.TBase<mapPartitions_args, mapPartitions_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapPartitions_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapPartitions_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapPartitions_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapPartitions_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapPartitions_args.class, metaDataMap);
        }

        public mapPartitions_args() {
        }

        public mapPartitions_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapPartitions_args(mapPartitions_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public mapPartitions_args deepCopy() {
            return new mapPartitions_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public mapPartitions_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapPartitions_args)
                return this.equals((mapPartitions_args) that);
            return false;
        }

        public boolean equals(mapPartitions_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapPartitions_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapPartitions_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapPartitions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapPartitions_argsStandardScheme getScheme() {
                return new mapPartitions_argsStandardScheme();
            }
        }

        private static class mapPartitions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapPartitions_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapPartitions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapPartitions_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapPartitions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapPartitions_argsTupleScheme getScheme() {
                return new mapPartitions_argsTupleScheme();
            }
        }

        private static class mapPartitions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapPartitions_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapPartitions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapPartitions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapPartitions_result implements org.apache.thrift.TBase<mapPartitions_result, mapPartitions_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapPartitions_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapPartitions_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapPartitions_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapPartitions_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapPartitions_result.class, metaDataMap);
        }

        public mapPartitions_result() {
        }

        public mapPartitions_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapPartitions_result(mapPartitions_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public mapPartitions_result deepCopy() {
            return new mapPartitions_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public mapPartitions_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapPartitions_result)
                return this.equals((mapPartitions_result) that);
            return false;
        }

        public boolean equals(mapPartitions_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapPartitions_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapPartitions_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapPartitions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapPartitions_resultStandardScheme getScheme() {
                return new mapPartitions_resultStandardScheme();
            }
        }

        private static class mapPartitions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapPartitions_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapPartitions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapPartitions_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapPartitions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapPartitions_resultTupleScheme getScheme() {
                return new mapPartitions_resultTupleScheme();
            }
        }

        private static class mapPartitions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapPartitions_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapPartitions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapPartitions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapPartitionsWithIndex_args implements org.apache.thrift.TBase<mapPartitionsWithIndex_args, mapPartitionsWithIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapPartitionsWithIndex_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapPartitionsWithIndex_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapPartitionsWithIndex_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapPartitionsWithIndex_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapPartitionsWithIndex_args.class, metaDataMap);
        }

        public mapPartitionsWithIndex_args() {
        }

        public mapPartitionsWithIndex_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapPartitionsWithIndex_args(mapPartitionsWithIndex_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public mapPartitionsWithIndex_args deepCopy() {
            return new mapPartitionsWithIndex_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public mapPartitionsWithIndex_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapPartitionsWithIndex_args)
                return this.equals((mapPartitionsWithIndex_args) that);
            return false;
        }

        public boolean equals(mapPartitionsWithIndex_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapPartitionsWithIndex_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapPartitionsWithIndex_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapPartitionsWithIndex_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapPartitionsWithIndex_argsStandardScheme getScheme() {
                return new mapPartitionsWithIndex_argsStandardScheme();
            }
        }

        private static class mapPartitionsWithIndex_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapPartitionsWithIndex_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapPartitionsWithIndex_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapPartitionsWithIndex_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapPartitionsWithIndex_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapPartitionsWithIndex_argsTupleScheme getScheme() {
                return new mapPartitionsWithIndex_argsTupleScheme();
            }
        }

        private static class mapPartitionsWithIndex_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapPartitionsWithIndex_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapPartitionsWithIndex_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapPartitionsWithIndex_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapPartitionsWithIndex_result implements org.apache.thrift.TBase<mapPartitionsWithIndex_result, mapPartitionsWithIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapPartitionsWithIndex_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapPartitionsWithIndex_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapPartitionsWithIndex_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapPartitionsWithIndex_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapPartitionsWithIndex_result.class, metaDataMap);
        }

        public mapPartitionsWithIndex_result() {
        }

        public mapPartitionsWithIndex_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapPartitionsWithIndex_result(mapPartitionsWithIndex_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public mapPartitionsWithIndex_result deepCopy() {
            return new mapPartitionsWithIndex_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public mapPartitionsWithIndex_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapPartitionsWithIndex_result)
                return this.equals((mapPartitionsWithIndex_result) that);
            return false;
        }

        public boolean equals(mapPartitionsWithIndex_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapPartitionsWithIndex_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapPartitionsWithIndex_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapPartitionsWithIndex_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapPartitionsWithIndex_resultStandardScheme getScheme() {
                return new mapPartitionsWithIndex_resultStandardScheme();
            }
        }

        private static class mapPartitionsWithIndex_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapPartitionsWithIndex_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapPartitionsWithIndex_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapPartitionsWithIndex_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapPartitionsWithIndex_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapPartitionsWithIndex_resultTupleScheme getScheme() {
                return new mapPartitionsWithIndex_resultTupleScheme();
            }
        }

        private static class mapPartitionsWithIndex_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapPartitionsWithIndex_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapPartitionsWithIndex_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapPartitionsWithIndex_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapExecutor_args implements org.apache.thrift.TBase<mapExecutor_args, mapExecutor_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapExecutor_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapExecutor_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapExecutor_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapExecutor_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapExecutor_args.class, metaDataMap);
        }

        public mapExecutor_args() {
        }

        public mapExecutor_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapExecutor_args(mapExecutor_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public mapExecutor_args deepCopy() {
            return new mapExecutor_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public mapExecutor_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapExecutor_args)
                return this.equals((mapExecutor_args) that);
            return false;
        }

        public boolean equals(mapExecutor_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapExecutor_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapExecutor_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapExecutor_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapExecutor_argsStandardScheme getScheme() {
                return new mapExecutor_argsStandardScheme();
            }
        }

        private static class mapExecutor_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapExecutor_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapExecutor_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapExecutor_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapExecutor_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapExecutor_argsTupleScheme getScheme() {
                return new mapExecutor_argsTupleScheme();
            }
        }

        private static class mapExecutor_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapExecutor_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapExecutor_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapExecutor_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapExecutor_result implements org.apache.thrift.TBase<mapExecutor_result, mapExecutor_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapExecutor_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapExecutor_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapExecutor_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapExecutor_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapExecutor_result.class, metaDataMap);
        }

        public mapExecutor_result() {
        }

        public mapExecutor_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapExecutor_result(mapExecutor_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public mapExecutor_result deepCopy() {
            return new mapExecutor_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public mapExecutor_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapExecutor_result)
                return this.equals((mapExecutor_result) that);
            return false;
        }

        public boolean equals(mapExecutor_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapExecutor_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapExecutor_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapExecutor_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapExecutor_resultStandardScheme getScheme() {
                return new mapExecutor_resultStandardScheme();
            }
        }

        private static class mapExecutor_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapExecutor_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapExecutor_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapExecutor_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapExecutor_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapExecutor_resultTupleScheme getScheme() {
                return new mapExecutor_resultTupleScheme();
            }
        }

        private static class mapExecutor_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapExecutor_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapExecutor_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapExecutor_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapExecutorTo_args implements org.apache.thrift.TBase<mapExecutorTo_args, mapExecutorTo_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapExecutorTo_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapExecutorTo_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapExecutorTo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapExecutorTo_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapExecutorTo_args.class, metaDataMap);
        }

        public mapExecutorTo_args() {
        }

        public mapExecutorTo_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapExecutorTo_args(mapExecutorTo_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public mapExecutorTo_args deepCopy() {
            return new mapExecutorTo_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public mapExecutorTo_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapExecutorTo_args)
                return this.equals((mapExecutorTo_args) that);
            return false;
        }

        public boolean equals(mapExecutorTo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapExecutorTo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapExecutorTo_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapExecutorTo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapExecutorTo_argsStandardScheme getScheme() {
                return new mapExecutorTo_argsStandardScheme();
            }
        }

        private static class mapExecutorTo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapExecutorTo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapExecutorTo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapExecutorTo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapExecutorTo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapExecutorTo_argsTupleScheme getScheme() {
                return new mapExecutorTo_argsTupleScheme();
            }
        }

        private static class mapExecutorTo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapExecutorTo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapExecutorTo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapExecutorTo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapExecutorTo_result implements org.apache.thrift.TBase<mapExecutorTo_result, mapExecutorTo_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapExecutorTo_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapExecutorTo_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapExecutorTo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapExecutorTo_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapExecutorTo_result.class, metaDataMap);
        }

        public mapExecutorTo_result() {
        }

        public mapExecutorTo_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapExecutorTo_result(mapExecutorTo_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public mapExecutorTo_result deepCopy() {
            return new mapExecutorTo_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public mapExecutorTo_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapExecutorTo_result)
                return this.equals((mapExecutorTo_result) that);
            return false;
        }

        public boolean equals(mapExecutorTo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapExecutorTo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapExecutorTo_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapExecutorTo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapExecutorTo_resultStandardScheme getScheme() {
                return new mapExecutorTo_resultStandardScheme();
            }
        }

        private static class mapExecutorTo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapExecutorTo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapExecutorTo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapExecutorTo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapExecutorTo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapExecutorTo_resultTupleScheme getScheme() {
                return new mapExecutorTo_resultTupleScheme();
            }
        }

        private static class mapExecutorTo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapExecutorTo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapExecutorTo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapExecutorTo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class groupBy_args implements org.apache.thrift.TBase<groupBy_args, groupBy_args._Fields>, java.io.Serializable, Cloneable, Comparable<groupBy_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupBy_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupBy_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupBy_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src"),
            NUM_PARTITIONS((short) 2, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    case 2: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupBy_args.class, metaDataMap);
        }

        public groupBy_args() {
        }

        public groupBy_args(
                org.ignis.rpc.ISource src,
                long numPartitions) {
            this();
            this.src = src;
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public groupBy_args(groupBy_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
            this.numPartitions = other.numPartitions;
        }

        public groupBy_args deepCopy() {
            return new groupBy_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public groupBy_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public groupBy_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof groupBy_args)
                return this.equals((groupBy_args) that);
            return false;
        }

        public boolean equals(groupBy_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(groupBy_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("groupBy_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class groupBy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupBy_argsStandardScheme getScheme() {
                return new groupBy_argsStandardScheme();
            }
        }

        private static class groupBy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupBy_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, groupBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, groupBy_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class groupBy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupBy_argsTupleScheme getScheme() {
                return new groupBy_argsTupleScheme();
            }
        }

        private static class groupBy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupBy_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, groupBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, groupBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class groupBy_result implements org.apache.thrift.TBase<groupBy_result, groupBy_result._Fields>, java.io.Serializable, Cloneable, Comparable<groupBy_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupBy_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupBy_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupBy_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupBy_result.class, metaDataMap);
        }

        public groupBy_result() {
        }

        public groupBy_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public groupBy_result(groupBy_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public groupBy_result deepCopy() {
            return new groupBy_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public groupBy_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof groupBy_result)
                return this.equals((groupBy_result) that);
            return false;
        }

        public boolean equals(groupBy_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(groupBy_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("groupBy_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class groupBy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupBy_resultStandardScheme getScheme() {
                return new groupBy_resultStandardScheme();
            }
        }

        private static class groupBy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupBy_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, groupBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, groupBy_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class groupBy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupBy_resultTupleScheme getScheme() {
                return new groupBy_resultTupleScheme();
            }
        }

        private static class groupBy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupBy_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, groupBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, groupBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sort_args implements org.apache.thrift.TBase<sort_args, sort_args._Fields>, java.io.Serializable, Cloneable, Comparable<sort_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sort_args");

        private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sort_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sort_argsTupleSchemeFactory();

        private boolean ascending; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASCENDING((short) 1, "ascending");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ASCENDING
                        return ASCENDING;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ASCENDING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sort_args.class, metaDataMap);
        }

        public sort_args() {
        }

        public sort_args(
                boolean ascending) {
            this();
            this.ascending = ascending;
            setAscendingIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sort_args(sort_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.ascending = other.ascending;
        }

        public sort_args deepCopy() {
            return new sort_args(this);
        }

        @Override
        public void clear() {
            setAscendingIsSet(false);
            this.ascending = false;
        }

        public boolean isAscending() {
            return this.ascending;
        }

        public sort_args setAscending(boolean ascending) {
            this.ascending = ascending;
            setAscendingIsSet(true);
            return this;
        }

        public void unsetAscending() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
        public boolean isSetAscending() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        public void setAscendingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ASCENDING:
                    if (value == null) {
                        unsetAscending();
                    } else {
                        setAscending((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ASCENDING:
                    return isAscending();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ASCENDING:
                    return isSetAscending();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sort_args)
                return this.equals((sort_args) that);
            return false;
        }

        public boolean equals(sort_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ascending = true;
            boolean that_present_ascending = true;
            if (this_present_ascending || that_present_ascending) {
                if (!(this_present_ascending && that_present_ascending))
                    return false;
                if (this.ascending != that.ascending)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(sort_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetAscending(), other.isSetAscending());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAscending()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sort_args(");
            boolean first = true;

            sb.append("ascending:");
            sb.append(this.ascending);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sort_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sort_argsStandardScheme getScheme() {
                return new sort_argsStandardScheme();
            }
        }

        private static class sort_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sort_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sort_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ASCENDING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.ascending = iprot.readBool();
                                struct.setAscendingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sort_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
                oprot.writeBool(struct.ascending);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sort_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sort_argsTupleScheme getScheme() {
                return new sort_argsTupleScheme();
            }
        }

        private static class sort_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sort_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sort_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAscending()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAscending()) {
                    oprot.writeBool(struct.ascending);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sort_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ascending = iprot.readBool();
                    struct.setAscendingIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sort_result implements org.apache.thrift.TBase<sort_result, sort_result._Fields>, java.io.Serializable, Cloneable, Comparable<sort_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sort_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sort_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sort_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sort_result.class, metaDataMap);
        }

        public sort_result() {
        }

        public sort_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sort_result(sort_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sort_result deepCopy() {
            return new sort_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sort_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sort_result)
                return this.equals((sort_result) that);
            return false;
        }

        public boolean equals(sort_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sort_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sort_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sort_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sort_resultStandardScheme getScheme() {
                return new sort_resultStandardScheme();
            }
        }

        private static class sort_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sort_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sort_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sort_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sort_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sort_resultTupleScheme getScheme() {
                return new sort_resultTupleScheme();
            }
        }

        private static class sort_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sort_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sort_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sort_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sort2_args implements org.apache.thrift.TBase<sort2_args, sort2_args._Fields>, java.io.Serializable, Cloneable, Comparable<sort2_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sort2_args");

        private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short) 1);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sort2_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sort2_argsTupleSchemeFactory();

        private boolean ascending; // required
        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASCENDING((short) 1, "ascending"),
            NUM_PARTITIONS((short) 2, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ASCENDING
                        return ASCENDING;
                    case 2: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ASCENDING_ISSET_ID = 0;
        private static final int __NUMPARTITIONS_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sort2_args.class, metaDataMap);
        }

        public sort2_args() {
        }

        public sort2_args(
                boolean ascending,
                long numPartitions) {
            this();
            this.ascending = ascending;
            setAscendingIsSet(true);
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sort2_args(sort2_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.ascending = other.ascending;
            this.numPartitions = other.numPartitions;
        }

        public sort2_args deepCopy() {
            return new sort2_args(this);
        }

        @Override
        public void clear() {
            setAscendingIsSet(false);
            this.ascending = false;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        public boolean isAscending() {
            return this.ascending;
        }

        public sort2_args setAscending(boolean ascending) {
            this.ascending = ascending;
            setAscendingIsSet(true);
            return this;
        }

        public void unsetAscending() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
        public boolean isSetAscending() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        public void setAscendingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public sort2_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ASCENDING:
                    if (value == null) {
                        unsetAscending();
                    } else {
                        setAscending((java.lang.Boolean) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ASCENDING:
                    return isAscending();

                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ASCENDING:
                    return isSetAscending();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sort2_args)
                return this.equals((sort2_args) that);
            return false;
        }

        public boolean equals(sort2_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ascending = true;
            boolean that_present_ascending = true;
            if (this_present_ascending || that_present_ascending) {
                if (!(this_present_ascending && that_present_ascending))
                    return false;
                if (this.ascending != that.ascending)
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(sort2_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetAscending(), other.isSetAscending());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAscending()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sort2_args(");
            boolean first = true;

            sb.append("ascending:");
            sb.append(this.ascending);
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sort2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sort2_argsStandardScheme getScheme() {
                return new sort2_argsStandardScheme();
            }
        }

        private static class sort2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sort2_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sort2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ASCENDING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.ascending = iprot.readBool();
                                struct.setAscendingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sort2_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
                oprot.writeBool(struct.ascending);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sort2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sort2_argsTupleScheme getScheme() {
                return new sort2_argsTupleScheme();
            }
        }

        private static class sort2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sort2_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sort2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAscending()) {
                    optionals.set(0);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetAscending()) {
                    oprot.writeBool(struct.ascending);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sort2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.ascending = iprot.readBool();
                    struct.setAscendingIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sort2_result implements org.apache.thrift.TBase<sort2_result, sort2_result._Fields>, java.io.Serializable, Cloneable, Comparable<sort2_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sort2_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sort2_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sort2_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sort2_result.class, metaDataMap);
        }

        public sort2_result() {
        }

        public sort2_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sort2_result(sort2_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sort2_result deepCopy() {
            return new sort2_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sort2_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sort2_result)
                return this.equals((sort2_result) that);
            return false;
        }

        public boolean equals(sort2_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sort2_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sort2_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sort2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sort2_resultStandardScheme getScheme() {
                return new sort2_resultStandardScheme();
            }
        }

        private static class sort2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sort2_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sort2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sort2_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sort2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sort2_resultTupleScheme getScheme() {
                return new sort2_resultTupleScheme();
            }
        }

        private static class sort2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sort2_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sort2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sort2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortBy_args implements org.apache.thrift.TBase<sortBy_args, sortBy_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortBy_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortBy_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortBy_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortBy_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
        private boolean ascending; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src"),
            ASCENDING((short) 2, "ascending");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    case 2: // ASCENDING
                        return ASCENDING;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ASCENDING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortBy_args.class, metaDataMap);
        }

        public sortBy_args() {
        }

        public sortBy_args(
                org.ignis.rpc.ISource src,
                boolean ascending) {
            this();
            this.src = src;
            this.ascending = ascending;
            setAscendingIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortBy_args(sortBy_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
            this.ascending = other.ascending;
        }

        public sortBy_args deepCopy() {
            return new sortBy_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
            setAscendingIsSet(false);
            this.ascending = false;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public sortBy_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public boolean isAscending() {
            return this.ascending;
        }

        public sortBy_args setAscending(boolean ascending) {
            this.ascending = ascending;
            setAscendingIsSet(true);
            return this;
        }

        public void unsetAscending() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
        public boolean isSetAscending() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        public void setAscendingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

                case ASCENDING:
                    if (value == null) {
                        unsetAscending();
                    } else {
                        setAscending((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

                case ASCENDING:
                    return isAscending();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
                case ASCENDING:
                    return isSetAscending();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortBy_args)
                return this.equals((sortBy_args) that);
            return false;
        }

        public boolean equals(sortBy_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            boolean this_present_ascending = true;
            boolean that_present_ascending = true;
            if (this_present_ascending || that_present_ascending) {
                if (!(this_present_ascending && that_present_ascending))
                    return false;
                if (this.ascending != that.ascending)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(sortBy_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetAscending(), other.isSetAscending());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAscending()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortBy_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ascending:");
            sb.append(this.ascending);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortBy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortBy_argsStandardScheme getScheme() {
                return new sortBy_argsStandardScheme();
            }
        }

        private static class sortBy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortBy_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ASCENDING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.ascending = iprot.readBool();
                                struct.setAscendingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortBy_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
                oprot.writeBool(struct.ascending);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortBy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortBy_argsTupleScheme getScheme() {
                return new sortBy_argsTupleScheme();
            }
        }

        private static class sortBy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortBy_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                if (struct.isSetAscending()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
                if (struct.isSetAscending()) {
                    oprot.writeBool(struct.ascending);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ascending = iprot.readBool();
                    struct.setAscendingIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortBy_result implements org.apache.thrift.TBase<sortBy_result, sortBy_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortBy_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortBy_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortBy_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortBy_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortBy_result.class, metaDataMap);
        }

        public sortBy_result() {
        }

        public sortBy_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortBy_result(sortBy_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sortBy_result deepCopy() {
            return new sortBy_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sortBy_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortBy_result)
                return this.equals((sortBy_result) that);
            return false;
        }

        public boolean equals(sortBy_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sortBy_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortBy_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortBy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortBy_resultStandardScheme getScheme() {
                return new sortBy_resultStandardScheme();
            }
        }

        private static class sortBy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortBy_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortBy_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortBy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortBy_resultTupleScheme getScheme() {
                return new sortBy_resultTupleScheme();
            }
        }

        private static class sortBy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortBy_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortBy3_args implements org.apache.thrift.TBase<sortBy3_args, sortBy3_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortBy3_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortBy3_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short) 2);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortBy3_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortBy3_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
        private boolean ascending; // required
        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src"),
            ASCENDING((short) 2, "ascending"),
            NUM_PARTITIONS((short) 3, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    case 2: // ASCENDING
                        return ASCENDING;
                    case 3: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ASCENDING_ISSET_ID = 0;
        private static final int __NUMPARTITIONS_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortBy3_args.class, metaDataMap);
        }

        public sortBy3_args() {
        }

        public sortBy3_args(
                org.ignis.rpc.ISource src,
                boolean ascending,
                long numPartitions) {
            this();
            this.src = src;
            this.ascending = ascending;
            setAscendingIsSet(true);
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortBy3_args(sortBy3_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
            this.ascending = other.ascending;
            this.numPartitions = other.numPartitions;
        }

        public sortBy3_args deepCopy() {
            return new sortBy3_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
            setAscendingIsSet(false);
            this.ascending = false;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public sortBy3_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public boolean isAscending() {
            return this.ascending;
        }

        public sortBy3_args setAscending(boolean ascending) {
            this.ascending = ascending;
            setAscendingIsSet(true);
            return this;
        }

        public void unsetAscending() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
        public boolean isSetAscending() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        public void setAscendingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public sortBy3_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

                case ASCENDING:
                    if (value == null) {
                        unsetAscending();
                    } else {
                        setAscending((java.lang.Boolean) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

                case ASCENDING:
                    return isAscending();

                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
                case ASCENDING:
                    return isSetAscending();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortBy3_args)
                return this.equals((sortBy3_args) that);
            return false;
        }

        public boolean equals(sortBy3_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            boolean this_present_ascending = true;
            boolean that_present_ascending = true;
            if (this_present_ascending || that_present_ascending) {
                if (!(this_present_ascending && that_present_ascending))
                    return false;
                if (this.ascending != that.ascending)
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(sortBy3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetAscending(), other.isSetAscending());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAscending()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortBy3_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ascending:");
            sb.append(this.ascending);
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortBy3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortBy3_argsStandardScheme getScheme() {
                return new sortBy3_argsStandardScheme();
            }
        }

        private static class sortBy3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortBy3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortBy3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ASCENDING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.ascending = iprot.readBool();
                                struct.setAscendingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortBy3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
                oprot.writeBool(struct.ascending);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortBy3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortBy3_argsTupleScheme getScheme() {
                return new sortBy3_argsTupleScheme();
            }
        }

        private static class sortBy3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortBy3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortBy3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                if (struct.isSetAscending()) {
                    optionals.set(1);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
                if (struct.isSetAscending()) {
                    oprot.writeBool(struct.ascending);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortBy3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ascending = iprot.readBool();
                    struct.setAscendingIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortBy3_result implements org.apache.thrift.TBase<sortBy3_result, sortBy3_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortBy3_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortBy3_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortBy3_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortBy3_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortBy3_result.class, metaDataMap);
        }

        public sortBy3_result() {
        }

        public sortBy3_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortBy3_result(sortBy3_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sortBy3_result deepCopy() {
            return new sortBy3_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sortBy3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortBy3_result)
                return this.equals((sortBy3_result) that);
            return false;
        }

        public boolean equals(sortBy3_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sortBy3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortBy3_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortBy3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortBy3_resultStandardScheme getScheme() {
                return new sortBy3_resultStandardScheme();
            }
        }

        private static class sortBy3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortBy3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortBy3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortBy3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortBy3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortBy3_resultTupleScheme getScheme() {
                return new sortBy3_resultTupleScheme();
            }
        }

        private static class sortBy3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortBy3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortBy3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortBy3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class union__args implements org.apache.thrift.TBase<union__args, union__args._Fields>, java.io.Serializable, Cloneable, Comparable<union__args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("union__args");

        private static final org.apache.thrift.protocol.TField OTHER_FIELD_DESC = new org.apache.thrift.protocol.TField("other", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PRESERVE_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("preserveOrder", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new union__argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new union__argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable java.lang.String other; // required
        private boolean preserveOrder; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            OTHER((short) 1, "other"),
            PRESERVE_ORDER((short) 2, "preserveOrder");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // OTHER
                        return OTHER;
                    case 2: // PRESERVE_ORDER
                        return PRESERVE_ORDER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PRESERVEORDER_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.OTHER, new org.apache.thrift.meta_data.FieldMetaData("other", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PRESERVE_ORDER, new org.apache.thrift.meta_data.FieldMetaData("preserveOrder", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(union__args.class, metaDataMap);
        }

        public union__args() {
        }

        public union__args(
                java.lang.String other,
                boolean preserveOrder) {
            this();
            this.other = other;
            this.preserveOrder = preserveOrder;
            setPreserveOrderIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public union__args(union__args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetOther()) {
                this.other = other.other;
            }
            this.preserveOrder = other.preserveOrder;
        }

        public union__args deepCopy() {
            return new union__args(this);
        }

        @Override
        public void clear() {
            this.other = null;
            setPreserveOrderIsSet(false);
            this.preserveOrder = false;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getOther() {
            return this.other;
        }

        public union__args setOther(@org.apache.thrift.annotation.Nullable java.lang.String other) {
            this.other = other;
            return this;
        }

        public void unsetOther() {
            this.other = null;
        }

        /** Returns true if field other is set (has been assigned a value) and false otherwise */
        public boolean isSetOther() {
            return this.other != null;
        }

        public void setOtherIsSet(boolean value) {
            if (!value) {
                this.other = null;
            }
        }

        public boolean isPreserveOrder() {
            return this.preserveOrder;
        }

        public union__args setPreserveOrder(boolean preserveOrder) {
            this.preserveOrder = preserveOrder;
            setPreserveOrderIsSet(true);
            return this;
        }

        public void unsetPreserveOrder() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESERVEORDER_ISSET_ID);
        }

        /** Returns true if field preserveOrder is set (has been assigned a value) and false otherwise */
        public boolean isSetPreserveOrder() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESERVEORDER_ISSET_ID);
        }

        public void setPreserveOrderIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESERVEORDER_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case OTHER:
                    if (value == null) {
                        unsetOther();
                    } else {
                        setOther((java.lang.String) value);
                    }
                    break;

                case PRESERVE_ORDER:
                    if (value == null) {
                        unsetPreserveOrder();
                    } else {
                        setPreserveOrder((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case OTHER:
                    return getOther();

                case PRESERVE_ORDER:
                    return isPreserveOrder();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case OTHER:
                    return isSetOther();
                case PRESERVE_ORDER:
                    return isSetPreserveOrder();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof union__args)
                return this.equals((union__args) that);
            return false;
        }

        public boolean equals(union__args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_other = true && this.isSetOther();
            boolean that_present_other = true && that.isSetOther();
            if (this_present_other || that_present_other) {
                if (!(this_present_other && that_present_other))
                    return false;
                if (!this.other.equals(that.other))
                    return false;
            }

            boolean this_present_preserveOrder = true;
            boolean that_present_preserveOrder = true;
            if (this_present_preserveOrder || that_present_preserveOrder) {
                if (!(this_present_preserveOrder && that_present_preserveOrder))
                    return false;
                if (this.preserveOrder != that.preserveOrder)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetOther()) ? 131071 : 524287);
            if (isSetOther())
                hashCode = hashCode * 8191 + other.hashCode();

            hashCode = hashCode * 8191 + ((preserveOrder) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(union__args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetOther(), other.isSetOther());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOther()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other, other.other);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPreserveOrder(), other.isSetPreserveOrder());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPreserveOrder()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preserveOrder, other.preserveOrder);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("union__args(");
            boolean first = true;

            sb.append("other:");
            if (this.other == null) {
                sb.append("null");
            } else {
                sb.append(this.other);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("preserveOrder:");
            sb.append(this.preserveOrder);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class union__argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public union__argsStandardScheme getScheme() {
                return new union__argsStandardScheme();
            }
        }

        private static class union__argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<union__args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, union__args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // OTHER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.other = iprot.readString();
                                struct.setOtherIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PRESERVE_ORDER
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.preserveOrder = iprot.readBool();
                                struct.setPreserveOrderIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, union__args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.other != null) {
                    oprot.writeFieldBegin(OTHER_FIELD_DESC);
                    oprot.writeString(struct.other);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PRESERVE_ORDER_FIELD_DESC);
                oprot.writeBool(struct.preserveOrder);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class union__argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public union__argsTupleScheme getScheme() {
                return new union__argsTupleScheme();
            }
        }

        private static class union__argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<union__args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, union__args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetOther()) {
                    optionals.set(0);
                }
                if (struct.isSetPreserveOrder()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetOther()) {
                    oprot.writeString(struct.other);
                }
                if (struct.isSetPreserveOrder()) {
                    oprot.writeBool(struct.preserveOrder);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, union__args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.other = iprot.readString();
                    struct.setOtherIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.preserveOrder = iprot.readBool();
                    struct.setPreserveOrderIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class union__result implements org.apache.thrift.TBase<union__result, union__result._Fields>, java.io.Serializable, Cloneable, Comparable<union__result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("union__result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new union__resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new union__resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(union__result.class, metaDataMap);
        }

        public union__result() {
        }

        public union__result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public union__result(union__result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public union__result deepCopy() {
            return new union__result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public union__result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof union__result)
                return this.equals((union__result) that);
            return false;
        }

        public boolean equals(union__result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(union__result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("union__result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class union__resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public union__resultStandardScheme getScheme() {
                return new union__resultStandardScheme();
            }
        }

        private static class union__resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<union__result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, union__result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, union__result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class union__resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public union__resultTupleScheme getScheme() {
                return new union__resultTupleScheme();
            }
        }

        private static class union__resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<union__result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, union__result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, union__result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class union2_args implements org.apache.thrift.TBase<union2_args, union2_args._Fields>, java.io.Serializable, Cloneable, Comparable<union2_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("union2_args");

        private static final org.apache.thrift.protocol.TField OTHER_FIELD_DESC = new org.apache.thrift.protocol.TField("other", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PRESERVE_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("preserveOrder", org.apache.thrift.protocol.TType.BOOL, (short) 2);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new union2_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new union2_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable java.lang.String other; // required
        private boolean preserveOrder; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            OTHER((short) 1, "other"),
            PRESERVE_ORDER((short) 2, "preserveOrder"),
            SRC((short) 3, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // OTHER
                        return OTHER;
                    case 2: // PRESERVE_ORDER
                        return PRESERVE_ORDER;
                    case 3: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PRESERVEORDER_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.OTHER, new org.apache.thrift.meta_data.FieldMetaData("other", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PRESERVE_ORDER, new org.apache.thrift.meta_data.FieldMetaData("preserveOrder", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(union2_args.class, metaDataMap);
        }

        public union2_args() {
        }

        public union2_args(
                java.lang.String other,
                boolean preserveOrder,
                org.ignis.rpc.ISource src) {
            this();
            this.other = other;
            this.preserveOrder = preserveOrder;
            setPreserveOrderIsSet(true);
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public union2_args(union2_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetOther()) {
                this.other = other.other;
            }
            this.preserveOrder = other.preserveOrder;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public union2_args deepCopy() {
            return new union2_args(this);
        }

        @Override
        public void clear() {
            this.other = null;
            setPreserveOrderIsSet(false);
            this.preserveOrder = false;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getOther() {
            return this.other;
        }

        public union2_args setOther(@org.apache.thrift.annotation.Nullable java.lang.String other) {
            this.other = other;
            return this;
        }

        public void unsetOther() {
            this.other = null;
        }

        /** Returns true if field other is set (has been assigned a value) and false otherwise */
        public boolean isSetOther() {
            return this.other != null;
        }

        public void setOtherIsSet(boolean value) {
            if (!value) {
                this.other = null;
            }
        }

        public boolean isPreserveOrder() {
            return this.preserveOrder;
        }

        public union2_args setPreserveOrder(boolean preserveOrder) {
            this.preserveOrder = preserveOrder;
            setPreserveOrderIsSet(true);
            return this;
        }

        public void unsetPreserveOrder() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESERVEORDER_ISSET_ID);
        }

        /** Returns true if field preserveOrder is set (has been assigned a value) and false otherwise */
        public boolean isSetPreserveOrder() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESERVEORDER_ISSET_ID);
        }

        public void setPreserveOrderIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESERVEORDER_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public union2_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case OTHER:
                    if (value == null) {
                        unsetOther();
                    } else {
                        setOther((java.lang.String) value);
                    }
                    break;

                case PRESERVE_ORDER:
                    if (value == null) {
                        unsetPreserveOrder();
                    } else {
                        setPreserveOrder((java.lang.Boolean) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case OTHER:
                    return getOther();

                case PRESERVE_ORDER:
                    return isPreserveOrder();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case OTHER:
                    return isSetOther();
                case PRESERVE_ORDER:
                    return isSetPreserveOrder();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof union2_args)
                return this.equals((union2_args) that);
            return false;
        }

        public boolean equals(union2_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_other = true && this.isSetOther();
            boolean that_present_other = true && that.isSetOther();
            if (this_present_other || that_present_other) {
                if (!(this_present_other && that_present_other))
                    return false;
                if (!this.other.equals(that.other))
                    return false;
            }

            boolean this_present_preserveOrder = true;
            boolean that_present_preserveOrder = true;
            if (this_present_preserveOrder || that_present_preserveOrder) {
                if (!(this_present_preserveOrder && that_present_preserveOrder))
                    return false;
                if (this.preserveOrder != that.preserveOrder)
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetOther()) ? 131071 : 524287);
            if (isSetOther())
                hashCode = hashCode * 8191 + other.hashCode();

            hashCode = hashCode * 8191 + ((preserveOrder) ? 131071 : 524287);

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(union2_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetOther(), other.isSetOther());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOther()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other, other.other);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPreserveOrder(), other.isSetPreserveOrder());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPreserveOrder()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preserveOrder, other.preserveOrder);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("union2_args(");
            boolean first = true;

            sb.append("other:");
            if (this.other == null) {
                sb.append("null");
            } else {
                sb.append(this.other);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("preserveOrder:");
            sb.append(this.preserveOrder);
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class union2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public union2_argsStandardScheme getScheme() {
                return new union2_argsStandardScheme();
            }
        }

        private static class union2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<union2_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, union2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // OTHER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.other = iprot.readString();
                                struct.setOtherIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PRESERVE_ORDER
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.preserveOrder = iprot.readBool();
                                struct.setPreserveOrderIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, union2_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.other != null) {
                    oprot.writeFieldBegin(OTHER_FIELD_DESC);
                    oprot.writeString(struct.other);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PRESERVE_ORDER_FIELD_DESC);
                oprot.writeBool(struct.preserveOrder);
                oprot.writeFieldEnd();
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class union2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public union2_argsTupleScheme getScheme() {
                return new union2_argsTupleScheme();
            }
        }

        private static class union2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<union2_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, union2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetOther()) {
                    optionals.set(0);
                }
                if (struct.isSetPreserveOrder()) {
                    optionals.set(1);
                }
                if (struct.isSetSrc()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetOther()) {
                    oprot.writeString(struct.other);
                }
                if (struct.isSetPreserveOrder()) {
                    oprot.writeBool(struct.preserveOrder);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, union2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.other = iprot.readString();
                    struct.setOtherIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.preserveOrder = iprot.readBool();
                    struct.setPreserveOrderIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class union2_result implements org.apache.thrift.TBase<union2_result, union2_result._Fields>, java.io.Serializable, Cloneable, Comparable<union2_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("union2_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new union2_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new union2_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(union2_result.class, metaDataMap);
        }

        public union2_result() {
        }

        public union2_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public union2_result(union2_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public union2_result deepCopy() {
            return new union2_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public union2_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof union2_result)
                return this.equals((union2_result) that);
            return false;
        }

        public boolean equals(union2_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(union2_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("union2_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class union2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public union2_resultStandardScheme getScheme() {
                return new union2_resultStandardScheme();
            }
        }

        private static class union2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<union2_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, union2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, union2_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class union2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public union2_resultTupleScheme getScheme() {
                return new union2_resultTupleScheme();
            }
        }

        private static class union2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<union2_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, union2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, union2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class join_args implements org.apache.thrift.TBase<join_args, join_args._Fields>, java.io.Serializable, Cloneable, Comparable<join_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join_args");

        private static final org.apache.thrift.protocol.TField OTHER_FIELD_DESC = new org.apache.thrift.protocol.TField("other", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new join_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new join_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable java.lang.String other; // required
        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            OTHER((short) 1, "other"),
            NUM_PARTITIONS((short) 2, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // OTHER
                        return OTHER;
                    case 2: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.OTHER, new org.apache.thrift.meta_data.FieldMetaData("other", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join_args.class, metaDataMap);
        }

        public join_args() {
        }

        public join_args(
                java.lang.String other,
                long numPartitions) {
            this();
            this.other = other;
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public join_args(join_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetOther()) {
                this.other = other.other;
            }
            this.numPartitions = other.numPartitions;
        }

        public join_args deepCopy() {
            return new join_args(this);
        }

        @Override
        public void clear() {
            this.other = null;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getOther() {
            return this.other;
        }

        public join_args setOther(@org.apache.thrift.annotation.Nullable java.lang.String other) {
            this.other = other;
            return this;
        }

        public void unsetOther() {
            this.other = null;
        }

        /** Returns true if field other is set (has been assigned a value) and false otherwise */
        public boolean isSetOther() {
            return this.other != null;
        }

        public void setOtherIsSet(boolean value) {
            if (!value) {
                this.other = null;
            }
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public join_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case OTHER:
                    if (value == null) {
                        unsetOther();
                    } else {
                        setOther((java.lang.String) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case OTHER:
                    return getOther();

                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case OTHER:
                    return isSetOther();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof join_args)
                return this.equals((join_args) that);
            return false;
        }

        public boolean equals(join_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_other = true && this.isSetOther();
            boolean that_present_other = true && that.isSetOther();
            if (this_present_other || that_present_other) {
                if (!(this_present_other && that_present_other))
                    return false;
                if (!this.other.equals(that.other))
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetOther()) ? 131071 : 524287);
            if (isSetOther())
                hashCode = hashCode * 8191 + other.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(join_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetOther(), other.isSetOther());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOther()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other, other.other);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("join_args(");
            boolean first = true;

            sb.append("other:");
            if (this.other == null) {
                sb.append("null");
            } else {
                sb.append(this.other);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class join_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public join_argsStandardScheme getScheme() {
                return new join_argsStandardScheme();
            }
        }

        private static class join_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<join_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, join_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // OTHER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.other = iprot.readString();
                                struct.setOtherIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, join_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.other != null) {
                    oprot.writeFieldBegin(OTHER_FIELD_DESC);
                    oprot.writeString(struct.other);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class join_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public join_argsTupleScheme getScheme() {
                return new join_argsTupleScheme();
            }
        }

        private static class join_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<join_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetOther()) {
                    optionals.set(0);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetOther()) {
                    oprot.writeString(struct.other);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.other = iprot.readString();
                    struct.setOtherIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class join_result implements org.apache.thrift.TBase<join_result, join_result._Fields>, java.io.Serializable, Cloneable, Comparable<join_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new join_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new join_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join_result.class, metaDataMap);
        }

        public join_result() {
        }

        public join_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public join_result(join_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public join_result deepCopy() {
            return new join_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public join_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof join_result)
                return this.equals((join_result) that);
            return false;
        }

        public boolean equals(join_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(join_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("join_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class join_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public join_resultStandardScheme getScheme() {
                return new join_resultStandardScheme();
            }
        }

        private static class join_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<join_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, join_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, join_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class join_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public join_resultTupleScheme getScheme() {
                return new join_resultTupleScheme();
            }
        }

        private static class join_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<join_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, join_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, join_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class join3_args implements org.apache.thrift.TBase<join3_args, join3_args._Fields>, java.io.Serializable, Cloneable, Comparable<join3_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join3_args");

        private static final org.apache.thrift.protocol.TField OTHER_FIELD_DESC = new org.apache.thrift.protocol.TField("other", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new join3_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new join3_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable java.lang.String other; // required
        private long numPartitions; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            OTHER((short) 1, "other"),
            NUM_PARTITIONS((short) 2, "numPartitions"),
            SRC((short) 3, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // OTHER
                        return OTHER;
                    case 2: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    case 3: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.OTHER, new org.apache.thrift.meta_data.FieldMetaData("other", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join3_args.class, metaDataMap);
        }

        public join3_args() {
        }

        public join3_args(
                java.lang.String other,
                long numPartitions,
                org.ignis.rpc.ISource src) {
            this();
            this.other = other;
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public join3_args(join3_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetOther()) {
                this.other = other.other;
            }
            this.numPartitions = other.numPartitions;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public join3_args deepCopy() {
            return new join3_args(this);
        }

        @Override
        public void clear() {
            this.other = null;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getOther() {
            return this.other;
        }

        public join3_args setOther(@org.apache.thrift.annotation.Nullable java.lang.String other) {
            this.other = other;
            return this;
        }

        public void unsetOther() {
            this.other = null;
        }

        /** Returns true if field other is set (has been assigned a value) and false otherwise */
        public boolean isSetOther() {
            return this.other != null;
        }

        public void setOtherIsSet(boolean value) {
            if (!value) {
                this.other = null;
            }
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public join3_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public join3_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case OTHER:
                    if (value == null) {
                        unsetOther();
                    } else {
                        setOther((java.lang.String) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case OTHER:
                    return getOther();

                case NUM_PARTITIONS:
                    return getNumPartitions();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case OTHER:
                    return isSetOther();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof join3_args)
                return this.equals((join3_args) that);
            return false;
        }

        public boolean equals(join3_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_other = true && this.isSetOther();
            boolean that_present_other = true && that.isSetOther();
            if (this_present_other || that_present_other) {
                if (!(this_present_other && that_present_other))
                    return false;
                if (!this.other.equals(that.other))
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetOther()) ? 131071 : 524287);
            if (isSetOther())
                hashCode = hashCode * 8191 + other.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(join3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetOther(), other.isSetOther());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOther()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other, other.other);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("join3_args(");
            boolean first = true;

            sb.append("other:");
            if (this.other == null) {
                sb.append("null");
            } else {
                sb.append(this.other);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class join3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public join3_argsStandardScheme getScheme() {
                return new join3_argsStandardScheme();
            }
        }

        private static class join3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<join3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, join3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // OTHER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.other = iprot.readString();
                                struct.setOtherIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, join3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.other != null) {
                    oprot.writeFieldBegin(OTHER_FIELD_DESC);
                    oprot.writeString(struct.other);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class join3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public join3_argsTupleScheme getScheme() {
                return new join3_argsTupleScheme();
            }
        }

        private static class join3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<join3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, join3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetOther()) {
                    optionals.set(0);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(1);
                }
                if (struct.isSetSrc()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetOther()) {
                    oprot.writeString(struct.other);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, join3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.other = iprot.readString();
                    struct.setOtherIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class join3_result implements org.apache.thrift.TBase<join3_result, join3_result._Fields>, java.io.Serializable, Cloneable, Comparable<join3_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join3_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new join3_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new join3_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join3_result.class, metaDataMap);
        }

        public join3_result() {
        }

        public join3_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public join3_result(join3_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public join3_result deepCopy() {
            return new join3_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public join3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof join3_result)
                return this.equals((join3_result) that);
            return false;
        }

        public boolean equals(join3_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(join3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("join3_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class join3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public join3_resultStandardScheme getScheme() {
                return new join3_resultStandardScheme();
            }
        }

        private static class join3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<join3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, join3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, join3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class join3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public join3_resultTupleScheme getScheme() {
                return new join3_resultTupleScheme();
            }
        }

        private static class join3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<join3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, join3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, join3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class distinct_args implements org.apache.thrift.TBase<distinct_args, distinct_args._Fields>, java.io.Serializable, Cloneable, Comparable<distinct_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("distinct_args");

        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new distinct_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new distinct_argsTupleSchemeFactory();

        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            NUM_PARTITIONS((short) 1, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(distinct_args.class, metaDataMap);
        }

        public distinct_args() {
        }

        public distinct_args(
                long numPartitions) {
            this();
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public distinct_args(distinct_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.numPartitions = other.numPartitions;
        }

        public distinct_args deepCopy() {
            return new distinct_args(this);
        }

        @Override
        public void clear() {
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public distinct_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof distinct_args)
                return this.equals((distinct_args) that);
            return false;
        }

        public boolean equals(distinct_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(distinct_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("distinct_args(");
            boolean first = true;

            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class distinct_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public distinct_argsStandardScheme getScheme() {
                return new distinct_argsStandardScheme();
            }
        }

        private static class distinct_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<distinct_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, distinct_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, distinct_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class distinct_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public distinct_argsTupleScheme getScheme() {
                return new distinct_argsTupleScheme();
            }
        }

        private static class distinct_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<distinct_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, distinct_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetNumPartitions()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, distinct_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class distinct_result implements org.apache.thrift.TBase<distinct_result, distinct_result._Fields>, java.io.Serializable, Cloneable, Comparable<distinct_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("distinct_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new distinct_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new distinct_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(distinct_result.class, metaDataMap);
        }

        public distinct_result() {
        }

        public distinct_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public distinct_result(distinct_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public distinct_result deepCopy() {
            return new distinct_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public distinct_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof distinct_result)
                return this.equals((distinct_result) that);
            return false;
        }

        public boolean equals(distinct_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(distinct_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("distinct_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class distinct_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public distinct_resultStandardScheme getScheme() {
                return new distinct_resultStandardScheme();
            }
        }

        private static class distinct_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<distinct_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, distinct_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, distinct_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class distinct_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public distinct_resultTupleScheme getScheme() {
                return new distinct_resultTupleScheme();
            }
        }

        private static class distinct_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<distinct_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, distinct_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, distinct_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class distinct2_args implements org.apache.thrift.TBase<distinct2_args, distinct2_args._Fields>, java.io.Serializable, Cloneable, Comparable<distinct2_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("distinct2_args");

        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new distinct2_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new distinct2_argsTupleSchemeFactory();

        private long numPartitions; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            NUM_PARTITIONS((short) 1, "numPartitions"),
            SRC((short) 2, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    case 2: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(distinct2_args.class, metaDataMap);
        }

        public distinct2_args() {
        }

        public distinct2_args(
                long numPartitions,
                org.ignis.rpc.ISource src) {
            this();
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public distinct2_args(distinct2_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.numPartitions = other.numPartitions;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public distinct2_args deepCopy() {
            return new distinct2_args(this);
        }

        @Override
        public void clear() {
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
            this.src = null;
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public distinct2_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public distinct2_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case NUM_PARTITIONS:
                    return getNumPartitions();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof distinct2_args)
                return this.equals((distinct2_args) that);
            return false;
        }

        public boolean equals(distinct2_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(distinct2_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("distinct2_args(");
            boolean first = true;

            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class distinct2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public distinct2_argsStandardScheme getScheme() {
                return new distinct2_argsStandardScheme();
            }
        }

        private static class distinct2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<distinct2_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, distinct2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, distinct2_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class distinct2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public distinct2_argsTupleScheme getScheme() {
                return new distinct2_argsTupleScheme();
            }
        }

        private static class distinct2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<distinct2_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, distinct2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetNumPartitions()) {
                    optionals.set(0);
                }
                if (struct.isSetSrc()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, distinct2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class distinct2_result implements org.apache.thrift.TBase<distinct2_result, distinct2_result._Fields>, java.io.Serializable, Cloneable, Comparable<distinct2_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("distinct2_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new distinct2_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new distinct2_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(distinct2_result.class, metaDataMap);
        }

        public distinct2_result() {
        }

        public distinct2_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public distinct2_result(distinct2_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public distinct2_result deepCopy() {
            return new distinct2_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public distinct2_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof distinct2_result)
                return this.equals((distinct2_result) that);
            return false;
        }

        public boolean equals(distinct2_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(distinct2_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("distinct2_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class distinct2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public distinct2_resultStandardScheme getScheme() {
                return new distinct2_resultStandardScheme();
            }
        }

        private static class distinct2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<distinct2_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, distinct2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, distinct2_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class distinct2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public distinct2_resultTupleScheme getScheme() {
                return new distinct2_resultTupleScheme();
            }
        }

        private static class distinct2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<distinct2_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, distinct2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, distinct2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class repartition_args implements org.apache.thrift.TBase<repartition_args, repartition_args._Fields>, java.io.Serializable, Cloneable, Comparable<repartition_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("repartition_args");

        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField PRESERVE_ORDERING_FIELD_DESC = new org.apache.thrift.protocol.TField("preserveOrdering", org.apache.thrift.protocol.TType.BOOL, (short) 2);
        private static final org.apache.thrift.protocol.TField GLOBAL__FIELD_DESC = new org.apache.thrift.protocol.TField("global_", org.apache.thrift.protocol.TType.BOOL, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new repartition_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new repartition_argsTupleSchemeFactory();

        private long numPartitions; // required
        private boolean preserveOrdering; // required
        private boolean global_; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            NUM_PARTITIONS((short) 1, "numPartitions"),
            PRESERVE_ORDERING((short) 2, "preserveOrdering"),
            GLOBAL_((short) 3, "global_");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    case 2: // PRESERVE_ORDERING
                        return PRESERVE_ORDERING;
                    case 3: // GLOBAL_
                        return GLOBAL_;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private static final int __PRESERVEORDERING_ISSET_ID = 1;
        private static final int __GLOBAL__ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.PRESERVE_ORDERING, new org.apache.thrift.meta_data.FieldMetaData("preserveOrdering", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.GLOBAL_, new org.apache.thrift.meta_data.FieldMetaData("global_", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(repartition_args.class, metaDataMap);
        }

        public repartition_args() {
        }

        public repartition_args(
                long numPartitions,
                boolean preserveOrdering,
                boolean global_) {
            this();
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            this.preserveOrdering = preserveOrdering;
            setPreserveOrderingIsSet(true);
            this.global_ = global_;
            setGlobal_IsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public repartition_args(repartition_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.numPartitions = other.numPartitions;
            this.preserveOrdering = other.preserveOrdering;
            this.global_ = other.global_;
        }

        public repartition_args deepCopy() {
            return new repartition_args(this);
        }

        @Override
        public void clear() {
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
            setPreserveOrderingIsSet(false);
            this.preserveOrdering = false;
            setGlobal_IsSet(false);
            this.global_ = false;
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public repartition_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public boolean isPreserveOrdering() {
            return this.preserveOrdering;
        }

        public repartition_args setPreserveOrdering(boolean preserveOrdering) {
            this.preserveOrdering = preserveOrdering;
            setPreserveOrderingIsSet(true);
            return this;
        }

        public void unsetPreserveOrdering() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESERVEORDERING_ISSET_ID);
        }

        /** Returns true if field preserveOrdering is set (has been assigned a value) and false otherwise */
        public boolean isSetPreserveOrdering() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESERVEORDERING_ISSET_ID);
        }

        public void setPreserveOrderingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESERVEORDERING_ISSET_ID, value);
        }

        public boolean isGlobal_() {
            return this.global_;
        }

        public repartition_args setGlobal_(boolean global_) {
            this.global_ = global_;
            setGlobal_IsSet(true);
            return this;
        }

        public void unsetGlobal_() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GLOBAL__ISSET_ID);
        }

        /** Returns true if field global_ is set (has been assigned a value) and false otherwise */
        public boolean isSetGlobal_() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GLOBAL__ISSET_ID);
        }

        public void setGlobal_IsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GLOBAL__ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

                case PRESERVE_ORDERING:
                    if (value == null) {
                        unsetPreserveOrdering();
                    } else {
                        setPreserveOrdering((java.lang.Boolean) value);
                    }
                    break;

                case GLOBAL_:
                    if (value == null) {
                        unsetGlobal_();
                    } else {
                        setGlobal_((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case NUM_PARTITIONS:
                    return getNumPartitions();

                case PRESERVE_ORDERING:
                    return isPreserveOrdering();

                case GLOBAL_:
                    return isGlobal_();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
                case PRESERVE_ORDERING:
                    return isSetPreserveOrdering();
                case GLOBAL_:
                    return isSetGlobal_();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof repartition_args)
                return this.equals((repartition_args) that);
            return false;
        }

        public boolean equals(repartition_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            boolean this_present_preserveOrdering = true;
            boolean that_present_preserveOrdering = true;
            if (this_present_preserveOrdering || that_present_preserveOrdering) {
                if (!(this_present_preserveOrdering && that_present_preserveOrdering))
                    return false;
                if (this.preserveOrdering != that.preserveOrdering)
                    return false;
            }

            boolean this_present_global_ = true;
            boolean that_present_global_ = true;
            if (this_present_global_ || that_present_global_) {
                if (!(this_present_global_ && that_present_global_))
                    return false;
                if (this.global_ != that.global_)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            hashCode = hashCode * 8191 + ((preserveOrdering) ? 131071 : 524287);

            hashCode = hashCode * 8191 + ((global_) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(repartition_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPreserveOrdering(), other.isSetPreserveOrdering());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPreserveOrdering()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preserveOrdering, other.preserveOrdering);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetGlobal_(), other.isSetGlobal_());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetGlobal_()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.global_, other.global_);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("repartition_args(");
            boolean first = true;

            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            if (!first) sb.append(", ");
            sb.append("preserveOrdering:");
            sb.append(this.preserveOrdering);
            first = false;
            if (!first) sb.append(", ");
            sb.append("global_:");
            sb.append(this.global_);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class repartition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public repartition_argsStandardScheme getScheme() {
                return new repartition_argsStandardScheme();
            }
        }

        private static class repartition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<repartition_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, repartition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PRESERVE_ORDERING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.preserveOrdering = iprot.readBool();
                                struct.setPreserveOrderingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // GLOBAL_
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.global_ = iprot.readBool();
                                struct.setGlobal_IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, repartition_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PRESERVE_ORDERING_FIELD_DESC);
                oprot.writeBool(struct.preserveOrdering);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(GLOBAL__FIELD_DESC);
                oprot.writeBool(struct.global_);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class repartition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public repartition_argsTupleScheme getScheme() {
                return new repartition_argsTupleScheme();
            }
        }

        private static class repartition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<repartition_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, repartition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetNumPartitions()) {
                    optionals.set(0);
                }
                if (struct.isSetPreserveOrdering()) {
                    optionals.set(1);
                }
                if (struct.isSetGlobal_()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
                if (struct.isSetPreserveOrdering()) {
                    oprot.writeBool(struct.preserveOrdering);
                }
                if (struct.isSetGlobal_()) {
                    oprot.writeBool(struct.global_);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, repartition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.preserveOrdering = iprot.readBool();
                    struct.setPreserveOrderingIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.global_ = iprot.readBool();
                    struct.setGlobal_IsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class repartition_result implements org.apache.thrift.TBase<repartition_result, repartition_result._Fields>, java.io.Serializable, Cloneable, Comparable<repartition_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("repartition_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new repartition_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new repartition_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(repartition_result.class, metaDataMap);
        }

        public repartition_result() {
        }

        public repartition_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public repartition_result(repartition_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public repartition_result deepCopy() {
            return new repartition_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public repartition_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof repartition_result)
                return this.equals((repartition_result) that);
            return false;
        }

        public boolean equals(repartition_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(repartition_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("repartition_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class repartition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public repartition_resultStandardScheme getScheme() {
                return new repartition_resultStandardScheme();
            }
        }

        private static class repartition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<repartition_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, repartition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, repartition_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class repartition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public repartition_resultTupleScheme getScheme() {
                return new repartition_resultTupleScheme();
            }
        }

        private static class repartition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<repartition_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, repartition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, repartition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionByRandom_args implements org.apache.thrift.TBase<partitionByRandom_args, partitionByRandom_args._Fields>, java.io.Serializable, Cloneable, Comparable<partitionByRandom_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionByRandom_args");

        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("seed", org.apache.thrift.protocol.TType.I32, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionByRandom_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionByRandom_argsTupleSchemeFactory();

        private long numPartitions; // required
        private int seed; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            NUM_PARTITIONS((short) 1, "numPartitions"),
            SEED((short) 2, "seed");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    case 2: // SEED
                        return SEED;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private static final int __SEED_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionByRandom_args.class, metaDataMap);
        }

        public partitionByRandom_args() {
        }

        public partitionByRandom_args(
                long numPartitions,
                int seed) {
            this();
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            this.seed = seed;
            setSeedIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionByRandom_args(partitionByRandom_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.numPartitions = other.numPartitions;
            this.seed = other.seed;
        }

        public partitionByRandom_args deepCopy() {
            return new partitionByRandom_args(this);
        }

        @Override
        public void clear() {
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
            setSeedIsSet(false);
            this.seed = 0;
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public partitionByRandom_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public int getSeed() {
            return this.seed;
        }

        public partitionByRandom_args setSeed(int seed) {
            this.seed = seed;
            setSeedIsSet(true);
            return this;
        }

        public void unsetSeed() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEED_ISSET_ID);
        }

        /** Returns true if field seed is set (has been assigned a value) and false otherwise */
        public boolean isSetSeed() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEED_ISSET_ID);
        }

        public void setSeedIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEED_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

                case SEED:
                    if (value == null) {
                        unsetSeed();
                    } else {
                        setSeed((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case NUM_PARTITIONS:
                    return getNumPartitions();

                case SEED:
                    return getSeed();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
                case SEED:
                    return isSetSeed();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionByRandom_args)
                return this.equals((partitionByRandom_args) that);
            return false;
        }

        public boolean equals(partitionByRandom_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            boolean this_present_seed = true;
            boolean that_present_seed = true;
            if (this_present_seed || that_present_seed) {
                if (!(this_present_seed && that_present_seed))
                    return false;
                if (this.seed != that.seed)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            hashCode = hashCode * 8191 + seed;

            return hashCode;
        }

        @Override
        public int compareTo(partitionByRandom_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSeed(), other.isSetSeed());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSeed()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionByRandom_args(");
            boolean first = true;

            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            if (!first) sb.append(", ");
            sb.append("seed:");
            sb.append(this.seed);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionByRandom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionByRandom_argsStandardScheme getScheme() {
                return new partitionByRandom_argsStandardScheme();
            }
        }

        private static class partitionByRandom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionByRandom_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionByRandom_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SEED
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.seed = iprot.readI32();
                                struct.setSeedIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionByRandom_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(SEED_FIELD_DESC);
                oprot.writeI32(struct.seed);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionByRandom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionByRandom_argsTupleScheme getScheme() {
                return new partitionByRandom_argsTupleScheme();
            }
        }

        private static class partitionByRandom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionByRandom_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionByRandom_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetNumPartitions()) {
                    optionals.set(0);
                }
                if (struct.isSetSeed()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
                if (struct.isSetSeed()) {
                    oprot.writeI32(struct.seed);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionByRandom_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.seed = iprot.readI32();
                    struct.setSeedIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionByRandom_result implements org.apache.thrift.TBase<partitionByRandom_result, partitionByRandom_result._Fields>, java.io.Serializable, Cloneable, Comparable<partitionByRandom_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionByRandom_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionByRandom_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionByRandom_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionByRandom_result.class, metaDataMap);
        }

        public partitionByRandom_result() {
        }

        public partitionByRandom_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionByRandom_result(partitionByRandom_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public partitionByRandom_result deepCopy() {
            return new partitionByRandom_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public partitionByRandom_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionByRandom_result)
                return this.equals((partitionByRandom_result) that);
            return false;
        }

        public boolean equals(partitionByRandom_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionByRandom_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionByRandom_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionByRandom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionByRandom_resultStandardScheme getScheme() {
                return new partitionByRandom_resultStandardScheme();
            }
        }

        private static class partitionByRandom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionByRandom_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionByRandom_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionByRandom_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionByRandom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionByRandom_resultTupleScheme getScheme() {
                return new partitionByRandom_resultTupleScheme();
            }
        }

        private static class partitionByRandom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionByRandom_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionByRandom_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionByRandom_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionByHash_args implements org.apache.thrift.TBase<partitionByHash_args, partitionByHash_args._Fields>, java.io.Serializable, Cloneable, Comparable<partitionByHash_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionByHash_args");

        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionByHash_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionByHash_argsTupleSchemeFactory();

        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            NUM_PARTITIONS((short) 1, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionByHash_args.class, metaDataMap);
        }

        public partitionByHash_args() {
        }

        public partitionByHash_args(
                long numPartitions) {
            this();
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionByHash_args(partitionByHash_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.numPartitions = other.numPartitions;
        }

        public partitionByHash_args deepCopy() {
            return new partitionByHash_args(this);
        }

        @Override
        public void clear() {
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public partitionByHash_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionByHash_args)
                return this.equals((partitionByHash_args) that);
            return false;
        }

        public boolean equals(partitionByHash_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(partitionByHash_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionByHash_args(");
            boolean first = true;

            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionByHash_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionByHash_argsStandardScheme getScheme() {
                return new partitionByHash_argsStandardScheme();
            }
        }

        private static class partitionByHash_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionByHash_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionByHash_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionByHash_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionByHash_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionByHash_argsTupleScheme getScheme() {
                return new partitionByHash_argsTupleScheme();
            }
        }

        private static class partitionByHash_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionByHash_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionByHash_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetNumPartitions()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionByHash_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionByHash_result implements org.apache.thrift.TBase<partitionByHash_result, partitionByHash_result._Fields>, java.io.Serializable, Cloneable, Comparable<partitionByHash_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionByHash_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionByHash_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionByHash_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionByHash_result.class, metaDataMap);
        }

        public partitionByHash_result() {
        }

        public partitionByHash_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionByHash_result(partitionByHash_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public partitionByHash_result deepCopy() {
            return new partitionByHash_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public partitionByHash_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionByHash_result)
                return this.equals((partitionByHash_result) that);
            return false;
        }

        public boolean equals(partitionByHash_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionByHash_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionByHash_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionByHash_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionByHash_resultStandardScheme getScheme() {
                return new partitionByHash_resultStandardScheme();
            }
        }

        private static class partitionByHash_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionByHash_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionByHash_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionByHash_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionByHash_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionByHash_resultTupleScheme getScheme() {
                return new partitionByHash_resultTupleScheme();
            }
        }

        private static class partitionByHash_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionByHash_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionByHash_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionByHash_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionBy_args implements org.apache.thrift.TBase<partitionBy_args, partitionBy_args._Fields>, java.io.Serializable, Cloneable, Comparable<partitionBy_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionBy_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionBy_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionBy_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src"),
            NUM_PARTITIONS((short) 2, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    case 2: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionBy_args.class, metaDataMap);
        }

        public partitionBy_args() {
        }

        public partitionBy_args(
                org.ignis.rpc.ISource src,
                long numPartitions) {
            this();
            this.src = src;
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionBy_args(partitionBy_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
            this.numPartitions = other.numPartitions;
        }

        public partitionBy_args deepCopy() {
            return new partitionBy_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public partitionBy_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public partitionBy_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionBy_args)
                return this.equals((partitionBy_args) that);
            return false;
        }

        public boolean equals(partitionBy_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(partitionBy_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionBy_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionBy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionBy_argsStandardScheme getScheme() {
                return new partitionBy_argsStandardScheme();
            }
        }

        private static class partitionBy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionBy_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionBy_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionBy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionBy_argsTupleScheme getScheme() {
                return new partitionBy_argsTupleScheme();
            }
        }

        private static class partitionBy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionBy_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionBy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionBy_result implements org.apache.thrift.TBase<partitionBy_result, partitionBy_result._Fields>, java.io.Serializable, Cloneable, Comparable<partitionBy_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionBy_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionBy_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionBy_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionBy_result.class, metaDataMap);
        }

        public partitionBy_result() {
        }

        public partitionBy_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionBy_result(partitionBy_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public partitionBy_result deepCopy() {
            return new partitionBy_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public partitionBy_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionBy_result)
                return this.equals((partitionBy_result) that);
            return false;
        }

        public boolean equals(partitionBy_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionBy_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionBy_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionBy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionBy_resultStandardScheme getScheme() {
                return new partitionBy_resultStandardScheme();
            }
        }

        private static class partitionBy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionBy_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionBy_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionBy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionBy_resultTupleScheme getScheme() {
                return new partitionBy_resultTupleScheme();
            }
        }

        private static class partitionBy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionBy_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionBy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class flatMapValues_args implements org.apache.thrift.TBase<flatMapValues_args, flatMapValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<flatMapValues_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flatMapValues_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new flatMapValues_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new flatMapValues_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flatMapValues_args.class, metaDataMap);
        }

        public flatMapValues_args() {
        }

        public flatMapValues_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public flatMapValues_args(flatMapValues_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public flatMapValues_args deepCopy() {
            return new flatMapValues_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public flatMapValues_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof flatMapValues_args)
                return this.equals((flatMapValues_args) that);
            return false;
        }

        public boolean equals(flatMapValues_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(flatMapValues_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("flatMapValues_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class flatMapValues_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flatMapValues_argsStandardScheme getScheme() {
                return new flatMapValues_argsStandardScheme();
            }
        }

        private static class flatMapValues_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<flatMapValues_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, flatMapValues_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, flatMapValues_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class flatMapValues_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flatMapValues_argsTupleScheme getScheme() {
                return new flatMapValues_argsTupleScheme();
            }
        }

        private static class flatMapValues_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<flatMapValues_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, flatMapValues_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, flatMapValues_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class flatMapValues_result implements org.apache.thrift.TBase<flatMapValues_result, flatMapValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<flatMapValues_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flatMapValues_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new flatMapValues_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new flatMapValues_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flatMapValues_result.class, metaDataMap);
        }

        public flatMapValues_result() {
        }

        public flatMapValues_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public flatMapValues_result(flatMapValues_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public flatMapValues_result deepCopy() {
            return new flatMapValues_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public flatMapValues_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof flatMapValues_result)
                return this.equals((flatMapValues_result) that);
            return false;
        }

        public boolean equals(flatMapValues_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(flatMapValues_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("flatMapValues_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class flatMapValues_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flatMapValues_resultStandardScheme getScheme() {
                return new flatMapValues_resultStandardScheme();
            }
        }

        private static class flatMapValues_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<flatMapValues_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, flatMapValues_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, flatMapValues_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class flatMapValues_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public flatMapValues_resultTupleScheme getScheme() {
                return new flatMapValues_resultTupleScheme();
            }
        }

        private static class flatMapValues_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<flatMapValues_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, flatMapValues_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, flatMapValues_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapValues_args implements org.apache.thrift.TBase<mapValues_args, mapValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapValues_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapValues_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapValues_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapValues_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapValues_args.class, metaDataMap);
        }

        public mapValues_args() {
        }

        public mapValues_args(
                org.ignis.rpc.ISource src) {
            this();
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapValues_args(mapValues_args other) {
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public mapValues_args deepCopy() {
            return new mapValues_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public mapValues_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapValues_args)
                return this.equals((mapValues_args) that);
            return false;
        }

        public boolean equals(mapValues_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapValues_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapValues_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapValues_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapValues_argsStandardScheme getScheme() {
                return new mapValues_argsStandardScheme();
            }
        }

        private static class mapValues_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapValues_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapValues_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapValues_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapValues_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapValues_argsTupleScheme getScheme() {
                return new mapValues_argsTupleScheme();
            }
        }

        private static class mapValues_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapValues_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapValues_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapValues_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class mapValues_result implements org.apache.thrift.TBase<mapValues_result, mapValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapValues_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapValues_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapValues_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapValues_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapValues_result.class, metaDataMap);
        }

        public mapValues_result() {
        }

        public mapValues_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public mapValues_result(mapValues_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public mapValues_result deepCopy() {
            return new mapValues_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public mapValues_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof mapValues_result)
                return this.equals((mapValues_result) that);
            return false;
        }

        public boolean equals(mapValues_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(mapValues_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("mapValues_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class mapValues_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapValues_resultStandardScheme getScheme() {
                return new mapValues_resultStandardScheme();
            }
        }

        private static class mapValues_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapValues_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, mapValues_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, mapValues_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class mapValues_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public mapValues_resultTupleScheme getScheme() {
                return new mapValues_resultTupleScheme();
            }
        }

        private static class mapValues_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapValues_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, mapValues_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, mapValues_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class groupByKey_args implements org.apache.thrift.TBase<groupByKey_args, groupByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<groupByKey_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByKey_args");

        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupByKey_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupByKey_argsTupleSchemeFactory();

        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            NUM_PARTITIONS((short) 1, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByKey_args.class, metaDataMap);
        }

        public groupByKey_args() {
        }

        public groupByKey_args(
                long numPartitions) {
            this();
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public groupByKey_args(groupByKey_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.numPartitions = other.numPartitions;
        }

        public groupByKey_args deepCopy() {
            return new groupByKey_args(this);
        }

        @Override
        public void clear() {
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public groupByKey_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof groupByKey_args)
                return this.equals((groupByKey_args) that);
            return false;
        }

        public boolean equals(groupByKey_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(groupByKey_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("groupByKey_args(");
            boolean first = true;

            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class groupByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupByKey_argsStandardScheme getScheme() {
                return new groupByKey_argsStandardScheme();
            }
        }

        private static class groupByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupByKey_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, groupByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, groupByKey_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class groupByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupByKey_argsTupleScheme getScheme() {
                return new groupByKey_argsTupleScheme();
            }
        }

        private static class groupByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupByKey_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, groupByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetNumPartitions()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, groupByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class groupByKey_result implements org.apache.thrift.TBase<groupByKey_result, groupByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<groupByKey_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByKey_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupByKey_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupByKey_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByKey_result.class, metaDataMap);
        }

        public groupByKey_result() {
        }

        public groupByKey_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public groupByKey_result(groupByKey_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public groupByKey_result deepCopy() {
            return new groupByKey_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public groupByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof groupByKey_result)
                return this.equals((groupByKey_result) that);
            return false;
        }

        public boolean equals(groupByKey_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(groupByKey_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("groupByKey_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class groupByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupByKey_resultStandardScheme getScheme() {
                return new groupByKey_resultStandardScheme();
            }
        }

        private static class groupByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupByKey_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, groupByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, groupByKey_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class groupByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupByKey_resultTupleScheme getScheme() {
                return new groupByKey_resultTupleScheme();
            }
        }

        private static class groupByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupByKey_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, groupByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, groupByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class groupByKey2_args implements org.apache.thrift.TBase<groupByKey2_args, groupByKey2_args._Fields>, java.io.Serializable, Cloneable, Comparable<groupByKey2_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByKey2_args");

        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupByKey2_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupByKey2_argsTupleSchemeFactory();

        private long numPartitions; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            NUM_PARTITIONS((short) 1, "numPartitions"),
            SRC((short) 2, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    case 2: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByKey2_args.class, metaDataMap);
        }

        public groupByKey2_args() {
        }

        public groupByKey2_args(
                long numPartitions,
                org.ignis.rpc.ISource src) {
            this();
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public groupByKey2_args(groupByKey2_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.numPartitions = other.numPartitions;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public groupByKey2_args deepCopy() {
            return new groupByKey2_args(this);
        }

        @Override
        public void clear() {
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
            this.src = null;
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public groupByKey2_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public groupByKey2_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case NUM_PARTITIONS:
                    return getNumPartitions();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof groupByKey2_args)
                return this.equals((groupByKey2_args) that);
            return false;
        }

        public boolean equals(groupByKey2_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(groupByKey2_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("groupByKey2_args(");
            boolean first = true;

            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class groupByKey2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupByKey2_argsStandardScheme getScheme() {
                return new groupByKey2_argsStandardScheme();
            }
        }

        private static class groupByKey2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupByKey2_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, groupByKey2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, groupByKey2_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class groupByKey2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupByKey2_argsTupleScheme getScheme() {
                return new groupByKey2_argsTupleScheme();
            }
        }

        private static class groupByKey2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupByKey2_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, groupByKey2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetNumPartitions()) {
                    optionals.set(0);
                }
                if (struct.isSetSrc()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, groupByKey2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class groupByKey2_result implements org.apache.thrift.TBase<groupByKey2_result, groupByKey2_result._Fields>, java.io.Serializable, Cloneable, Comparable<groupByKey2_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByKey2_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new groupByKey2_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new groupByKey2_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByKey2_result.class, metaDataMap);
        }

        public groupByKey2_result() {
        }

        public groupByKey2_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public groupByKey2_result(groupByKey2_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public groupByKey2_result deepCopy() {
            return new groupByKey2_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public groupByKey2_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof groupByKey2_result)
                return this.equals((groupByKey2_result) that);
            return false;
        }

        public boolean equals(groupByKey2_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(groupByKey2_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("groupByKey2_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class groupByKey2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupByKey2_resultStandardScheme getScheme() {
                return new groupByKey2_resultStandardScheme();
            }
        }

        private static class groupByKey2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<groupByKey2_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, groupByKey2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, groupByKey2_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class groupByKey2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public groupByKey2_resultTupleScheme getScheme() {
                return new groupByKey2_resultTupleScheme();
            }
        }

        private static class groupByKey2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<groupByKey2_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, groupByKey2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, groupByKey2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class reduceByKey_args implements org.apache.thrift.TBase<reduceByKey_args, reduceByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<reduceByKey_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduceByKey_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField LOCAL_REDUCE_FIELD_DESC = new org.apache.thrift.protocol.TField("localReduce", org.apache.thrift.protocol.TType.BOOL, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reduceByKey_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reduceByKey_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
        private long numPartitions; // required
        private boolean localReduce; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src"),
            NUM_PARTITIONS((short) 2, "numPartitions"),
            LOCAL_REDUCE((short) 3, "localReduce");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    case 2: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    case 3: // LOCAL_REDUCE
                        return LOCAL_REDUCE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private static final int __LOCALREDUCE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.LOCAL_REDUCE, new org.apache.thrift.meta_data.FieldMetaData("localReduce", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduceByKey_args.class, metaDataMap);
        }

        public reduceByKey_args() {
        }

        public reduceByKey_args(
                org.ignis.rpc.ISource src,
                long numPartitions,
                boolean localReduce) {
            this();
            this.src = src;
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            this.localReduce = localReduce;
            setLocalReduceIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reduceByKey_args(reduceByKey_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
            this.numPartitions = other.numPartitions;
            this.localReduce = other.localReduce;
        }

        public reduceByKey_args deepCopy() {
            return new reduceByKey_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
            setLocalReduceIsSet(false);
            this.localReduce = false;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public reduceByKey_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public reduceByKey_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public boolean isLocalReduce() {
            return this.localReduce;
        }

        public reduceByKey_args setLocalReduce(boolean localReduce) {
            this.localReduce = localReduce;
            setLocalReduceIsSet(true);
            return this;
        }

        public void unsetLocalReduce() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCALREDUCE_ISSET_ID);
        }

        /** Returns true if field localReduce is set (has been assigned a value) and false otherwise */
        public boolean isSetLocalReduce() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCALREDUCE_ISSET_ID);
        }

        public void setLocalReduceIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCALREDUCE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

                case LOCAL_REDUCE:
                    if (value == null) {
                        unsetLocalReduce();
                    } else {
                        setLocalReduce((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

                case NUM_PARTITIONS:
                    return getNumPartitions();

                case LOCAL_REDUCE:
                    return isLocalReduce();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
                case LOCAL_REDUCE:
                    return isSetLocalReduce();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof reduceByKey_args)
                return this.equals((reduceByKey_args) that);
            return false;
        }

        public boolean equals(reduceByKey_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            boolean this_present_localReduce = true;
            boolean that_present_localReduce = true;
            if (this_present_localReduce || that_present_localReduce) {
                if (!(this_present_localReduce && that_present_localReduce))
                    return false;
                if (this.localReduce != that.localReduce)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            hashCode = hashCode * 8191 + ((localReduce) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(reduceByKey_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetLocalReduce(), other.isSetLocalReduce());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLocalReduce()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localReduce, other.localReduce);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("reduceByKey_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            if (!first) sb.append(", ");
            sb.append("localReduce:");
            sb.append(this.localReduce);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class reduceByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public reduceByKey_argsStandardScheme getScheme() {
                return new reduceByKey_argsStandardScheme();
            }
        }

        private static class reduceByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reduceByKey_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, reduceByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // LOCAL_REDUCE
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.localReduce = iprot.readBool();
                                struct.setLocalReduceIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, reduceByKey_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(LOCAL_REDUCE_FIELD_DESC);
                oprot.writeBool(struct.localReduce);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class reduceByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public reduceByKey_argsTupleScheme getScheme() {
                return new reduceByKey_argsTupleScheme();
            }
        }

        private static class reduceByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reduceByKey_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, reduceByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(1);
                }
                if (struct.isSetLocalReduce()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
                if (struct.isSetLocalReduce()) {
                    oprot.writeBool(struct.localReduce);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, reduceByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.localReduce = iprot.readBool();
                    struct.setLocalReduceIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class reduceByKey_result implements org.apache.thrift.TBase<reduceByKey_result, reduceByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<reduceByKey_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduceByKey_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reduceByKey_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reduceByKey_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduceByKey_result.class, metaDataMap);
        }

        public reduceByKey_result() {
        }

        public reduceByKey_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reduceByKey_result(reduceByKey_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public reduceByKey_result deepCopy() {
            return new reduceByKey_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public reduceByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof reduceByKey_result)
                return this.equals((reduceByKey_result) that);
            return false;
        }

        public boolean equals(reduceByKey_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(reduceByKey_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("reduceByKey_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class reduceByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public reduceByKey_resultStandardScheme getScheme() {
                return new reduceByKey_resultStandardScheme();
            }
        }

        private static class reduceByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reduceByKey_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, reduceByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, reduceByKey_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class reduceByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public reduceByKey_resultTupleScheme getScheme() {
                return new reduceByKey_resultTupleScheme();
            }
        }

        private static class reduceByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reduceByKey_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, reduceByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, reduceByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class aggregateByKey_args implements org.apache.thrift.TBase<aggregateByKey_args, aggregateByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<aggregateByKey_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregateByKey_args");

        private static final org.apache.thrift.protocol.TField ZERO_FIELD_DESC = new org.apache.thrift.protocol.TField("zero", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField SEQ_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("seqOp", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new aggregateByKey_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new aggregateByKey_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource seqOp; // required
        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ZERO((short) 1, "zero"),
            SEQ_OP((short) 2, "seqOp"),
            NUM_PARTITIONS((short) 3, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ZERO
                        return ZERO;
                    case 2: // SEQ_OP
                        return SEQ_OP;
                    case 3: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ZERO, new org.apache.thrift.meta_data.FieldMetaData("zero", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.SEQ_OP, new org.apache.thrift.meta_data.FieldMetaData("seqOp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregateByKey_args.class, metaDataMap);
        }

        public aggregateByKey_args() {
        }

        public aggregateByKey_args(
                org.ignis.rpc.ISource zero,
                org.ignis.rpc.ISource seqOp,
                long numPartitions) {
            this();
            this.zero = zero;
            this.seqOp = seqOp;
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public aggregateByKey_args(aggregateByKey_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetZero()) {
                this.zero = new org.ignis.rpc.ISource(other.zero);
            }
            if (other.isSetSeqOp()) {
                this.seqOp = new org.ignis.rpc.ISource(other.seqOp);
            }
            this.numPartitions = other.numPartitions;
        }

        public aggregateByKey_args deepCopy() {
            return new aggregateByKey_args(this);
        }

        @Override
        public void clear() {
            this.zero = null;
            this.seqOp = null;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getZero() {
            return this.zero;
        }

        public aggregateByKey_args setZero(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero) {
            this.zero = zero;
            return this;
        }

        public void unsetZero() {
            this.zero = null;
        }

        /** Returns true if field zero is set (has been assigned a value) and false otherwise */
        public boolean isSetZero() {
            return this.zero != null;
        }

        public void setZeroIsSet(boolean value) {
            if (!value) {
                this.zero = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSeqOp() {
            return this.seqOp;
        }

        public aggregateByKey_args setSeqOp(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource seqOp) {
            this.seqOp = seqOp;
            return this;
        }

        public void unsetSeqOp() {
            this.seqOp = null;
        }

        /** Returns true if field seqOp is set (has been assigned a value) and false otherwise */
        public boolean isSetSeqOp() {
            return this.seqOp != null;
        }

        public void setSeqOpIsSet(boolean value) {
            if (!value) {
                this.seqOp = null;
            }
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public aggregateByKey_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ZERO:
                    if (value == null) {
                        unsetZero();
                    } else {
                        setZero((org.ignis.rpc.ISource) value);
                    }
                    break;

                case SEQ_OP:
                    if (value == null) {
                        unsetSeqOp();
                    } else {
                        setSeqOp((org.ignis.rpc.ISource) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ZERO:
                    return getZero();

                case SEQ_OP:
                    return getSeqOp();

                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ZERO:
                    return isSetZero();
                case SEQ_OP:
                    return isSetSeqOp();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof aggregateByKey_args)
                return this.equals((aggregateByKey_args) that);
            return false;
        }

        public boolean equals(aggregateByKey_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_zero = true && this.isSetZero();
            boolean that_present_zero = true && that.isSetZero();
            if (this_present_zero || that_present_zero) {
                if (!(this_present_zero && that_present_zero))
                    return false;
                if (!this.zero.equals(that.zero))
                    return false;
            }

            boolean this_present_seqOp = true && this.isSetSeqOp();
            boolean that_present_seqOp = true && that.isSetSeqOp();
            if (this_present_seqOp || that_present_seqOp) {
                if (!(this_present_seqOp && that_present_seqOp))
                    return false;
                if (!this.seqOp.equals(that.seqOp))
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetZero()) ? 131071 : 524287);
            if (isSetZero())
                hashCode = hashCode * 8191 + zero.hashCode();

            hashCode = hashCode * 8191 + ((isSetSeqOp()) ? 131071 : 524287);
            if (isSetSeqOp())
                hashCode = hashCode * 8191 + seqOp.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(aggregateByKey_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetZero(), other.isSetZero());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetZero()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zero, other.zero);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSeqOp(), other.isSetSeqOp());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSeqOp()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqOp, other.seqOp);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("aggregateByKey_args(");
            boolean first = true;

            sb.append("zero:");
            if (this.zero == null) {
                sb.append("null");
            } else {
                sb.append(this.zero);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("seqOp:");
            if (this.seqOp == null) {
                sb.append("null");
            } else {
                sb.append(this.seqOp);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (zero != null) {
                zero.validate();
            }
            if (seqOp != null) {
                seqOp.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class aggregateByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public aggregateByKey_argsStandardScheme getScheme() {
                return new aggregateByKey_argsStandardScheme();
            }
        }

        private static class aggregateByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<aggregateByKey_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, aggregateByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ZERO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.zero = new org.ignis.rpc.ISource();
                                struct.zero.read(iprot);
                                struct.setZeroIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SEQ_OP
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.seqOp = new org.ignis.rpc.ISource();
                                struct.seqOp.read(iprot);
                                struct.setSeqOpIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, aggregateByKey_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.zero != null) {
                    oprot.writeFieldBegin(ZERO_FIELD_DESC);
                    struct.zero.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.seqOp != null) {
                    oprot.writeFieldBegin(SEQ_OP_FIELD_DESC);
                    struct.seqOp.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class aggregateByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public aggregateByKey_argsTupleScheme getScheme() {
                return new aggregateByKey_argsTupleScheme();
            }
        }

        private static class aggregateByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<aggregateByKey_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, aggregateByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetZero()) {
                    optionals.set(0);
                }
                if (struct.isSetSeqOp()) {
                    optionals.set(1);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetZero()) {
                    struct.zero.write(oprot);
                }
                if (struct.isSetSeqOp()) {
                    struct.seqOp.write(oprot);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, aggregateByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.zero = new org.ignis.rpc.ISource();
                    struct.zero.read(iprot);
                    struct.setZeroIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.seqOp = new org.ignis.rpc.ISource();
                    struct.seqOp.read(iprot);
                    struct.setSeqOpIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class aggregateByKey_result implements org.apache.thrift.TBase<aggregateByKey_result, aggregateByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<aggregateByKey_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregateByKey_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new aggregateByKey_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new aggregateByKey_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregateByKey_result.class, metaDataMap);
        }

        public aggregateByKey_result() {
        }

        public aggregateByKey_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public aggregateByKey_result(aggregateByKey_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public aggregateByKey_result deepCopy() {
            return new aggregateByKey_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public aggregateByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof aggregateByKey_result)
                return this.equals((aggregateByKey_result) that);
            return false;
        }

        public boolean equals(aggregateByKey_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(aggregateByKey_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("aggregateByKey_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class aggregateByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public aggregateByKey_resultStandardScheme getScheme() {
                return new aggregateByKey_resultStandardScheme();
            }
        }

        private static class aggregateByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<aggregateByKey_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, aggregateByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, aggregateByKey_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class aggregateByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public aggregateByKey_resultTupleScheme getScheme() {
                return new aggregateByKey_resultTupleScheme();
            }
        }

        private static class aggregateByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<aggregateByKey_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, aggregateByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, aggregateByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class aggregateByKey4_args implements org.apache.thrift.TBase<aggregateByKey4_args, aggregateByKey4_args._Fields>, java.io.Serializable, Cloneable, Comparable<aggregateByKey4_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregateByKey4_args");

        private static final org.apache.thrift.protocol.TField ZERO_FIELD_DESC = new org.apache.thrift.protocol.TField("zero", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField SEQ_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("seqOp", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField COMB_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("combOp", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new aggregateByKey4_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new aggregateByKey4_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource seqOp; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource combOp; // required
        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ZERO((short) 1, "zero"),
            SEQ_OP((short) 2, "seqOp"),
            COMB_OP((short) 3, "combOp"),
            NUM_PARTITIONS((short) 4, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ZERO
                        return ZERO;
                    case 2: // SEQ_OP
                        return SEQ_OP;
                    case 3: // COMB_OP
                        return COMB_OP;
                    case 4: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ZERO, new org.apache.thrift.meta_data.FieldMetaData("zero", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.SEQ_OP, new org.apache.thrift.meta_data.FieldMetaData("seqOp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.COMB_OP, new org.apache.thrift.meta_data.FieldMetaData("combOp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregateByKey4_args.class, metaDataMap);
        }

        public aggregateByKey4_args() {
        }

        public aggregateByKey4_args(
                org.ignis.rpc.ISource zero,
                org.ignis.rpc.ISource seqOp,
                org.ignis.rpc.ISource combOp,
                long numPartitions) {
            this();
            this.zero = zero;
            this.seqOp = seqOp;
            this.combOp = combOp;
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public aggregateByKey4_args(aggregateByKey4_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetZero()) {
                this.zero = new org.ignis.rpc.ISource(other.zero);
            }
            if (other.isSetSeqOp()) {
                this.seqOp = new org.ignis.rpc.ISource(other.seqOp);
            }
            if (other.isSetCombOp()) {
                this.combOp = new org.ignis.rpc.ISource(other.combOp);
            }
            this.numPartitions = other.numPartitions;
        }

        public aggregateByKey4_args deepCopy() {
            return new aggregateByKey4_args(this);
        }

        @Override
        public void clear() {
            this.zero = null;
            this.seqOp = null;
            this.combOp = null;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getZero() {
            return this.zero;
        }

        public aggregateByKey4_args setZero(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero) {
            this.zero = zero;
            return this;
        }

        public void unsetZero() {
            this.zero = null;
        }

        /** Returns true if field zero is set (has been assigned a value) and false otherwise */
        public boolean isSetZero() {
            return this.zero != null;
        }

        public void setZeroIsSet(boolean value) {
            if (!value) {
                this.zero = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSeqOp() {
            return this.seqOp;
        }

        public aggregateByKey4_args setSeqOp(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource seqOp) {
            this.seqOp = seqOp;
            return this;
        }

        public void unsetSeqOp() {
            this.seqOp = null;
        }

        /** Returns true if field seqOp is set (has been assigned a value) and false otherwise */
        public boolean isSetSeqOp() {
            return this.seqOp != null;
        }

        public void setSeqOpIsSet(boolean value) {
            if (!value) {
                this.seqOp = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getCombOp() {
            return this.combOp;
        }

        public aggregateByKey4_args setCombOp(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource combOp) {
            this.combOp = combOp;
            return this;
        }

        public void unsetCombOp() {
            this.combOp = null;
        }

        /** Returns true if field combOp is set (has been assigned a value) and false otherwise */
        public boolean isSetCombOp() {
            return this.combOp != null;
        }

        public void setCombOpIsSet(boolean value) {
            if (!value) {
                this.combOp = null;
            }
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public aggregateByKey4_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ZERO:
                    if (value == null) {
                        unsetZero();
                    } else {
                        setZero((org.ignis.rpc.ISource) value);
                    }
                    break;

                case SEQ_OP:
                    if (value == null) {
                        unsetSeqOp();
                    } else {
                        setSeqOp((org.ignis.rpc.ISource) value);
                    }
                    break;

                case COMB_OP:
                    if (value == null) {
                        unsetCombOp();
                    } else {
                        setCombOp((org.ignis.rpc.ISource) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ZERO:
                    return getZero();

                case SEQ_OP:
                    return getSeqOp();

                case COMB_OP:
                    return getCombOp();

                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ZERO:
                    return isSetZero();
                case SEQ_OP:
                    return isSetSeqOp();
                case COMB_OP:
                    return isSetCombOp();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof aggregateByKey4_args)
                return this.equals((aggregateByKey4_args) that);
            return false;
        }

        public boolean equals(aggregateByKey4_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_zero = true && this.isSetZero();
            boolean that_present_zero = true && that.isSetZero();
            if (this_present_zero || that_present_zero) {
                if (!(this_present_zero && that_present_zero))
                    return false;
                if (!this.zero.equals(that.zero))
                    return false;
            }

            boolean this_present_seqOp = true && this.isSetSeqOp();
            boolean that_present_seqOp = true && that.isSetSeqOp();
            if (this_present_seqOp || that_present_seqOp) {
                if (!(this_present_seqOp && that_present_seqOp))
                    return false;
                if (!this.seqOp.equals(that.seqOp))
                    return false;
            }

            boolean this_present_combOp = true && this.isSetCombOp();
            boolean that_present_combOp = true && that.isSetCombOp();
            if (this_present_combOp || that_present_combOp) {
                if (!(this_present_combOp && that_present_combOp))
                    return false;
                if (!this.combOp.equals(that.combOp))
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetZero()) ? 131071 : 524287);
            if (isSetZero())
                hashCode = hashCode * 8191 + zero.hashCode();

            hashCode = hashCode * 8191 + ((isSetSeqOp()) ? 131071 : 524287);
            if (isSetSeqOp())
                hashCode = hashCode * 8191 + seqOp.hashCode();

            hashCode = hashCode * 8191 + ((isSetCombOp()) ? 131071 : 524287);
            if (isSetCombOp())
                hashCode = hashCode * 8191 + combOp.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(aggregateByKey4_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetZero(), other.isSetZero());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetZero()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zero, other.zero);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSeqOp(), other.isSetSeqOp());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSeqOp()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqOp, other.seqOp);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetCombOp(), other.isSetCombOp());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCombOp()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combOp, other.combOp);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("aggregateByKey4_args(");
            boolean first = true;

            sb.append("zero:");
            if (this.zero == null) {
                sb.append("null");
            } else {
                sb.append(this.zero);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("seqOp:");
            if (this.seqOp == null) {
                sb.append("null");
            } else {
                sb.append(this.seqOp);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("combOp:");
            if (this.combOp == null) {
                sb.append("null");
            } else {
                sb.append(this.combOp);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (zero != null) {
                zero.validate();
            }
            if (seqOp != null) {
                seqOp.validate();
            }
            if (combOp != null) {
                combOp.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class aggregateByKey4_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public aggregateByKey4_argsStandardScheme getScheme() {
                return new aggregateByKey4_argsStandardScheme();
            }
        }

        private static class aggregateByKey4_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<aggregateByKey4_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, aggregateByKey4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ZERO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.zero = new org.ignis.rpc.ISource();
                                struct.zero.read(iprot);
                                struct.setZeroIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SEQ_OP
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.seqOp = new org.ignis.rpc.ISource();
                                struct.seqOp.read(iprot);
                                struct.setSeqOpIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMB_OP
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.combOp = new org.ignis.rpc.ISource();
                                struct.combOp.read(iprot);
                                struct.setCombOpIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, aggregateByKey4_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.zero != null) {
                    oprot.writeFieldBegin(ZERO_FIELD_DESC);
                    struct.zero.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.seqOp != null) {
                    oprot.writeFieldBegin(SEQ_OP_FIELD_DESC);
                    struct.seqOp.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.combOp != null) {
                    oprot.writeFieldBegin(COMB_OP_FIELD_DESC);
                    struct.combOp.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class aggregateByKey4_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public aggregateByKey4_argsTupleScheme getScheme() {
                return new aggregateByKey4_argsTupleScheme();
            }
        }

        private static class aggregateByKey4_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<aggregateByKey4_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, aggregateByKey4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetZero()) {
                    optionals.set(0);
                }
                if (struct.isSetSeqOp()) {
                    optionals.set(1);
                }
                if (struct.isSetCombOp()) {
                    optionals.set(2);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetZero()) {
                    struct.zero.write(oprot);
                }
                if (struct.isSetSeqOp()) {
                    struct.seqOp.write(oprot);
                }
                if (struct.isSetCombOp()) {
                    struct.combOp.write(oprot);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, aggregateByKey4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.zero = new org.ignis.rpc.ISource();
                    struct.zero.read(iprot);
                    struct.setZeroIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.seqOp = new org.ignis.rpc.ISource();
                    struct.seqOp.read(iprot);
                    struct.setSeqOpIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.combOp = new org.ignis.rpc.ISource();
                    struct.combOp.read(iprot);
                    struct.setCombOpIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class aggregateByKey4_result implements org.apache.thrift.TBase<aggregateByKey4_result, aggregateByKey4_result._Fields>, java.io.Serializable, Cloneable, Comparable<aggregateByKey4_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aggregateByKey4_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new aggregateByKey4_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new aggregateByKey4_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aggregateByKey4_result.class, metaDataMap);
        }

        public aggregateByKey4_result() {
        }

        public aggregateByKey4_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public aggregateByKey4_result(aggregateByKey4_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public aggregateByKey4_result deepCopy() {
            return new aggregateByKey4_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public aggregateByKey4_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof aggregateByKey4_result)
                return this.equals((aggregateByKey4_result) that);
            return false;
        }

        public boolean equals(aggregateByKey4_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(aggregateByKey4_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("aggregateByKey4_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class aggregateByKey4_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public aggregateByKey4_resultStandardScheme getScheme() {
                return new aggregateByKey4_resultStandardScheme();
            }
        }

        private static class aggregateByKey4_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<aggregateByKey4_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, aggregateByKey4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, aggregateByKey4_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class aggregateByKey4_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public aggregateByKey4_resultTupleScheme getScheme() {
                return new aggregateByKey4_resultTupleScheme();
            }
        }

        private static class aggregateByKey4_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<aggregateByKey4_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, aggregateByKey4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, aggregateByKey4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class foldByKey_args implements org.apache.thrift.TBase<foldByKey_args, foldByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<foldByKey_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("foldByKey_args");

        private static final org.apache.thrift.protocol.TField ZERO_FIELD_DESC = new org.apache.thrift.protocol.TField("zero", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 3);
        private static final org.apache.thrift.protocol.TField LOCAL_FOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("localFold", org.apache.thrift.protocol.TType.BOOL, (short) 4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new foldByKey_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new foldByKey_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
        private long numPartitions; // required
        private boolean localFold; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ZERO((short) 1, "zero"),
            SRC((short) 2, "src"),
            NUM_PARTITIONS((short) 3, "numPartitions"),
            LOCAL_FOLD((short) 4, "localFold");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ZERO
                        return ZERO;
                    case 2: // SRC
                        return SRC;
                    case 3: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    case 4: // LOCAL_FOLD
                        return LOCAL_FOLD;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __NUMPARTITIONS_ISSET_ID = 0;
        private static final int __LOCALFOLD_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ZERO, new org.apache.thrift.meta_data.FieldMetaData("zero", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.LOCAL_FOLD, new org.apache.thrift.meta_data.FieldMetaData("localFold", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(foldByKey_args.class, metaDataMap);
        }

        public foldByKey_args() {
        }

        public foldByKey_args(
                org.ignis.rpc.ISource zero,
                org.ignis.rpc.ISource src,
                long numPartitions,
                boolean localFold) {
            this();
            this.zero = zero;
            this.src = src;
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            this.localFold = localFold;
            setLocalFoldIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public foldByKey_args(foldByKey_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetZero()) {
                this.zero = new org.ignis.rpc.ISource(other.zero);
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
            this.numPartitions = other.numPartitions;
            this.localFold = other.localFold;
        }

        public foldByKey_args deepCopy() {
            return new foldByKey_args(this);
        }

        @Override
        public void clear() {
            this.zero = null;
            this.src = null;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
            setLocalFoldIsSet(false);
            this.localFold = false;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getZero() {
            return this.zero;
        }

        public foldByKey_args setZero(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource zero) {
            this.zero = zero;
            return this;
        }

        public void unsetZero() {
            this.zero = null;
        }

        /** Returns true if field zero is set (has been assigned a value) and false otherwise */
        public boolean isSetZero() {
            return this.zero != null;
        }

        public void setZeroIsSet(boolean value) {
            if (!value) {
                this.zero = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public foldByKey_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public foldByKey_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public boolean isLocalFold() {
            return this.localFold;
        }

        public foldByKey_args setLocalFold(boolean localFold) {
            this.localFold = localFold;
            setLocalFoldIsSet(true);
            return this;
        }

        public void unsetLocalFold() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCALFOLD_ISSET_ID);
        }

        /** Returns true if field localFold is set (has been assigned a value) and false otherwise */
        public boolean isSetLocalFold() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCALFOLD_ISSET_ID);
        }

        public void setLocalFoldIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCALFOLD_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ZERO:
                    if (value == null) {
                        unsetZero();
                    } else {
                        setZero((org.ignis.rpc.ISource) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

                case LOCAL_FOLD:
                    if (value == null) {
                        unsetLocalFold();
                    } else {
                        setLocalFold((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ZERO:
                    return getZero();

                case SRC:
                    return getSrc();

                case NUM_PARTITIONS:
                    return getNumPartitions();

                case LOCAL_FOLD:
                    return isLocalFold();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ZERO:
                    return isSetZero();
                case SRC:
                    return isSetSrc();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
                case LOCAL_FOLD:
                    return isSetLocalFold();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof foldByKey_args)
                return this.equals((foldByKey_args) that);
            return false;
        }

        public boolean equals(foldByKey_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_zero = true && this.isSetZero();
            boolean that_present_zero = true && that.isSetZero();
            if (this_present_zero || that_present_zero) {
                if (!(this_present_zero && that_present_zero))
                    return false;
                if (!this.zero.equals(that.zero))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            boolean this_present_localFold = true;
            boolean that_present_localFold = true;
            if (this_present_localFold || that_present_localFold) {
                if (!(this_present_localFold && that_present_localFold))
                    return false;
                if (this.localFold != that.localFold)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetZero()) ? 131071 : 524287);
            if (isSetZero())
                hashCode = hashCode * 8191 + zero.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            hashCode = hashCode * 8191 + ((localFold) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(foldByKey_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetZero(), other.isSetZero());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetZero()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zero, other.zero);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetLocalFold(), other.isSetLocalFold());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLocalFold()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localFold, other.localFold);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("foldByKey_args(");
            boolean first = true;

            sb.append("zero:");
            if (this.zero == null) {
                sb.append("null");
            } else {
                sb.append(this.zero);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            if (!first) sb.append(", ");
            sb.append("localFold:");
            sb.append(this.localFold);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (zero != null) {
                zero.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class foldByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public foldByKey_argsStandardScheme getScheme() {
                return new foldByKey_argsStandardScheme();
            }
        }

        private static class foldByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<foldByKey_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, foldByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ZERO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.zero = new org.ignis.rpc.ISource();
                                struct.zero.read(iprot);
                                struct.setZeroIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // LOCAL_FOLD
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.localFold = iprot.readBool();
                                struct.setLocalFoldIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, foldByKey_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.zero != null) {
                    oprot.writeFieldBegin(ZERO_FIELD_DESC);
                    struct.zero.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(LOCAL_FOLD_FIELD_DESC);
                oprot.writeBool(struct.localFold);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class foldByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public foldByKey_argsTupleScheme getScheme() {
                return new foldByKey_argsTupleScheme();
            }
        }

        private static class foldByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<foldByKey_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, foldByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetZero()) {
                    optionals.set(0);
                }
                if (struct.isSetSrc()) {
                    optionals.set(1);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(2);
                }
                if (struct.isSetLocalFold()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetZero()) {
                    struct.zero.write(oprot);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
                if (struct.isSetLocalFold()) {
                    oprot.writeBool(struct.localFold);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, foldByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.zero = new org.ignis.rpc.ISource();
                    struct.zero.read(iprot);
                    struct.setZeroIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.localFold = iprot.readBool();
                    struct.setLocalFoldIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class foldByKey_result implements org.apache.thrift.TBase<foldByKey_result, foldByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<foldByKey_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("foldByKey_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new foldByKey_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new foldByKey_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(foldByKey_result.class, metaDataMap);
        }

        public foldByKey_result() {
        }

        public foldByKey_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public foldByKey_result(foldByKey_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public foldByKey_result deepCopy() {
            return new foldByKey_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public foldByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof foldByKey_result)
                return this.equals((foldByKey_result) that);
            return false;
        }

        public boolean equals(foldByKey_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(foldByKey_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("foldByKey_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class foldByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public foldByKey_resultStandardScheme getScheme() {
                return new foldByKey_resultStandardScheme();
            }
        }

        private static class foldByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<foldByKey_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, foldByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, foldByKey_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class foldByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public foldByKey_resultTupleScheme getScheme() {
                return new foldByKey_resultTupleScheme();
            }
        }

        private static class foldByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<foldByKey_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, foldByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, foldByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortByKey_args implements org.apache.thrift.TBase<sortByKey_args, sortByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey_args");

        private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey_argsTupleSchemeFactory();

        private boolean ascending; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASCENDING((short) 1, "ascending");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ASCENDING
                        return ASCENDING;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ASCENDING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey_args.class, metaDataMap);
        }

        public sortByKey_args() {
        }

        public sortByKey_args(
                boolean ascending) {
            this();
            this.ascending = ascending;
            setAscendingIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortByKey_args(sortByKey_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.ascending = other.ascending;
        }

        public sortByKey_args deepCopy() {
            return new sortByKey_args(this);
        }

        @Override
        public void clear() {
            setAscendingIsSet(false);
            this.ascending = false;
        }

        public boolean isAscending() {
            return this.ascending;
        }

        public sortByKey_args setAscending(boolean ascending) {
            this.ascending = ascending;
            setAscendingIsSet(true);
            return this;
        }

        public void unsetAscending() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
        public boolean isSetAscending() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        public void setAscendingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ASCENDING:
                    if (value == null) {
                        unsetAscending();
                    } else {
                        setAscending((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ASCENDING:
                    return isAscending();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ASCENDING:
                    return isSetAscending();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortByKey_args)
                return this.equals((sortByKey_args) that);
            return false;
        }

        public boolean equals(sortByKey_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ascending = true;
            boolean that_present_ascending = true;
            if (this_present_ascending || that_present_ascending) {
                if (!(this_present_ascending && that_present_ascending))
                    return false;
                if (this.ascending != that.ascending)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(sortByKey_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetAscending(), other.isSetAscending());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAscending()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey_args(");
            boolean first = true;

            sb.append("ascending:");
            sb.append(this.ascending);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey_argsStandardScheme getScheme() {
                return new sortByKey_argsStandardScheme();
            }
        }

        private static class sortByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ASCENDING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.ascending = iprot.readBool();
                                struct.setAscendingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
                oprot.writeBool(struct.ascending);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey_argsTupleScheme getScheme() {
                return new sortByKey_argsTupleScheme();
            }
        }

        private static class sortByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAscending()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAscending()) {
                    oprot.writeBool(struct.ascending);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ascending = iprot.readBool();
                    struct.setAscendingIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortByKey_result implements org.apache.thrift.TBase<sortByKey_result, sortByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey_result.class, metaDataMap);
        }

        public sortByKey_result() {
        }

        public sortByKey_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortByKey_result(sortByKey_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sortByKey_result deepCopy() {
            return new sortByKey_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sortByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortByKey_result)
                return this.equals((sortByKey_result) that);
            return false;
        }

        public boolean equals(sortByKey_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sortByKey_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey_resultStandardScheme getScheme() {
                return new sortByKey_resultStandardScheme();
            }
        }

        private static class sortByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey_resultTupleScheme getScheme() {
                return new sortByKey_resultTupleScheme();
            }
        }

        private static class sortByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortByKey2a_args implements org.apache.thrift.TBase<sortByKey2a_args, sortByKey2a_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey2a_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey2a_args");

        private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short) 1);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey2a_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey2a_argsTupleSchemeFactory();

        private boolean ascending; // required
        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ASCENDING((short) 1, "ascending"),
            NUM_PARTITIONS((short) 2, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ASCENDING
                        return ASCENDING;
                    case 2: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ASCENDING_ISSET_ID = 0;
        private static final int __NUMPARTITIONS_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey2a_args.class, metaDataMap);
        }

        public sortByKey2a_args() {
        }

        public sortByKey2a_args(
                boolean ascending,
                long numPartitions) {
            this();
            this.ascending = ascending;
            setAscendingIsSet(true);
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortByKey2a_args(sortByKey2a_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.ascending = other.ascending;
            this.numPartitions = other.numPartitions;
        }

        public sortByKey2a_args deepCopy() {
            return new sortByKey2a_args(this);
        }

        @Override
        public void clear() {
            setAscendingIsSet(false);
            this.ascending = false;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        public boolean isAscending() {
            return this.ascending;
        }

        public sortByKey2a_args setAscending(boolean ascending) {
            this.ascending = ascending;
            setAscendingIsSet(true);
            return this;
        }

        public void unsetAscending() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
        public boolean isSetAscending() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        public void setAscendingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public sortByKey2a_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ASCENDING:
                    if (value == null) {
                        unsetAscending();
                    } else {
                        setAscending((java.lang.Boolean) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ASCENDING:
                    return isAscending();

                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ASCENDING:
                    return isSetAscending();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortByKey2a_args)
                return this.equals((sortByKey2a_args) that);
            return false;
        }

        public boolean equals(sortByKey2a_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ascending = true;
            boolean that_present_ascending = true;
            if (this_present_ascending || that_present_ascending) {
                if (!(this_present_ascending && that_present_ascending))
                    return false;
                if (this.ascending != that.ascending)
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(sortByKey2a_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetAscending(), other.isSetAscending());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAscending()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey2a_args(");
            boolean first = true;

            sb.append("ascending:");
            sb.append(this.ascending);
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortByKey2a_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey2a_argsStandardScheme getScheme() {
                return new sortByKey2a_argsStandardScheme();
            }
        }

        private static class sortByKey2a_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey2a_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey2a_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ASCENDING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.ascending = iprot.readBool();
                                struct.setAscendingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey2a_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
                oprot.writeBool(struct.ascending);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortByKey2a_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey2a_argsTupleScheme getScheme() {
                return new sortByKey2a_argsTupleScheme();
            }
        }

        private static class sortByKey2a_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey2a_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey2a_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAscending()) {
                    optionals.set(0);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetAscending()) {
                    oprot.writeBool(struct.ascending);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey2a_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.ascending = iprot.readBool();
                    struct.setAscendingIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortByKey2a_result implements org.apache.thrift.TBase<sortByKey2a_result, sortByKey2a_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey2a_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey2a_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey2a_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey2a_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey2a_result.class, metaDataMap);
        }

        public sortByKey2a_result() {
        }

        public sortByKey2a_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortByKey2a_result(sortByKey2a_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sortByKey2a_result deepCopy() {
            return new sortByKey2a_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sortByKey2a_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortByKey2a_result)
                return this.equals((sortByKey2a_result) that);
            return false;
        }

        public boolean equals(sortByKey2a_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sortByKey2a_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey2a_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortByKey2a_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey2a_resultStandardScheme getScheme() {
                return new sortByKey2a_resultStandardScheme();
            }
        }

        private static class sortByKey2a_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey2a_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey2a_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey2a_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortByKey2a_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey2a_resultTupleScheme getScheme() {
                return new sortByKey2a_resultTupleScheme();
            }
        }

        private static class sortByKey2a_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey2a_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey2a_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey2a_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortByKey2b_args implements org.apache.thrift.TBase<sortByKey2b_args, sortByKey2b_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey2b_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey2b_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey2b_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey2b_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
        private boolean ascending; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src"),
            ASCENDING((short) 2, "ascending");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    case 2: // ASCENDING
                        return ASCENDING;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ASCENDING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey2b_args.class, metaDataMap);
        }

        public sortByKey2b_args() {
        }

        public sortByKey2b_args(
                org.ignis.rpc.ISource src,
                boolean ascending) {
            this();
            this.src = src;
            this.ascending = ascending;
            setAscendingIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortByKey2b_args(sortByKey2b_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
            this.ascending = other.ascending;
        }

        public sortByKey2b_args deepCopy() {
            return new sortByKey2b_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
            setAscendingIsSet(false);
            this.ascending = false;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public sortByKey2b_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public boolean isAscending() {
            return this.ascending;
        }

        public sortByKey2b_args setAscending(boolean ascending) {
            this.ascending = ascending;
            setAscendingIsSet(true);
            return this;
        }

        public void unsetAscending() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
        public boolean isSetAscending() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        public void setAscendingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

                case ASCENDING:
                    if (value == null) {
                        unsetAscending();
                    } else {
                        setAscending((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

                case ASCENDING:
                    return isAscending();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
                case ASCENDING:
                    return isSetAscending();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortByKey2b_args)
                return this.equals((sortByKey2b_args) that);
            return false;
        }

        public boolean equals(sortByKey2b_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            boolean this_present_ascending = true;
            boolean that_present_ascending = true;
            if (this_present_ascending || that_present_ascending) {
                if (!(this_present_ascending && that_present_ascending))
                    return false;
                if (this.ascending != that.ascending)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(sortByKey2b_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetAscending(), other.isSetAscending());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAscending()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey2b_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ascending:");
            sb.append(this.ascending);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortByKey2b_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey2b_argsStandardScheme getScheme() {
                return new sortByKey2b_argsStandardScheme();
            }
        }

        private static class sortByKey2b_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey2b_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey2b_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ASCENDING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.ascending = iprot.readBool();
                                struct.setAscendingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey2b_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
                oprot.writeBool(struct.ascending);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortByKey2b_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey2b_argsTupleScheme getScheme() {
                return new sortByKey2b_argsTupleScheme();
            }
        }

        private static class sortByKey2b_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey2b_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey2b_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                if (struct.isSetAscending()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
                if (struct.isSetAscending()) {
                    oprot.writeBool(struct.ascending);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey2b_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ascending = iprot.readBool();
                    struct.setAscendingIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortByKey2b_result implements org.apache.thrift.TBase<sortByKey2b_result, sortByKey2b_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey2b_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey2b_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey2b_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey2b_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey2b_result.class, metaDataMap);
        }

        public sortByKey2b_result() {
        }

        public sortByKey2b_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortByKey2b_result(sortByKey2b_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sortByKey2b_result deepCopy() {
            return new sortByKey2b_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sortByKey2b_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortByKey2b_result)
                return this.equals((sortByKey2b_result) that);
            return false;
        }

        public boolean equals(sortByKey2b_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sortByKey2b_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey2b_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortByKey2b_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey2b_resultStandardScheme getScheme() {
                return new sortByKey2b_resultStandardScheme();
            }
        }

        private static class sortByKey2b_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey2b_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey2b_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey2b_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortByKey2b_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey2b_resultTupleScheme getScheme() {
                return new sortByKey2b_resultTupleScheme();
            }
        }

        private static class sortByKey2b_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey2b_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey2b_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey2b_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortByKey3_args implements org.apache.thrift.TBase<sortByKey3_args, sortByKey3_args._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey3_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey3_args");

        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ascending", org.apache.thrift.protocol.TType.BOOL, (short) 2);
        private static final org.apache.thrift.protocol.TField NUM_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numPartitions", org.apache.thrift.protocol.TType.I64, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey3_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey3_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required
        private boolean ascending; // required
        private long numPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC((short) 1, "src"),
            ASCENDING((short) 2, "ascending"),
            NUM_PARTITIONS((short) 3, "numPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC
                        return SRC;
                    case 2: // ASCENDING
                        return ASCENDING;
                    case 3: // NUM_PARTITIONS
                        return NUM_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ASCENDING_ISSET_ID = 0;
        private static final int __NUMPARTITIONS_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("ascending", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.NUM_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("numPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey3_args.class, metaDataMap);
        }

        public sortByKey3_args() {
        }

        public sortByKey3_args(
                org.ignis.rpc.ISource src,
                boolean ascending,
                long numPartitions) {
            this();
            this.src = src;
            this.ascending = ascending;
            setAscendingIsSet(true);
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortByKey3_args(sortByKey3_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
            this.ascending = other.ascending;
            this.numPartitions = other.numPartitions;
        }

        public sortByKey3_args deepCopy() {
            return new sortByKey3_args(this);
        }

        @Override
        public void clear() {
            this.src = null;
            setAscendingIsSet(false);
            this.ascending = false;
            setNumPartitionsIsSet(false);
            this.numPartitions = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public sortByKey3_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public boolean isAscending() {
            return this.ascending;
        }

        public sortByKey3_args setAscending(boolean ascending) {
            this.ascending = ascending;
            setAscendingIsSet(true);
            return this;
        }

        public void unsetAscending() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        /** Returns true if field ascending is set (has been assigned a value) and false otherwise */
        public boolean isSetAscending() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCENDING_ISSET_ID);
        }

        public void setAscendingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCENDING_ISSET_ID, value);
        }

        public long getNumPartitions() {
            return this.numPartitions;
        }

        public sortByKey3_args setNumPartitions(long numPartitions) {
            this.numPartitions = numPartitions;
            setNumPartitionsIsSet(true);
            return this;
        }

        public void unsetNumPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        /** Returns true if field numPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetNumPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID);
        }

        public void setNumPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

                case ASCENDING:
                    if (value == null) {
                        unsetAscending();
                    } else {
                        setAscending((java.lang.Boolean) value);
                    }
                    break;

                case NUM_PARTITIONS:
                    if (value == null) {
                        unsetNumPartitions();
                    } else {
                        setNumPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC:
                    return getSrc();

                case ASCENDING:
                    return isAscending();

                case NUM_PARTITIONS:
                    return getNumPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SRC:
                    return isSetSrc();
                case ASCENDING:
                    return isSetAscending();
                case NUM_PARTITIONS:
                    return isSetNumPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortByKey3_args)
                return this.equals((sortByKey3_args) that);
            return false;
        }

        public boolean equals(sortByKey3_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            boolean this_present_ascending = true;
            boolean that_present_ascending = true;
            if (this_present_ascending || that_present_ascending) {
                if (!(this_present_ascending && that_present_ascending))
                    return false;
                if (this.ascending != that.ascending)
                    return false;
            }

            boolean this_present_numPartitions = true;
            boolean that_present_numPartitions = true;
            if (this_present_numPartitions || that_present_numPartitions) {
                if (!(this_present_numPartitions && that_present_numPartitions))
                    return false;
                if (this.numPartitions != that.numPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            hashCode = hashCode * 8191 + ((ascending) ? 131071 : 524287);

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(sortByKey3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetAscending(), other.isSetAscending());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAscending()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ascending, other.ascending);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNumPartitions(), other.isSetNumPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNumPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPartitions, other.numPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey3_args(");
            boolean first = true;

            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ascending:");
            sb.append(this.ascending);
            first = false;
            if (!first) sb.append(", ");
            sb.append("numPartitions:");
            sb.append(this.numPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortByKey3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey3_argsStandardScheme getScheme() {
                return new sortByKey3_argsStandardScheme();
            }
        }

        private static class sortByKey3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ASCENDING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.ascending = iprot.readBool();
                                struct.setAscendingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // NUM_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.numPartitions = iprot.readI64();
                                struct.setNumPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ASCENDING_FIELD_DESC);
                oprot.writeBool(struct.ascending);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(NUM_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.numPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortByKey3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey3_argsTupleScheme getScheme() {
                return new sortByKey3_argsTupleScheme();
            }
        }

        private static class sortByKey3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSrc()) {
                    optionals.set(0);
                }
                if (struct.isSetAscending()) {
                    optionals.set(1);
                }
                if (struct.isSetNumPartitions()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
                if (struct.isSetAscending()) {
                    oprot.writeBool(struct.ascending);
                }
                if (struct.isSetNumPartitions()) {
                    oprot.writeI64(struct.numPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ascending = iprot.readBool();
                    struct.setAscendingIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.numPartitions = iprot.readI64();
                    struct.setNumPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sortByKey3_result implements org.apache.thrift.TBase<sortByKey3_result, sortByKey3_result._Fields>, java.io.Serializable, Cloneable, Comparable<sortByKey3_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sortByKey3_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sortByKey3_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sortByKey3_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sortByKey3_result.class, metaDataMap);
        }

        public sortByKey3_result() {
        }

        public sortByKey3_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sortByKey3_result(sortByKey3_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sortByKey3_result deepCopy() {
            return new sortByKey3_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sortByKey3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sortByKey3_result)
                return this.equals((sortByKey3_result) that);
            return false;
        }

        public boolean equals(sortByKey3_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sortByKey3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sortByKey3_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sortByKey3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey3_resultStandardScheme getScheme() {
                return new sortByKey3_resultStandardScheme();
            }
        }

        private static class sortByKey3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sortByKey3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sortByKey3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sortByKey3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sortByKey3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sortByKey3_resultTupleScheme getScheme() {
                return new sortByKey3_resultTupleScheme();
            }
        }

        private static class sortByKey3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sortByKey3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sortByKey3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sortByKey3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
