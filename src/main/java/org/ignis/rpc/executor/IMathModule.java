/**
 * Autogenerated by Thrift Compiler (0.15.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.ignis.rpc.executor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IMathModule {

    public interface Iface {

        public void sample(boolean withReplacement, java.util.List<java.lang.Long> num, int seed) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public long count() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void max() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void min() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void max1(org.ignis.rpc.ISource cmp) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void min1(org.ignis.rpc.ISource cmp) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void sampleByKey(boolean withReplacement, org.ignis.rpc.ISource fractions, int seed) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void countByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

        public void countByValue() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void sample(boolean withReplacement, java.util.List<java.lang.Long> num, int seed, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void count(org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

        public void max(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void min(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void max1(org.ignis.rpc.ISource cmp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void min1(org.ignis.rpc.ISource cmp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void sampleByKey(boolean withReplacement, org.ignis.rpc.ISource fractions, int seed, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void countByKey(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void countByValue(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void sample(boolean withReplacement, java.util.List<java.lang.Long> num, int seed) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sample(withReplacement, num, seed);
            recv_sample();
        }

        public void send_sample(boolean withReplacement, java.util.List<java.lang.Long> num, int seed) throws org.apache.thrift.TException {
            sample_args args = new sample_args();
            args.setWithReplacement(withReplacement);
            args.setNum(num);
            args.setSeed(seed);
            sendBase("sample", args);
        }

        public void recv_sample() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sample_result result = new sample_result();
            receiveBase(result, "sample");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public long count() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_count();
            return recv_count();
        }

        public void send_count() throws org.apache.thrift.TException {
            count_args args = new count_args();
            sendBase("count", args);
        }

        public long recv_count() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            count_result result = new count_result();
            receiveBase(result, "count");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "count failed: unknown result");
        }

        public void max() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_max();
            recv_max();
        }

        public void send_max() throws org.apache.thrift.TException {
            max_args args = new max_args();
            sendBase("max", args);
        }

        public void recv_max() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            max_result result = new max_result();
            receiveBase(result, "max");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void min() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_min();
            recv_min();
        }

        public void send_min() throws org.apache.thrift.TException {
            min_args args = new min_args();
            sendBase("min", args);
        }

        public void recv_min() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            min_result result = new min_result();
            receiveBase(result, "min");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void max1(org.ignis.rpc.ISource cmp) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_max1(cmp);
            recv_max1();
        }

        public void send_max1(org.ignis.rpc.ISource cmp) throws org.apache.thrift.TException {
            max1_args args = new max1_args();
            args.setCmp(cmp);
            sendBase("max1", args);
        }

        public void recv_max1() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            max1_result result = new max1_result();
            receiveBase(result, "max1");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void min1(org.ignis.rpc.ISource cmp) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_min1(cmp);
            recv_min1();
        }

        public void send_min1(org.ignis.rpc.ISource cmp) throws org.apache.thrift.TException {
            min1_args args = new min1_args();
            args.setCmp(cmp);
            sendBase("min1", args);
        }

        public void recv_min1() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            min1_result result = new min1_result();
            receiveBase(result, "min1");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sampleByKey(boolean withReplacement, org.ignis.rpc.ISource fractions, int seed) throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_sampleByKey(withReplacement, fractions, seed);
            recv_sampleByKey();
        }

        public void send_sampleByKey(boolean withReplacement, org.ignis.rpc.ISource fractions, int seed) throws org.apache.thrift.TException {
            sampleByKey_args args = new sampleByKey_args();
            args.setWithReplacement(withReplacement);
            args.setFractions(fractions);
            args.setSeed(seed);
            sendBase("sampleByKey", args);
        }

        public void recv_sampleByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            sampleByKey_result result = new sampleByKey_result();
            receiveBase(result, "sampleByKey");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void countByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_countByKey();
            recv_countByKey();
        }

        public void send_countByKey() throws org.apache.thrift.TException {
            countByKey_args args = new countByKey_args();
            sendBase("countByKey", args);
        }

        public void recv_countByKey() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            countByKey_result result = new countByKey_result();
            receiveBase(result, "countByKey");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void countByValue() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            send_countByValue();
            recv_countByValue();
        }

        public void send_countByValue() throws org.apache.thrift.TException {
            countByValue_args args = new countByValue_args();
            sendBase("countByValue", args);
        }

        public void recv_countByValue() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
            countByValue_result result = new countByValue_result();
            receiveBase(result, "countByValue");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void sample(boolean withReplacement, java.util.List<java.lang.Long> num, int seed, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sample_call method_call = new sample_call(withReplacement, num, seed, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sample_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private boolean withReplacement;
            private java.util.List<java.lang.Long> num;
            private int seed;

            public sample_call(boolean withReplacement, java.util.List<java.lang.Long> num, int seed, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.withReplacement = withReplacement;
                this.num = num;
                this.seed = seed;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sample", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sample_args args = new sample_args();
                args.setWithReplacement(withReplacement);
                args.setNum(num);
                args.setSeed(seed);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void count(org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            count_call method_call = new count_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class count_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
            public count_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("count", org.apache.thrift.protocol.TMessageType.CALL, 0));
                count_args args = new count_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Long getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_count();
            }
        }

        public void max(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            max_call method_call = new max_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class max_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            public max_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("max", org.apache.thrift.protocol.TMessageType.CALL, 0));
                max_args args = new max_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void min(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            min_call method_call = new min_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class min_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            public min_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("min", org.apache.thrift.protocol.TMessageType.CALL, 0));
                min_args args = new min_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void max1(org.ignis.rpc.ISource cmp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            max1_call method_call = new max1_call(cmp, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class max1_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource cmp;

            public max1_call(org.ignis.rpc.ISource cmp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.cmp = cmp;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("max1", org.apache.thrift.protocol.TMessageType.CALL, 0));
                max1_args args = new max1_args();
                args.setCmp(cmp);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void min1(org.ignis.rpc.ISource cmp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            min1_call method_call = new min1_call(cmp, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class min1_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private org.ignis.rpc.ISource cmp;

            public min1_call(org.ignis.rpc.ISource cmp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.cmp = cmp;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("min1", org.apache.thrift.protocol.TMessageType.CALL, 0));
                min1_args args = new min1_args();
                args.setCmp(cmp);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void sampleByKey(boolean withReplacement, org.ignis.rpc.ISource fractions, int seed, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sampleByKey_call method_call = new sampleByKey_call(withReplacement, fractions, seed, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sampleByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private boolean withReplacement;
            private org.ignis.rpc.ISource fractions;
            private int seed;

            public sampleByKey_call(boolean withReplacement, org.ignis.rpc.ISource fractions, int seed, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.withReplacement = withReplacement;
                this.fractions = fractions;
                this.seed = seed;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sampleByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sampleByKey_args args = new sampleByKey_args();
                args.setWithReplacement(withReplacement);
                args.setFractions(fractions);
                args.setSeed(seed);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void countByKey(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            countByKey_call method_call = new countByKey_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class countByKey_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            public countByKey_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countByKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
                countByKey_args args = new countByKey_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void countByValue(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            countByValue_call method_call = new countByValue_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class countByValue_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            public countByValue_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countByValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
                countByValue_args args = new countByValue_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.IExecutorException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("sample", new sample());
            processMap.put("count", new count());
            processMap.put("max", new max());
            processMap.put("min", new min());
            processMap.put("max1", new max1());
            processMap.put("min1", new min1());
            processMap.put("sampleByKey", new sampleByKey());
            processMap.put("countByKey", new countByKey());
            processMap.put("countByValue", new countByValue());
            return processMap;
        }

        public static class sample<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sample_args> {
            public sample() {
                super("sample");
            }

            public sample_args getEmptyArgsInstance() {
                return new sample_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sample_result getResult(I iface, sample_args args) throws org.apache.thrift.TException {
                sample_result result = new sample_result();
                try {
                    iface.sample(args.withReplacement, args.num, args.seed);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class count<I extends Iface> extends org.apache.thrift.ProcessFunction<I, count_args> {
            public count() {
                super("count");
            }

            public count_args getEmptyArgsInstance() {
                return new count_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public count_result getResult(I iface, count_args args) throws org.apache.thrift.TException {
                count_result result = new count_result();
                try {
                    result.success = iface.count();
                    result.setSuccessIsSet(true);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class max<I extends Iface> extends org.apache.thrift.ProcessFunction<I, max_args> {
            public max() {
                super("max");
            }

            public max_args getEmptyArgsInstance() {
                return new max_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public max_result getResult(I iface, max_args args) throws org.apache.thrift.TException {
                max_result result = new max_result();
                try {
                    iface.max();
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class min<I extends Iface> extends org.apache.thrift.ProcessFunction<I, min_args> {
            public min() {
                super("min");
            }

            public min_args getEmptyArgsInstance() {
                return new min_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public min_result getResult(I iface, min_args args) throws org.apache.thrift.TException {
                min_result result = new min_result();
                try {
                    iface.min();
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class max1<I extends Iface> extends org.apache.thrift.ProcessFunction<I, max1_args> {
            public max1() {
                super("max1");
            }

            public max1_args getEmptyArgsInstance() {
                return new max1_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public max1_result getResult(I iface, max1_args args) throws org.apache.thrift.TException {
                max1_result result = new max1_result();
                try {
                    iface.max1(args.cmp);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class min1<I extends Iface> extends org.apache.thrift.ProcessFunction<I, min1_args> {
            public min1() {
                super("min1");
            }

            public min1_args getEmptyArgsInstance() {
                return new min1_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public min1_result getResult(I iface, min1_args args) throws org.apache.thrift.TException {
                min1_result result = new min1_result();
                try {
                    iface.min1(args.cmp);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sampleByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sampleByKey_args> {
            public sampleByKey() {
                super("sampleByKey");
            }

            public sampleByKey_args getEmptyArgsInstance() {
                return new sampleByKey_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public sampleByKey_result getResult(I iface, sampleByKey_args args) throws org.apache.thrift.TException {
                sampleByKey_result result = new sampleByKey_result();
                try {
                    iface.sampleByKey(args.withReplacement, args.fractions, args.seed);
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class countByKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countByKey_args> {
            public countByKey() {
                super("countByKey");
            }

            public countByKey_args getEmptyArgsInstance() {
                return new countByKey_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public countByKey_result getResult(I iface, countByKey_args args) throws org.apache.thrift.TException {
                countByKey_result result = new countByKey_result();
                try {
                    iface.countByKey();
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class countByValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countByValue_args> {
            public countByValue() {
                super("countByValue");
            }

            public countByValue_args getEmptyArgsInstance() {
                return new countByValue_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public countByValue_result getResult(I iface, countByValue_args args) throws org.apache.thrift.TException {
                countByValue_result result = new countByValue_result();
                try {
                    iface.countByValue();
                } catch (org.ignis.rpc.IExecutorException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("sample", new sample());
            processMap.put("count", new count());
            processMap.put("max", new max());
            processMap.put("min", new min());
            processMap.put("max1", new max1());
            processMap.put("min1", new min1());
            processMap.put("sampleByKey", new sampleByKey());
            processMap.put("countByKey", new countByKey());
            processMap.put("countByValue", new countByValue());
            return processMap;
        }

        public static class sample<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sample_args, Void> {
            public sample() {
                super("sample");
            }

            public sample_args getEmptyArgsInstance() {
                return new sample_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sample_result result = new sample_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sample_result result = new sample_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sample_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sample(args.withReplacement, args.num, args.seed, resultHandler);
            }
        }

        public static class count<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, count_args, java.lang.Long> {
            public count() {
                super("count");
            }

            public count_args getEmptyArgsInstance() {
                return new count_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() {
                    public void onComplete(java.lang.Long o) {
                        count_result result = new count_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        count_result result = new count_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, count_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
                iface.count(resultHandler);
            }
        }

        public static class max<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, max_args, Void> {
            public max() {
                super("max");
            }

            public max_args getEmptyArgsInstance() {
                return new max_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        max_result result = new max_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        max_result result = new max_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, max_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.max(resultHandler);
            }
        }

        public static class min<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, min_args, Void> {
            public min() {
                super("min");
            }

            public min_args getEmptyArgsInstance() {
                return new min_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        min_result result = new min_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        min_result result = new min_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, min_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.min(resultHandler);
            }
        }

        public static class max1<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, max1_args, Void> {
            public max1() {
                super("max1");
            }

            public max1_args getEmptyArgsInstance() {
                return new max1_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        max1_result result = new max1_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        max1_result result = new max1_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, max1_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.max1(args.cmp, resultHandler);
            }
        }

        public static class min1<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, min1_args, Void> {
            public min1() {
                super("min1");
            }

            public min1_args getEmptyArgsInstance() {
                return new min1_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        min1_result result = new min1_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        min1_result result = new min1_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, min1_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.min1(args.cmp, resultHandler);
            }
        }

        public static class sampleByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sampleByKey_args, Void> {
            public sampleByKey() {
                super("sampleByKey");
            }

            public sampleByKey_args getEmptyArgsInstance() {
                return new sampleByKey_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sampleByKey_result result = new sampleByKey_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sampleByKey_result result = new sampleByKey_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sampleByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.sampleByKey(args.withReplacement, args.fractions, args.seed, resultHandler);
            }
        }

        public static class countByKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countByKey_args, Void> {
            public countByKey() {
                super("countByKey");
            }

            public countByKey_args getEmptyArgsInstance() {
                return new countByKey_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        countByKey_result result = new countByKey_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        countByKey_result result = new countByKey_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, countByKey_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.countByKey(resultHandler);
            }
        }

        public static class countByValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countByValue_args, Void> {
            public countByValue() {
                super("countByValue");
            }

            public countByValue_args getEmptyArgsInstance() {
                return new countByValue_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        countByValue_result result = new countByValue_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        countByValue_result result = new countByValue_result();
                        if (e instanceof org.ignis.rpc.IExecutorException) {
                            result.ex = (org.ignis.rpc.IExecutorException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, countByValue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.countByValue(resultHandler);
            }
        }

    }

    public static class sample_args implements org.apache.thrift.TBase<sample_args, sample_args._Fields>, java.io.Serializable, Cloneable, Comparable<sample_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sample_args");

        private static final org.apache.thrift.protocol.TField WITH_REPLACEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("withReplacement", org.apache.thrift.protocol.TType.BOOL, (short) 1);
        private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.LIST, (short) 2);
        private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("seed", org.apache.thrift.protocol.TType.I32, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sample_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sample_argsTupleSchemeFactory();

        private boolean withReplacement; // required
        private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> num; // required
        private int seed; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            WITH_REPLACEMENT((short) 1, "withReplacement"),
            NUM((short) 2, "num"),
            SEED((short) 3, "seed");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // WITH_REPLACEMENT
                        return WITH_REPLACEMENT;
                    case 2: // NUM
                        return NUM;
                    case 3: // SEED
                        return SEED;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __WITHREPLACEMENT_ISSET_ID = 0;
        private static final int __SEED_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.WITH_REPLACEMENT, new org.apache.thrift.meta_data.FieldMetaData("withReplacement", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
            tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sample_args.class, metaDataMap);
        }

        public sample_args() {
        }

        public sample_args(
                boolean withReplacement,
                java.util.List<java.lang.Long> num,
                int seed) {
            this();
            this.withReplacement = withReplacement;
            setWithReplacementIsSet(true);
            this.num = num;
            this.seed = seed;
            setSeedIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sample_args(sample_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.withReplacement = other.withReplacement;
            if (other.isSetNum()) {
                java.util.List<java.lang.Long> __this__num = new java.util.ArrayList<java.lang.Long>(other.num);
                this.num = __this__num;
            }
            this.seed = other.seed;
        }

        public sample_args deepCopy() {
            return new sample_args(this);
        }

        @Override
        public void clear() {
            setWithReplacementIsSet(false);
            this.withReplacement = false;
            this.num = null;
            setSeedIsSet(false);
            this.seed = 0;
        }

        public boolean isWithReplacement() {
            return this.withReplacement;
        }

        public sample_args setWithReplacement(boolean withReplacement) {
            this.withReplacement = withReplacement;
            setWithReplacementIsSet(true);
            return this;
        }

        public void unsetWithReplacement() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WITHREPLACEMENT_ISSET_ID);
        }

        /** Returns true if field withReplacement is set (has been assigned a value) and false otherwise */
        public boolean isSetWithReplacement() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WITHREPLACEMENT_ISSET_ID);
        }

        public void setWithReplacementIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WITHREPLACEMENT_ISSET_ID, value);
        }

        public int getNumSize() {
            return (this.num == null) ? 0 : this.num.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<java.lang.Long> getNumIterator() {
            return (this.num == null) ? null : this.num.iterator();
        }

        public void addToNum(long elem) {
            if (this.num == null) {
                this.num = new java.util.ArrayList<java.lang.Long>();
            }
            this.num.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<java.lang.Long> getNum() {
            return this.num;
        }

        public sample_args setNum(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> num) {
            this.num = num;
            return this;
        }

        public void unsetNum() {
            this.num = null;
        }

        /** Returns true if field num is set (has been assigned a value) and false otherwise */
        public boolean isSetNum() {
            return this.num != null;
        }

        public void setNumIsSet(boolean value) {
            if (!value) {
                this.num = null;
            }
        }

        public int getSeed() {
            return this.seed;
        }

        public sample_args setSeed(int seed) {
            this.seed = seed;
            setSeedIsSet(true);
            return this;
        }

        public void unsetSeed() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEED_ISSET_ID);
        }

        /** Returns true if field seed is set (has been assigned a value) and false otherwise */
        public boolean isSetSeed() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEED_ISSET_ID);
        }

        public void setSeedIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEED_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case WITH_REPLACEMENT:
                    if (value == null) {
                        unsetWithReplacement();
                    } else {
                        setWithReplacement((java.lang.Boolean) value);
                    }
                    break;

                case NUM:
                    if (value == null) {
                        unsetNum();
                    } else {
                        setNum((java.util.List<java.lang.Long>) value);
                    }
                    break;

                case SEED:
                    if (value == null) {
                        unsetSeed();
                    } else {
                        setSeed((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case WITH_REPLACEMENT:
                    return isWithReplacement();

                case NUM:
                    return getNum();

                case SEED:
                    return getSeed();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case WITH_REPLACEMENT:
                    return isSetWithReplacement();
                case NUM:
                    return isSetNum();
                case SEED:
                    return isSetSeed();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sample_args)
                return this.equals((sample_args) that);
            return false;
        }

        public boolean equals(sample_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_withReplacement = true;
            boolean that_present_withReplacement = true;
            if (this_present_withReplacement || that_present_withReplacement) {
                if (!(this_present_withReplacement && that_present_withReplacement))
                    return false;
                if (this.withReplacement != that.withReplacement)
                    return false;
            }

            boolean this_present_num = true && this.isSetNum();
            boolean that_present_num = true && that.isSetNum();
            if (this_present_num || that_present_num) {
                if (!(this_present_num && that_present_num))
                    return false;
                if (!this.num.equals(that.num))
                    return false;
            }

            boolean this_present_seed = true;
            boolean that_present_seed = true;
            if (this_present_seed || that_present_seed) {
                if (!(this_present_seed && that_present_seed))
                    return false;
                if (this.seed != that.seed)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((withReplacement) ? 131071 : 524287);

            hashCode = hashCode * 8191 + ((isSetNum()) ? 131071 : 524287);
            if (isSetNum())
                hashCode = hashCode * 8191 + num.hashCode();

            hashCode = hashCode * 8191 + seed;

            return hashCode;
        }

        @Override
        public int compareTo(sample_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetWithReplacement(), other.isSetWithReplacement());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetWithReplacement()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withReplacement, other.withReplacement);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetNum(), other.isSetNum());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNum()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSeed(), other.isSetSeed());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSeed()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sample_args(");
            boolean first = true;

            sb.append("withReplacement:");
            sb.append(this.withReplacement);
            first = false;
            if (!first) sb.append(", ");
            sb.append("num:");
            if (this.num == null) {
                sb.append("null");
            } else {
                sb.append(this.num);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("seed:");
            sb.append(this.seed);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sample_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sample_argsStandardScheme getScheme() {
                return new sample_argsStandardScheme();
            }
        }

        private static class sample_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sample_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sample_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // WITH_REPLACEMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.withReplacement = iprot.readBool();
                                struct.setWithReplacementIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NUM
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.num = new java.util.ArrayList<java.lang.Long>(_list0.size);
                                    long _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                        _elem1 = iprot.readI64();
                                        struct.num.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setNumIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SEED
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.seed = iprot.readI32();
                                struct.setSeedIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sample_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(WITH_REPLACEMENT_FIELD_DESC);
                oprot.writeBool(struct.withReplacement);
                oprot.writeFieldEnd();
                if (struct.num != null) {
                    oprot.writeFieldBegin(NUM_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.num.size()));
                        for (long _iter3 : struct.num) {
                            oprot.writeI64(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(SEED_FIELD_DESC);
                oprot.writeI32(struct.seed);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sample_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sample_argsTupleScheme getScheme() {
                return new sample_argsTupleScheme();
            }
        }

        private static class sample_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sample_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sample_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetWithReplacement()) {
                    optionals.set(0);
                }
                if (struct.isSetNum()) {
                    optionals.set(1);
                }
                if (struct.isSetSeed()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetWithReplacement()) {
                    oprot.writeBool(struct.withReplacement);
                }
                if (struct.isSetNum()) {
                    {
                        oprot.writeI32(struct.num.size());
                        for (long _iter4 : struct.num) {
                            oprot.writeI64(_iter4);
                        }
                    }
                }
                if (struct.isSetSeed()) {
                    oprot.writeI32(struct.seed);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sample_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.withReplacement = iprot.readBool();
                    struct.setWithReplacementIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
                        struct.num = new java.util.ArrayList<java.lang.Long>(_list5.size);
                        long _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                            _elem6 = iprot.readI64();
                            struct.num.add(_elem6);
                        }
                    }
                    struct.setNumIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.seed = iprot.readI32();
                    struct.setSeedIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sample_result implements org.apache.thrift.TBase<sample_result, sample_result._Fields>, java.io.Serializable, Cloneable, Comparable<sample_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sample_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sample_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sample_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sample_result.class, metaDataMap);
        }

        public sample_result() {
        }

        public sample_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sample_result(sample_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sample_result deepCopy() {
            return new sample_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sample_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sample_result)
                return this.equals((sample_result) that);
            return false;
        }

        public boolean equals(sample_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sample_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sample_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sample_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sample_resultStandardScheme getScheme() {
                return new sample_resultStandardScheme();
            }
        }

        private static class sample_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sample_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sample_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sample_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sample_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sample_resultTupleScheme getScheme() {
                return new sample_resultTupleScheme();
            }
        }

        private static class sample_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sample_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sample_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sample_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class count_args implements org.apache.thrift.TBase<count_args, count_args._Fields>, java.io.Serializable, Cloneable, Comparable<count_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("count_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new count_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new count_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(count_args.class, metaDataMap);
        }

        public count_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public count_args(count_args other) {
        }

        public count_args deepCopy() {
            return new count_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof count_args)
                return this.equals((count_args) that);
            return false;
        }

        public boolean equals(count_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(count_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("count_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class count_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public count_argsStandardScheme getScheme() {
                return new count_argsStandardScheme();
            }
        }

        private static class count_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<count_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, count_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, count_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class count_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public count_argsTupleScheme getScheme() {
                return new count_argsTupleScheme();
            }
        }

        private static class count_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<count_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, count_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, count_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class count_result implements org.apache.thrift.TBase<count_result, count_result._Fields>, java.io.Serializable, Cloneable, Comparable<count_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("count_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new count_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new count_resultTupleSchemeFactory();

        private long success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(count_result.class, metaDataMap);
        }

        public count_result() {
        }

        public count_result(
                long success,
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public count_result(count_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public count_result deepCopy() {
            return new count_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.ex = null;
        }

        public long getSuccess() {
            return this.success;
        }

        public count_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public count_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Long) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof count_result)
                return this.equals((count_result) that);
            return false;
        }

        public boolean equals(count_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(count_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("count_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class count_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public count_resultStandardScheme getScheme() {
                return new count_resultStandardScheme();
            }
        }

        private static class count_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<count_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, count_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, count_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class count_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public count_resultTupleScheme getScheme() {
                return new count_resultTupleScheme();
            }
        }

        private static class count_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<count_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, count_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, count_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class max_args implements org.apache.thrift.TBase<max_args, max_args._Fields>, java.io.Serializable, Cloneable, Comparable<max_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("max_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new max_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new max_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(max_args.class, metaDataMap);
        }

        public max_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public max_args(max_args other) {
        }

        public max_args deepCopy() {
            return new max_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof max_args)
                return this.equals((max_args) that);
            return false;
        }

        public boolean equals(max_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(max_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("max_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class max_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public max_argsStandardScheme getScheme() {
                return new max_argsStandardScheme();
            }
        }

        private static class max_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<max_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, max_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, max_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class max_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public max_argsTupleScheme getScheme() {
                return new max_argsTupleScheme();
            }
        }

        private static class max_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<max_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, max_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, max_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class max_result implements org.apache.thrift.TBase<max_result, max_result._Fields>, java.io.Serializable, Cloneable, Comparable<max_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("max_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new max_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new max_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(max_result.class, metaDataMap);
        }

        public max_result() {
        }

        public max_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public max_result(max_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public max_result deepCopy() {
            return new max_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public max_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof max_result)
                return this.equals((max_result) that);
            return false;
        }

        public boolean equals(max_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(max_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("max_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class max_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public max_resultStandardScheme getScheme() {
                return new max_resultStandardScheme();
            }
        }

        private static class max_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<max_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, max_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, max_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class max_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public max_resultTupleScheme getScheme() {
                return new max_resultTupleScheme();
            }
        }

        private static class max_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<max_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, max_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, max_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class min_args implements org.apache.thrift.TBase<min_args, min_args._Fields>, java.io.Serializable, Cloneable, Comparable<min_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("min_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new min_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new min_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(min_args.class, metaDataMap);
        }

        public min_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public min_args(min_args other) {
        }

        public min_args deepCopy() {
            return new min_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof min_args)
                return this.equals((min_args) that);
            return false;
        }

        public boolean equals(min_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(min_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("min_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class min_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public min_argsStandardScheme getScheme() {
                return new min_argsStandardScheme();
            }
        }

        private static class min_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<min_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, min_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, min_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class min_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public min_argsTupleScheme getScheme() {
                return new min_argsTupleScheme();
            }
        }

        private static class min_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<min_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, min_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, min_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class min_result implements org.apache.thrift.TBase<min_result, min_result._Fields>, java.io.Serializable, Cloneable, Comparable<min_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("min_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new min_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new min_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(min_result.class, metaDataMap);
        }

        public min_result() {
        }

        public min_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public min_result(min_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public min_result deepCopy() {
            return new min_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public min_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof min_result)
                return this.equals((min_result) that);
            return false;
        }

        public boolean equals(min_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(min_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("min_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class min_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public min_resultStandardScheme getScheme() {
                return new min_resultStandardScheme();
            }
        }

        private static class min_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<min_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, min_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, min_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class min_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public min_resultTupleScheme getScheme() {
                return new min_resultTupleScheme();
            }
        }

        private static class min_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<min_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, min_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, min_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class max1_args implements org.apache.thrift.TBase<max1_args, max1_args._Fields>, java.io.Serializable, Cloneable, Comparable<max1_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("max1_args");

        private static final org.apache.thrift.protocol.TField CMP_FIELD_DESC = new org.apache.thrift.protocol.TField("cmp", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new max1_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new max1_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource cmp; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CMP((short) 1, "cmp");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CMP
                        return CMP;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CMP, new org.apache.thrift.meta_data.FieldMetaData("cmp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(max1_args.class, metaDataMap);
        }

        public max1_args() {
        }

        public max1_args(
                org.ignis.rpc.ISource cmp) {
            this();
            this.cmp = cmp;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public max1_args(max1_args other) {
            if (other.isSetCmp()) {
                this.cmp = new org.ignis.rpc.ISource(other.cmp);
            }
        }

        public max1_args deepCopy() {
            return new max1_args(this);
        }

        @Override
        public void clear() {
            this.cmp = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getCmp() {
            return this.cmp;
        }

        public max1_args setCmp(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource cmp) {
            this.cmp = cmp;
            return this;
        }

        public void unsetCmp() {
            this.cmp = null;
        }

        /** Returns true if field cmp is set (has been assigned a value) and false otherwise */
        public boolean isSetCmp() {
            return this.cmp != null;
        }

        public void setCmpIsSet(boolean value) {
            if (!value) {
                this.cmp = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case CMP:
                    if (value == null) {
                        unsetCmp();
                    } else {
                        setCmp((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CMP:
                    return getCmp();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CMP:
                    return isSetCmp();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof max1_args)
                return this.equals((max1_args) that);
            return false;
        }

        public boolean equals(max1_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_cmp = true && this.isSetCmp();
            boolean that_present_cmp = true && that.isSetCmp();
            if (this_present_cmp || that_present_cmp) {
                if (!(this_present_cmp && that_present_cmp))
                    return false;
                if (!this.cmp.equals(that.cmp))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCmp()) ? 131071 : 524287);
            if (isSetCmp())
                hashCode = hashCode * 8191 + cmp.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(max1_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetCmp(), other.isSetCmp());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCmp()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmp, other.cmp);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("max1_args(");
            boolean first = true;

            sb.append("cmp:");
            if (this.cmp == null) {
                sb.append("null");
            } else {
                sb.append(this.cmp);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (cmp != null) {
                cmp.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class max1_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public max1_argsStandardScheme getScheme() {
                return new max1_argsStandardScheme();
            }
        }

        private static class max1_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<max1_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, max1_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CMP
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.cmp = new org.ignis.rpc.ISource();
                                struct.cmp.read(iprot);
                                struct.setCmpIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, max1_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.cmp != null) {
                    oprot.writeFieldBegin(CMP_FIELD_DESC);
                    struct.cmp.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class max1_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public max1_argsTupleScheme getScheme() {
                return new max1_argsTupleScheme();
            }
        }

        private static class max1_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<max1_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, max1_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCmp()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCmp()) {
                    struct.cmp.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, max1_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.cmp = new org.ignis.rpc.ISource();
                    struct.cmp.read(iprot);
                    struct.setCmpIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class max1_result implements org.apache.thrift.TBase<max1_result, max1_result._Fields>, java.io.Serializable, Cloneable, Comparable<max1_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("max1_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new max1_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new max1_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(max1_result.class, metaDataMap);
        }

        public max1_result() {
        }

        public max1_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public max1_result(max1_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public max1_result deepCopy() {
            return new max1_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public max1_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof max1_result)
                return this.equals((max1_result) that);
            return false;
        }

        public boolean equals(max1_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(max1_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("max1_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class max1_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public max1_resultStandardScheme getScheme() {
                return new max1_resultStandardScheme();
            }
        }

        private static class max1_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<max1_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, max1_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, max1_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class max1_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public max1_resultTupleScheme getScheme() {
                return new max1_resultTupleScheme();
            }
        }

        private static class max1_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<max1_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, max1_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, max1_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class min1_args implements org.apache.thrift.TBase<min1_args, min1_args._Fields>, java.io.Serializable, Cloneable, Comparable<min1_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("min1_args");

        private static final org.apache.thrift.protocol.TField CMP_FIELD_DESC = new org.apache.thrift.protocol.TField("cmp", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new min1_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new min1_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource cmp; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CMP((short) 1, "cmp");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CMP
                        return CMP;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CMP, new org.apache.thrift.meta_data.FieldMetaData("cmp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(min1_args.class, metaDataMap);
        }

        public min1_args() {
        }

        public min1_args(
                org.ignis.rpc.ISource cmp) {
            this();
            this.cmp = cmp;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public min1_args(min1_args other) {
            if (other.isSetCmp()) {
                this.cmp = new org.ignis.rpc.ISource(other.cmp);
            }
        }

        public min1_args deepCopy() {
            return new min1_args(this);
        }

        @Override
        public void clear() {
            this.cmp = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getCmp() {
            return this.cmp;
        }

        public min1_args setCmp(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource cmp) {
            this.cmp = cmp;
            return this;
        }

        public void unsetCmp() {
            this.cmp = null;
        }

        /** Returns true if field cmp is set (has been assigned a value) and false otherwise */
        public boolean isSetCmp() {
            return this.cmp != null;
        }

        public void setCmpIsSet(boolean value) {
            if (!value) {
                this.cmp = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case CMP:
                    if (value == null) {
                        unsetCmp();
                    } else {
                        setCmp((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CMP:
                    return getCmp();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CMP:
                    return isSetCmp();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof min1_args)
                return this.equals((min1_args) that);
            return false;
        }

        public boolean equals(min1_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_cmp = true && this.isSetCmp();
            boolean that_present_cmp = true && that.isSetCmp();
            if (this_present_cmp || that_present_cmp) {
                if (!(this_present_cmp && that_present_cmp))
                    return false;
                if (!this.cmp.equals(that.cmp))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCmp()) ? 131071 : 524287);
            if (isSetCmp())
                hashCode = hashCode * 8191 + cmp.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(min1_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetCmp(), other.isSetCmp());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCmp()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmp, other.cmp);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("min1_args(");
            boolean first = true;

            sb.append("cmp:");
            if (this.cmp == null) {
                sb.append("null");
            } else {
                sb.append(this.cmp);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (cmp != null) {
                cmp.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class min1_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public min1_argsStandardScheme getScheme() {
                return new min1_argsStandardScheme();
            }
        }

        private static class min1_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<min1_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, min1_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CMP
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.cmp = new org.ignis.rpc.ISource();
                                struct.cmp.read(iprot);
                                struct.setCmpIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, min1_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.cmp != null) {
                    oprot.writeFieldBegin(CMP_FIELD_DESC);
                    struct.cmp.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class min1_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public min1_argsTupleScheme getScheme() {
                return new min1_argsTupleScheme();
            }
        }

        private static class min1_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<min1_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, min1_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCmp()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCmp()) {
                    struct.cmp.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, min1_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.cmp = new org.ignis.rpc.ISource();
                    struct.cmp.read(iprot);
                    struct.setCmpIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class min1_result implements org.apache.thrift.TBase<min1_result, min1_result._Fields>, java.io.Serializable, Cloneable, Comparable<min1_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("min1_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new min1_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new min1_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(min1_result.class, metaDataMap);
        }

        public min1_result() {
        }

        public min1_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public min1_result(min1_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public min1_result deepCopy() {
            return new min1_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public min1_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof min1_result)
                return this.equals((min1_result) that);
            return false;
        }

        public boolean equals(min1_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(min1_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("min1_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class min1_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public min1_resultStandardScheme getScheme() {
                return new min1_resultStandardScheme();
            }
        }

        private static class min1_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<min1_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, min1_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, min1_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class min1_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public min1_resultTupleScheme getScheme() {
                return new min1_resultTupleScheme();
            }
        }

        private static class min1_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<min1_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, min1_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, min1_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sampleByKey_args implements org.apache.thrift.TBase<sampleByKey_args, sampleByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<sampleByKey_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sampleByKey_args");

        private static final org.apache.thrift.protocol.TField WITH_REPLACEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("withReplacement", org.apache.thrift.protocol.TType.BOOL, (short) 1);
        private static final org.apache.thrift.protocol.TField FRACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("fractions", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("seed", org.apache.thrift.protocol.TType.I32, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sampleByKey_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sampleByKey_argsTupleSchemeFactory();

        private boolean withReplacement; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource fractions; // required
        private int seed; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            WITH_REPLACEMENT((short) 1, "withReplacement"),
            FRACTIONS((short) 2, "fractions"),
            SEED((short) 3, "seed");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // WITH_REPLACEMENT
                        return WITH_REPLACEMENT;
                    case 2: // FRACTIONS
                        return FRACTIONS;
                    case 3: // SEED
                        return SEED;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __WITHREPLACEMENT_ISSET_ID = 0;
        private static final int __SEED_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.WITH_REPLACEMENT, new org.apache.thrift.meta_data.FieldMetaData("withReplacement", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.FRACTIONS, new org.apache.thrift.meta_data.FieldMetaData("fractions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sampleByKey_args.class, metaDataMap);
        }

        public sampleByKey_args() {
        }

        public sampleByKey_args(
                boolean withReplacement,
                org.ignis.rpc.ISource fractions,
                int seed) {
            this();
            this.withReplacement = withReplacement;
            setWithReplacementIsSet(true);
            this.fractions = fractions;
            this.seed = seed;
            setSeedIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sampleByKey_args(sampleByKey_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.withReplacement = other.withReplacement;
            if (other.isSetFractions()) {
                this.fractions = new org.ignis.rpc.ISource(other.fractions);
            }
            this.seed = other.seed;
        }

        public sampleByKey_args deepCopy() {
            return new sampleByKey_args(this);
        }

        @Override
        public void clear() {
            setWithReplacementIsSet(false);
            this.withReplacement = false;
            this.fractions = null;
            setSeedIsSet(false);
            this.seed = 0;
        }

        public boolean isWithReplacement() {
            return this.withReplacement;
        }

        public sampleByKey_args setWithReplacement(boolean withReplacement) {
            this.withReplacement = withReplacement;
            setWithReplacementIsSet(true);
            return this;
        }

        public void unsetWithReplacement() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WITHREPLACEMENT_ISSET_ID);
        }

        /** Returns true if field withReplacement is set (has been assigned a value) and false otherwise */
        public boolean isSetWithReplacement() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WITHREPLACEMENT_ISSET_ID);
        }

        public void setWithReplacementIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WITHREPLACEMENT_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getFractions() {
            return this.fractions;
        }

        public sampleByKey_args setFractions(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource fractions) {
            this.fractions = fractions;
            return this;
        }

        public void unsetFractions() {
            this.fractions = null;
        }

        /** Returns true if field fractions is set (has been assigned a value) and false otherwise */
        public boolean isSetFractions() {
            return this.fractions != null;
        }

        public void setFractionsIsSet(boolean value) {
            if (!value) {
                this.fractions = null;
            }
        }

        public int getSeed() {
            return this.seed;
        }

        public sampleByKey_args setSeed(int seed) {
            this.seed = seed;
            setSeedIsSet(true);
            return this;
        }

        public void unsetSeed() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEED_ISSET_ID);
        }

        /** Returns true if field seed is set (has been assigned a value) and false otherwise */
        public boolean isSetSeed() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEED_ISSET_ID);
        }

        public void setSeedIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEED_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case WITH_REPLACEMENT:
                    if (value == null) {
                        unsetWithReplacement();
                    } else {
                        setWithReplacement((java.lang.Boolean) value);
                    }
                    break;

                case FRACTIONS:
                    if (value == null) {
                        unsetFractions();
                    } else {
                        setFractions((org.ignis.rpc.ISource) value);
                    }
                    break;

                case SEED:
                    if (value == null) {
                        unsetSeed();
                    } else {
                        setSeed((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case WITH_REPLACEMENT:
                    return isWithReplacement();

                case FRACTIONS:
                    return getFractions();

                case SEED:
                    return getSeed();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case WITH_REPLACEMENT:
                    return isSetWithReplacement();
                case FRACTIONS:
                    return isSetFractions();
                case SEED:
                    return isSetSeed();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sampleByKey_args)
                return this.equals((sampleByKey_args) that);
            return false;
        }

        public boolean equals(sampleByKey_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_withReplacement = true;
            boolean that_present_withReplacement = true;
            if (this_present_withReplacement || that_present_withReplacement) {
                if (!(this_present_withReplacement && that_present_withReplacement))
                    return false;
                if (this.withReplacement != that.withReplacement)
                    return false;
            }

            boolean this_present_fractions = true && this.isSetFractions();
            boolean that_present_fractions = true && that.isSetFractions();
            if (this_present_fractions || that_present_fractions) {
                if (!(this_present_fractions && that_present_fractions))
                    return false;
                if (!this.fractions.equals(that.fractions))
                    return false;
            }

            boolean this_present_seed = true;
            boolean that_present_seed = true;
            if (this_present_seed || that_present_seed) {
                if (!(this_present_seed && that_present_seed))
                    return false;
                if (this.seed != that.seed)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((withReplacement) ? 131071 : 524287);

            hashCode = hashCode * 8191 + ((isSetFractions()) ? 131071 : 524287);
            if (isSetFractions())
                hashCode = hashCode * 8191 + fractions.hashCode();

            hashCode = hashCode * 8191 + seed;

            return hashCode;
        }

        @Override
        public int compareTo(sampleByKey_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetWithReplacement(), other.isSetWithReplacement());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetWithReplacement()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withReplacement, other.withReplacement);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetFractions(), other.isSetFractions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFractions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fractions, other.fractions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSeed(), other.isSetSeed());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSeed()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sampleByKey_args(");
            boolean first = true;

            sb.append("withReplacement:");
            sb.append(this.withReplacement);
            first = false;
            if (!first) sb.append(", ");
            sb.append("fractions:");
            if (this.fractions == null) {
                sb.append("null");
            } else {
                sb.append(this.fractions);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("seed:");
            sb.append(this.seed);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (fractions != null) {
                fractions.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sampleByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sampleByKey_argsStandardScheme getScheme() {
                return new sampleByKey_argsStandardScheme();
            }
        }

        private static class sampleByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sampleByKey_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sampleByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // WITH_REPLACEMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.withReplacement = iprot.readBool();
                                struct.setWithReplacementIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // FRACTIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.fractions = new org.ignis.rpc.ISource();
                                struct.fractions.read(iprot);
                                struct.setFractionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SEED
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.seed = iprot.readI32();
                                struct.setSeedIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sampleByKey_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(WITH_REPLACEMENT_FIELD_DESC);
                oprot.writeBool(struct.withReplacement);
                oprot.writeFieldEnd();
                if (struct.fractions != null) {
                    oprot.writeFieldBegin(FRACTIONS_FIELD_DESC);
                    struct.fractions.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(SEED_FIELD_DESC);
                oprot.writeI32(struct.seed);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sampleByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sampleByKey_argsTupleScheme getScheme() {
                return new sampleByKey_argsTupleScheme();
            }
        }

        private static class sampleByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sampleByKey_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sampleByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetWithReplacement()) {
                    optionals.set(0);
                }
                if (struct.isSetFractions()) {
                    optionals.set(1);
                }
                if (struct.isSetSeed()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetWithReplacement()) {
                    oprot.writeBool(struct.withReplacement);
                }
                if (struct.isSetFractions()) {
                    struct.fractions.write(oprot);
                }
                if (struct.isSetSeed()) {
                    oprot.writeI32(struct.seed);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sampleByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.withReplacement = iprot.readBool();
                    struct.setWithReplacementIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.fractions = new org.ignis.rpc.ISource();
                    struct.fractions.read(iprot);
                    struct.setFractionsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.seed = iprot.readI32();
                    struct.setSeedIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sampleByKey_result implements org.apache.thrift.TBase<sampleByKey_result, sampleByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<sampleByKey_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sampleByKey_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sampleByKey_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sampleByKey_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sampleByKey_result.class, metaDataMap);
        }

        public sampleByKey_result() {
        }

        public sampleByKey_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sampleByKey_result(sampleByKey_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public sampleByKey_result deepCopy() {
            return new sampleByKey_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public sampleByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof sampleByKey_result)
                return this.equals((sampleByKey_result) that);
            return false;
        }

        public boolean equals(sampleByKey_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sampleByKey_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sampleByKey_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sampleByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sampleByKey_resultStandardScheme getScheme() {
                return new sampleByKey_resultStandardScheme();
            }
        }

        private static class sampleByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sampleByKey_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sampleByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sampleByKey_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sampleByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sampleByKey_resultTupleScheme getScheme() {
                return new sampleByKey_resultTupleScheme();
            }
        }

        private static class sampleByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sampleByKey_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sampleByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sampleByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class countByKey_args implements org.apache.thrift.TBase<countByKey_args, countByKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<countByKey_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countByKey_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countByKey_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countByKey_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countByKey_args.class, metaDataMap);
        }

        public countByKey_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public countByKey_args(countByKey_args other) {
        }

        public countByKey_args deepCopy() {
            return new countByKey_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof countByKey_args)
                return this.equals((countByKey_args) that);
            return false;
        }

        public boolean equals(countByKey_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(countByKey_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("countByKey_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class countByKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public countByKey_argsStandardScheme getScheme() {
                return new countByKey_argsStandardScheme();
            }
        }

        private static class countByKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countByKey_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, countByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, countByKey_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class countByKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public countByKey_argsTupleScheme getScheme() {
                return new countByKey_argsTupleScheme();
            }
        }

        private static class countByKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countByKey_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, countByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, countByKey_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class countByKey_result implements org.apache.thrift.TBase<countByKey_result, countByKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<countByKey_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countByKey_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countByKey_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countByKey_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countByKey_result.class, metaDataMap);
        }

        public countByKey_result() {
        }

        public countByKey_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public countByKey_result(countByKey_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public countByKey_result deepCopy() {
            return new countByKey_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public countByKey_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof countByKey_result)
                return this.equals((countByKey_result) that);
            return false;
        }

        public boolean equals(countByKey_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(countByKey_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("countByKey_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class countByKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public countByKey_resultStandardScheme getScheme() {
                return new countByKey_resultStandardScheme();
            }
        }

        private static class countByKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countByKey_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, countByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, countByKey_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class countByKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public countByKey_resultTupleScheme getScheme() {
                return new countByKey_resultTupleScheme();
            }
        }

        private static class countByKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countByKey_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, countByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, countByKey_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class countByValue_args implements org.apache.thrift.TBase<countByValue_args, countByValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<countByValue_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countByValue_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countByValue_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countByValue_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countByValue_args.class, metaDataMap);
        }

        public countByValue_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public countByValue_args(countByValue_args other) {
        }

        public countByValue_args deepCopy() {
            return new countByValue_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof countByValue_args)
                return this.equals((countByValue_args) that);
            return false;
        }

        public boolean equals(countByValue_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(countByValue_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("countByValue_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class countByValue_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public countByValue_argsStandardScheme getScheme() {
                return new countByValue_argsStandardScheme();
            }
        }

        private static class countByValue_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countByValue_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, countByValue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, countByValue_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class countByValue_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public countByValue_argsTupleScheme getScheme() {
                return new countByValue_argsTupleScheme();
            }
        }

        private static class countByValue_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countByValue_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, countByValue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, countByValue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class countByValue_result implements org.apache.thrift.TBase<countByValue_result, countByValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<countByValue_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countByValue_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countByValue_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countByValue_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.IExecutorException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countByValue_result.class, metaDataMap);
        }

        public countByValue_result() {
        }

        public countByValue_result(
                org.ignis.rpc.IExecutorException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public countByValue_result(countByValue_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.IExecutorException(other.ex);
            }
        }

        public countByValue_result deepCopy() {
            return new countByValue_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.IExecutorException getEx() {
            return this.ex;
        }

        public countByValue_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.IExecutorException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.IExecutorException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof countByValue_result)
                return this.equals((countByValue_result) that);
            return false;
        }

        public boolean equals(countByValue_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(countByValue_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("countByValue_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class countByValue_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public countByValue_resultStandardScheme getScheme() {
                return new countByValue_resultStandardScheme();
            }
        }

        private static class countByValue_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countByValue_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, countByValue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.IExecutorException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, countByValue_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class countByValue_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public countByValue_resultTupleScheme getScheme() {
                return new countByValue_resultTupleScheme();
            }
        }

        private static class countByValue_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countByValue_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, countByValue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, countByValue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.IExecutorException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
