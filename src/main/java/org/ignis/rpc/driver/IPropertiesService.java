/**
 * Autogenerated by Thrift Compiler (0.15.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.ignis.rpc.driver;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IPropertiesService {

    public interface Iface {

        public long newInstance() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public long newInstance2(long id) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public java.lang.String setProperty(long id, java.lang.String key, java.lang.String value) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public java.lang.String getProperty(long id, java.lang.String key) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public java.lang.String rmProperty(long id, java.lang.String key) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public boolean contains(long id, java.lang.String key) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public java.util.Map<java.lang.String, java.lang.String> toMap(long id, boolean defaults) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public void fromMap(long id, java.util.Map<java.lang.String, java.lang.String> map_) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public void load(long id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public void store(long id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public void clear(long id) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void newInstance(org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

        public void newInstance2(long id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

        public void setProperty(long id, java.lang.String key, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void getProperty(long id, java.lang.String key, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void rmProperty(long id, java.lang.String key, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void contains(long id, java.lang.String key, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

        public void toMap(long id, boolean defaults, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.lang.String>> resultHandler) throws org.apache.thrift.TException;

        public void fromMap(long id, java.util.Map<java.lang.String, java.lang.String> map_, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void load(long id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void store(long id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void clear(long id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public long newInstance() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_newInstance();
            return recv_newInstance();
        }

        public void send_newInstance() throws org.apache.thrift.TException {
            newInstance_args args = new newInstance_args();
            sendBase("newInstance", args);
        }

        public long recv_newInstance() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            newInstance_result result = new newInstance_result();
            receiveBase(result, "newInstance");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "newInstance failed: unknown result");
        }

        public long newInstance2(long id) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_newInstance2(id);
            return recv_newInstance2();
        }

        public void send_newInstance2(long id) throws org.apache.thrift.TException {
            newInstance2_args args = new newInstance2_args();
            args.setId(id);
            sendBase("newInstance2", args);
        }

        public long recv_newInstance2() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            newInstance2_result result = new newInstance2_result();
            receiveBase(result, "newInstance2");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "newInstance2 failed: unknown result");
        }

        public java.lang.String setProperty(long id, java.lang.String key, java.lang.String value) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_setProperty(id, key, value);
            return recv_setProperty();
        }

        public void send_setProperty(long id, java.lang.String key, java.lang.String value) throws org.apache.thrift.TException {
            setProperty_args args = new setProperty_args();
            args.setId(id);
            args.setKey(key);
            args.setValue(value);
            sendBase("setProperty", args);
        }

        public java.lang.String recv_setProperty() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            setProperty_result result = new setProperty_result();
            receiveBase(result, "setProperty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setProperty failed: unknown result");
        }

        public java.lang.String getProperty(long id, java.lang.String key) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_getProperty(id, key);
            return recv_getProperty();
        }

        public void send_getProperty(long id, java.lang.String key) throws org.apache.thrift.TException {
            getProperty_args args = new getProperty_args();
            args.setId(id);
            args.setKey(key);
            sendBase("getProperty", args);
        }

        public java.lang.String recv_getProperty() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            getProperty_result result = new getProperty_result();
            receiveBase(result, "getProperty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProperty failed: unknown result");
        }

        public java.lang.String rmProperty(long id, java.lang.String key) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_rmProperty(id, key);
            return recv_rmProperty();
        }

        public void send_rmProperty(long id, java.lang.String key) throws org.apache.thrift.TException {
            rmProperty_args args = new rmProperty_args();
            args.setId(id);
            args.setKey(key);
            sendBase("rmProperty", args);
        }

        public java.lang.String recv_rmProperty() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            rmProperty_result result = new rmProperty_result();
            receiveBase(result, "rmProperty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rmProperty failed: unknown result");
        }

        public boolean contains(long id, java.lang.String key) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_contains(id, key);
            return recv_contains();
        }

        public void send_contains(long id, java.lang.String key) throws org.apache.thrift.TException {
            contains_args args = new contains_args();
            args.setId(id);
            args.setKey(key);
            sendBase("contains", args);
        }

        public boolean recv_contains() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            contains_result result = new contains_result();
            receiveBase(result, "contains");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "contains failed: unknown result");
        }

        public java.util.Map<java.lang.String, java.lang.String> toMap(long id, boolean defaults) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_toMap(id, defaults);
            return recv_toMap();
        }

        public void send_toMap(long id, boolean defaults) throws org.apache.thrift.TException {
            toMap_args args = new toMap_args();
            args.setId(id);
            args.setDefaults(defaults);
            sendBase("toMap", args);
        }

        public java.util.Map<java.lang.String, java.lang.String> recv_toMap() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            toMap_result result = new toMap_result();
            receiveBase(result, "toMap");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "toMap failed: unknown result");
        }

        public void fromMap(long id, java.util.Map<java.lang.String, java.lang.String> map_) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_fromMap(id, map_);
            recv_fromMap();
        }

        public void send_fromMap(long id, java.util.Map<java.lang.String, java.lang.String> map_) throws org.apache.thrift.TException {
            fromMap_args args = new fromMap_args();
            args.setId(id);
            args.setMap_(map_);
            sendBase("fromMap", args);
        }

        public void recv_fromMap() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            fromMap_result result = new fromMap_result();
            receiveBase(result, "fromMap");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void load(long id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_load(id, path);
            recv_load();
        }

        public void send_load(long id, java.lang.String path) throws org.apache.thrift.TException {
            load_args args = new load_args();
            args.setId(id);
            args.setPath(path);
            sendBase("load", args);
        }

        public void recv_load() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            load_result result = new load_result();
            receiveBase(result, "load");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void store(long id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_store(id, path);
            recv_store();
        }

        public void send_store(long id, java.lang.String path) throws org.apache.thrift.TException {
            store_args args = new store_args();
            args.setId(id);
            args.setPath(path);
            sendBase("store", args);
        }

        public void recv_store() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            store_result result = new store_result();
            receiveBase(result, "store");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void clear(long id) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_clear(id);
            recv_clear();
        }

        public void send_clear(long id) throws org.apache.thrift.TException {
            clear_args args = new clear_args();
            args.setId(id);
            sendBase("clear", args);
        }

        public void recv_clear() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            clear_result result = new clear_result();
            receiveBase(result, "clear");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void newInstance(org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            newInstance_call method_call = new newInstance_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class newInstance_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
            public newInstance_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("newInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
                newInstance_args args = new newInstance_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Long getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_newInstance();
            }
        }

        public void newInstance2(long id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            newInstance2_call method_call = new newInstance2_call(id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class newInstance2_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
            private long id;

            public newInstance2_call(long id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("newInstance2", org.apache.thrift.protocol.TMessageType.CALL, 0));
                newInstance2_args args = new newInstance2_args();
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Long getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_newInstance2();
            }
        }

        public void setProperty(long id, java.lang.String key, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setProperty_call method_call = new setProperty_call(id, key, value, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setProperty_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private long id;
            private java.lang.String key;
            private java.lang.String value;

            public setProperty_call(long id, java.lang.String key, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.key = key;
                this.value = value;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setProperty", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setProperty_args args = new setProperty_args();
                args.setId(id);
                args.setKey(key);
                args.setValue(value);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_setProperty();
            }
        }

        public void getProperty(long id, java.lang.String key, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getProperty_call method_call = new getProperty_call(id, key, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getProperty_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private long id;
            private java.lang.String key;

            public getProperty_call(long id, java.lang.String key, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.key = key;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProperty", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getProperty_args args = new getProperty_args();
                args.setId(id);
                args.setKey(key);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getProperty();
            }
        }

        public void rmProperty(long id, java.lang.String key, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            rmProperty_call method_call = new rmProperty_call(id, key, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class rmProperty_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private long id;
            private java.lang.String key;

            public rmProperty_call(long id, java.lang.String key, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.key = key;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rmProperty", org.apache.thrift.protocol.TMessageType.CALL, 0));
                rmProperty_args args = new rmProperty_args();
                args.setId(id);
                args.setKey(key);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_rmProperty();
            }
        }

        public void contains(long id, java.lang.String key, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            contains_call method_call = new contains_call(id, key, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class contains_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
            private long id;
            private java.lang.String key;

            public contains_call(long id, java.lang.String key, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.key = key;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("contains", org.apache.thrift.protocol.TMessageType.CALL, 0));
                contains_args args = new contains_args();
                args.setId(id);
                args.setKey(key);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Boolean getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_contains();
            }
        }

        public void toMap(long id, boolean defaults, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.lang.String>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            toMap_call method_call = new toMap_call(id, defaults, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class toMap_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String, java.lang.String>> {
            private long id;
            private boolean defaults;

            public toMap_call(long id, boolean defaults, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.defaults = defaults;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("toMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
                toMap_args args = new toMap_args();
                args.setId(id);
                args.setDefaults(defaults);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.Map<java.lang.String, java.lang.String> getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_toMap();
            }
        }

        public void fromMap(long id, java.util.Map<java.lang.String, java.lang.String> map_, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            fromMap_call method_call = new fromMap_call(id, map_, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class fromMap_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long id;
            private java.util.Map<java.lang.String, java.lang.String> map_;

            public fromMap_call(long id, java.util.Map<java.lang.String, java.lang.String> map_, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.map_ = map_;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fromMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
                fromMap_args args = new fromMap_args();
                args.setId(id);
                args.setMap_(map_);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void load(long id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            load_call method_call = new load_call(id, path, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class load_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long id;
            private java.lang.String path;

            public load_call(long id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("load", org.apache.thrift.protocol.TMessageType.CALL, 0));
                load_args args = new load_args();
                args.setId(id);
                args.setPath(path);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void store(long id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            store_call method_call = new store_call(id, path, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class store_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long id;
            private java.lang.String path;

            public store_call(long id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("store", org.apache.thrift.protocol.TMessageType.CALL, 0));
                store_args args = new store_args();
                args.setId(id);
                args.setPath(path);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void clear(long id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            clear_call method_call = new clear_call(id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class clear_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long id;

            public clear_call(long id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clear", org.apache.thrift.protocol.TMessageType.CALL, 0));
                clear_args args = new clear_args();
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("newInstance", new newInstance());
            processMap.put("newInstance2", new newInstance2());
            processMap.put("setProperty", new setProperty());
            processMap.put("getProperty", new getProperty());
            processMap.put("rmProperty", new rmProperty());
            processMap.put("contains", new contains());
            processMap.put("toMap", new toMap());
            processMap.put("fromMap", new fromMap());
            processMap.put("load", new load());
            processMap.put("store", new store());
            processMap.put("clear", new clear());
            return processMap;
        }

        public static class newInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, newInstance_args> {
            public newInstance() {
                super("newInstance");
            }

            public newInstance_args getEmptyArgsInstance() {
                return new newInstance_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public newInstance_result getResult(I iface, newInstance_args args) throws org.apache.thrift.TException {
                newInstance_result result = new newInstance_result();
                try {
                    result.success = iface.newInstance();
                    result.setSuccessIsSet(true);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class newInstance2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, newInstance2_args> {
            public newInstance2() {
                super("newInstance2");
            }

            public newInstance2_args getEmptyArgsInstance() {
                return new newInstance2_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public newInstance2_result getResult(I iface, newInstance2_args args) throws org.apache.thrift.TException {
                newInstance2_result result = new newInstance2_result();
                try {
                    result.success = iface.newInstance2(args.id);
                    result.setSuccessIsSet(true);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class setProperty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setProperty_args> {
            public setProperty() {
                super("setProperty");
            }

            public setProperty_args getEmptyArgsInstance() {
                return new setProperty_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public setProperty_result getResult(I iface, setProperty_args args) throws org.apache.thrift.TException {
                setProperty_result result = new setProperty_result();
                try {
                    result.success = iface.setProperty(args.id, args.key, args.value);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class getProperty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProperty_args> {
            public getProperty() {
                super("getProperty");
            }

            public getProperty_args getEmptyArgsInstance() {
                return new getProperty_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public getProperty_result getResult(I iface, getProperty_args args) throws org.apache.thrift.TException {
                getProperty_result result = new getProperty_result();
                try {
                    result.success = iface.getProperty(args.id, args.key);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class rmProperty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rmProperty_args> {
            public rmProperty() {
                super("rmProperty");
            }

            public rmProperty_args getEmptyArgsInstance() {
                return new rmProperty_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public rmProperty_result getResult(I iface, rmProperty_args args) throws org.apache.thrift.TException {
                rmProperty_result result = new rmProperty_result();
                try {
                    result.success = iface.rmProperty(args.id, args.key);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class contains<I extends Iface> extends org.apache.thrift.ProcessFunction<I, contains_args> {
            public contains() {
                super("contains");
            }

            public contains_args getEmptyArgsInstance() {
                return new contains_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public contains_result getResult(I iface, contains_args args) throws org.apache.thrift.TException {
                contains_result result = new contains_result();
                try {
                    result.success = iface.contains(args.id, args.key);
                    result.setSuccessIsSet(true);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class toMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, toMap_args> {
            public toMap() {
                super("toMap");
            }

            public toMap_args getEmptyArgsInstance() {
                return new toMap_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public toMap_result getResult(I iface, toMap_args args) throws org.apache.thrift.TException {
                toMap_result result = new toMap_result();
                try {
                    result.success = iface.toMap(args.id, args.defaults);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class fromMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fromMap_args> {
            public fromMap() {
                super("fromMap");
            }

            public fromMap_args getEmptyArgsInstance() {
                return new fromMap_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public fromMap_result getResult(I iface, fromMap_args args) throws org.apache.thrift.TException {
                fromMap_result result = new fromMap_result();
                try {
                    iface.fromMap(args.id, args.map_);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class load<I extends Iface> extends org.apache.thrift.ProcessFunction<I, load_args> {
            public load() {
                super("load");
            }

            public load_args getEmptyArgsInstance() {
                return new load_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public load_result getResult(I iface, load_args args) throws org.apache.thrift.TException {
                load_result result = new load_result();
                try {
                    iface.load(args.id, args.path);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class store<I extends Iface> extends org.apache.thrift.ProcessFunction<I, store_args> {
            public store() {
                super("store");
            }

            public store_args getEmptyArgsInstance() {
                return new store_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public store_result getResult(I iface, store_args args) throws org.apache.thrift.TException {
                store_result result = new store_result();
                try {
                    iface.store(args.id, args.path);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class clear<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clear_args> {
            public clear() {
                super("clear");
            }

            public clear_args getEmptyArgsInstance() {
                return new clear_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public clear_result getResult(I iface, clear_args args) throws org.apache.thrift.TException {
                clear_result result = new clear_result();
                try {
                    iface.clear(args.id);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("newInstance", new newInstance());
            processMap.put("newInstance2", new newInstance2());
            processMap.put("setProperty", new setProperty());
            processMap.put("getProperty", new getProperty());
            processMap.put("rmProperty", new rmProperty());
            processMap.put("contains", new contains());
            processMap.put("toMap", new toMap());
            processMap.put("fromMap", new fromMap());
            processMap.put("load", new load());
            processMap.put("store", new store());
            processMap.put("clear", new clear());
            return processMap;
        }

        public static class newInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, newInstance_args, java.lang.Long> {
            public newInstance() {
                super("newInstance");
            }

            public newInstance_args getEmptyArgsInstance() {
                return new newInstance_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() {
                    public void onComplete(java.lang.Long o) {
                        newInstance_result result = new newInstance_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        newInstance_result result = new newInstance_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, newInstance_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
                iface.newInstance(resultHandler);
            }
        }

        public static class newInstance2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, newInstance2_args, java.lang.Long> {
            public newInstance2() {
                super("newInstance2");
            }

            public newInstance2_args getEmptyArgsInstance() {
                return new newInstance2_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() {
                    public void onComplete(java.lang.Long o) {
                        newInstance2_result result = new newInstance2_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        newInstance2_result result = new newInstance2_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, newInstance2_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
                iface.newInstance2(args.id, resultHandler);
            }
        }

        public static class setProperty<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setProperty_args, java.lang.String> {
            public setProperty() {
                super("setProperty");
            }

            public setProperty_args getEmptyArgsInstance() {
                return new setProperty_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        setProperty_result result = new setProperty_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        setProperty_result result = new setProperty_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setProperty_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.setProperty(args.id, args.key, args.value, resultHandler);
            }
        }

        public static class getProperty<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProperty_args, java.lang.String> {
            public getProperty() {
                super("getProperty");
            }

            public getProperty_args getEmptyArgsInstance() {
                return new getProperty_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        getProperty_result result = new getProperty_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getProperty_result result = new getProperty_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getProperty_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.getProperty(args.id, args.key, resultHandler);
            }
        }

        public static class rmProperty<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rmProperty_args, java.lang.String> {
            public rmProperty() {
                super("rmProperty");
            }

            public rmProperty_args getEmptyArgsInstance() {
                return new rmProperty_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        rmProperty_result result = new rmProperty_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        rmProperty_result result = new rmProperty_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, rmProperty_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.rmProperty(args.id, args.key, resultHandler);
            }
        }

        public static class contains<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, contains_args, java.lang.Boolean> {
            public contains() {
                super("contains");
            }

            public contains_args getEmptyArgsInstance() {
                return new contains_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
                    public void onComplete(java.lang.Boolean o) {
                        contains_result result = new contains_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        contains_result result = new contains_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, contains_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
                iface.contains(args.id, args.key, resultHandler);
            }
        }

        public static class toMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, toMap_args, java.util.Map<java.lang.String, java.lang.String>> {
            public toMap() {
                super("toMap");
            }

            public toMap_args getEmptyArgsInstance() {
                return new toMap_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.lang.String>>() {
                    public void onComplete(java.util.Map<java.lang.String, java.lang.String> o) {
                        toMap_result result = new toMap_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        toMap_result result = new toMap_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, toMap_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.lang.String>> resultHandler) throws org.apache.thrift.TException {
                iface.toMap(args.id, args.defaults, resultHandler);
            }
        }

        public static class fromMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fromMap_args, Void> {
            public fromMap() {
                super("fromMap");
            }

            public fromMap_args getEmptyArgsInstance() {
                return new fromMap_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        fromMap_result result = new fromMap_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        fromMap_result result = new fromMap_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, fromMap_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.fromMap(args.id, args.map_, resultHandler);
            }
        }

        public static class load<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, load_args, Void> {
            public load() {
                super("load");
            }

            public load_args getEmptyArgsInstance() {
                return new load_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        load_result result = new load_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        load_result result = new load_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, load_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.load(args.id, args.path, resultHandler);
            }
        }

        public static class store<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, store_args, Void> {
            public store() {
                super("store");
            }

            public store_args getEmptyArgsInstance() {
                return new store_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        store_result result = new store_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        store_result result = new store_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, store_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.store(args.id, args.path, resultHandler);
            }
        }

        public static class clear<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clear_args, Void> {
            public clear() {
                super("clear");
            }

            public clear_args getEmptyArgsInstance() {
                return new clear_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        clear_result result = new clear_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        clear_result result = new clear_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, clear_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.clear(args.id, resultHandler);
            }
        }

    }

    public static class newInstance_args implements org.apache.thrift.TBase<newInstance_args, newInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance_args.class, metaDataMap);
        }

        public newInstance_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance_args(newInstance_args other) {
        }

        public newInstance_args deepCopy() {
            return new newInstance_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance_args)
                return this.equals((newInstance_args) that);
            return false;
        }

        public boolean equals(newInstance_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(newInstance_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance_argsStandardScheme getScheme() {
                return new newInstance_argsStandardScheme();
            }
        }

        private static class newInstance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance_argsTupleScheme getScheme() {
                return new newInstance_argsTupleScheme();
            }
        }

        private static class newInstance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance_result implements org.apache.thrift.TBase<newInstance_result, newInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance_resultTupleSchemeFactory();

        private long success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance_result.class, metaDataMap);
        }

        public newInstance_result() {
        }

        public newInstance_result(
                long success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance_result(newInstance_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public newInstance_result deepCopy() {
            return new newInstance_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.ex = null;
        }

        public long getSuccess() {
            return this.success;
        }

        public newInstance_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public newInstance_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Long) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance_result)
                return this.equals((newInstance_result) that);
            return false;
        }

        public boolean equals(newInstance_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(newInstance_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance_resultStandardScheme getScheme() {
                return new newInstance_resultStandardScheme();
            }
        }

        private static class newInstance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance_resultTupleScheme getScheme() {
                return new newInstance_resultTupleScheme();
            }
        }

        private static class newInstance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance2_args implements org.apache.thrift.TBase<newInstance2_args, newInstance2_args._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance2_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance2_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance2_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance2_argsTupleSchemeFactory();

        private long id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance2_args.class, metaDataMap);
        }

        public newInstance2_args() {
        }

        public newInstance2_args(
                long id) {
            this();
            this.id = id;
            setIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance2_args(newInstance2_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
        }

        public newInstance2_args deepCopy() {
            return new newInstance2_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
        }

        public long getId() {
            return this.id;
        }

        public newInstance2_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance2_args)
                return this.equals((newInstance2_args) that);
            return false;
        }

        public boolean equals(newInstance2_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            return hashCode;
        }

        @Override
        public int compareTo(newInstance2_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance2_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance2_argsStandardScheme getScheme() {
                return new newInstance2_argsStandardScheme();
            }
        }

        private static class newInstance2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance2_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance2_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance2_argsTupleScheme getScheme() {
                return new newInstance2_argsTupleScheme();
            }
        }

        private static class newInstance2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance2_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance2_result implements org.apache.thrift.TBase<newInstance2_result, newInstance2_result._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance2_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance2_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance2_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance2_resultTupleSchemeFactory();

        private long success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance2_result.class, metaDataMap);
        }

        public newInstance2_result() {
        }

        public newInstance2_result(
                long success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance2_result(newInstance2_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public newInstance2_result deepCopy() {
            return new newInstance2_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.ex = null;
        }

        public long getSuccess() {
            return this.success;
        }

        public newInstance2_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public newInstance2_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Long) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance2_result)
                return this.equals((newInstance2_result) that);
            return false;
        }

        public boolean equals(newInstance2_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(newInstance2_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance2_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance2_resultStandardScheme getScheme() {
                return new newInstance2_resultStandardScheme();
            }
        }

        private static class newInstance2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance2_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance2_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance2_resultTupleScheme getScheme() {
                return new newInstance2_resultTupleScheme();
            }
        }

        private static class newInstance2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance2_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setProperty_args implements org.apache.thrift.TBase<setProperty_args, setProperty_args._Fields>, java.io.Serializable, Cloneable, Comparable<setProperty_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setProperty_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setProperty_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setProperty_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String key; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String value; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            KEY((short) 2, "key"),
            VALUE((short) 3, "value");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // KEY
                        return KEY;
                    case 3: // VALUE
                        return VALUE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setProperty_args.class, metaDataMap);
        }

        public setProperty_args() {
        }

        public setProperty_args(
                long id,
                java.lang.String key,
                java.lang.String value) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.key = key;
            this.value = value;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setProperty_args(setProperty_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetKey()) {
                this.key = other.key;
            }
            if (other.isSetValue()) {
                this.value = other.value;
            }
        }

        public setProperty_args deepCopy() {
            return new setProperty_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.key = null;
            this.value = null;
        }

        public long getId() {
            return this.id;
        }

        public setProperty_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getKey() {
            return this.key;
        }

        public setProperty_args setKey(@org.apache.thrift.annotation.Nullable java.lang.String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getValue() {
            return this.value;
        }

        public setProperty_args setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
            this.value = value;
            return this;
        }

        public void unsetValue() {
            this.value = null;
        }

        /** Returns true if field value is set (has been assigned a value) and false otherwise */
        public boolean isSetValue() {
            return this.value != null;
        }

        public void setValueIsSet(boolean value) {
            if (!value) {
                this.value = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((java.lang.String) value);
                    }
                    break;

                case VALUE:
                    if (value == null) {
                        unsetValue();
                    } else {
                        setValue((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case KEY:
                    return getKey();

                case VALUE:
                    return getValue();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case KEY:
                    return isSetKey();
                case VALUE:
                    return isSetValue();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setProperty_args)
                return this.equals((setProperty_args) that);
            return false;
        }

        public boolean equals(setProperty_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_value = true && this.isSetValue();
            boolean that_present_value = true && that.isSetValue();
            if (this_present_value || that_present_value) {
                if (!(this_present_value && that_present_value))
                    return false;
                if (!this.value.equals(that.value))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
            if (isSetKey())
                hashCode = hashCode * 8191 + key.hashCode();

            hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
            if (isSetValue())
                hashCode = hashCode * 8191 + value.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(setProperty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetKey(), other.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetValue()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setProperty_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("value:");
            if (this.value == null) {
                sb.append("null");
            } else {
                sb.append(this.value);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setProperty_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setProperty_argsStandardScheme getScheme() {
                return new setProperty_argsStandardScheme();
            }
        }

        private static class setProperty_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setProperty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setProperty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // VALUE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.value = iprot.readString();
                                struct.setValueIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setProperty_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                if (struct.value != null) {
                    oprot.writeFieldBegin(VALUE_FIELD_DESC);
                    oprot.writeString(struct.value);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setProperty_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setProperty_argsTupleScheme getScheme() {
                return new setProperty_argsTupleScheme();
            }
        }

        private static class setProperty_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setProperty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setProperty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetKey()) {
                    optionals.set(1);
                }
                if (struct.isSetValue()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetValue()) {
                    oprot.writeString(struct.value);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setProperty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.value = iprot.readString();
                    struct.setValueIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setProperty_result implements org.apache.thrift.TBase<setProperty_result, setProperty_result._Fields>, java.io.Serializable, Cloneable, Comparable<setProperty_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setProperty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setProperty_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setProperty_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable java.lang.String success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setProperty_result.class, metaDataMap);
        }

        public setProperty_result() {
        }

        public setProperty_result(
                java.lang.String success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setProperty_result(setProperty_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public setProperty_result deepCopy() {
            return new setProperty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public setProperty_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public setProperty_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setProperty_result)
                return this.equals((setProperty_result) that);
            return false;
        }

        public boolean equals(setProperty_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(setProperty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setProperty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setProperty_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setProperty_resultStandardScheme getScheme() {
                return new setProperty_resultStandardScheme();
            }
        }

        private static class setProperty_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setProperty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setProperty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setProperty_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setProperty_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setProperty_resultTupleScheme getScheme() {
                return new setProperty_resultTupleScheme();
            }
        }

        private static class setProperty_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setProperty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setProperty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setProperty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProperty_args implements org.apache.thrift.TBase<getProperty_args, getProperty_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProperty_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProperty_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProperty_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProperty_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String key; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            KEY((short) 2, "key");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // KEY
                        return KEY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProperty_args.class, metaDataMap);
        }

        public getProperty_args() {
        }

        public getProperty_args(
                long id,
                java.lang.String key) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.key = key;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProperty_args(getProperty_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetKey()) {
                this.key = other.key;
            }
        }

        public getProperty_args deepCopy() {
            return new getProperty_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.key = null;
        }

        public long getId() {
            return this.id;
        }

        public getProperty_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getKey() {
            return this.key;
        }

        public getProperty_args setKey(@org.apache.thrift.annotation.Nullable java.lang.String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case KEY:
                    return getKey();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case KEY:
                    return isSetKey();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof getProperty_args)
                return this.equals((getProperty_args) that);
            return false;
        }

        public boolean equals(getProperty_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
            if (isSetKey())
                hashCode = hashCode * 8191 + key.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProperty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetKey(), other.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProperty_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProperty_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProperty_argsStandardScheme getScheme() {
                return new getProperty_argsStandardScheme();
            }
        }

        private static class getProperty_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProperty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProperty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProperty_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProperty_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProperty_argsTupleScheme getScheme() {
                return new getProperty_argsTupleScheme();
            }
        }

        private static class getProperty_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProperty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProperty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetKey()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProperty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProperty_result implements org.apache.thrift.TBase<getProperty_result, getProperty_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProperty_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProperty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProperty_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProperty_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable java.lang.String success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProperty_result.class, metaDataMap);
        }

        public getProperty_result() {
        }

        public getProperty_result(
                java.lang.String success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProperty_result(getProperty_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public getProperty_result deepCopy() {
            return new getProperty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public getProperty_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public getProperty_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof getProperty_result)
                return this.equals((getProperty_result) that);
            return false;
        }

        public boolean equals(getProperty_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProperty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProperty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProperty_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProperty_resultStandardScheme getScheme() {
                return new getProperty_resultStandardScheme();
            }
        }

        private static class getProperty_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProperty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProperty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProperty_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProperty_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProperty_resultTupleScheme getScheme() {
                return new getProperty_resultTupleScheme();
            }
        }

        private static class getProperty_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProperty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProperty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProperty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class rmProperty_args implements org.apache.thrift.TBase<rmProperty_args, rmProperty_args._Fields>, java.io.Serializable, Cloneable, Comparable<rmProperty_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rmProperty_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rmProperty_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rmProperty_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String key; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            KEY((short) 2, "key");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // KEY
                        return KEY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rmProperty_args.class, metaDataMap);
        }

        public rmProperty_args() {
        }

        public rmProperty_args(
                long id,
                java.lang.String key) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.key = key;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public rmProperty_args(rmProperty_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetKey()) {
                this.key = other.key;
            }
        }

        public rmProperty_args deepCopy() {
            return new rmProperty_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.key = null;
        }

        public long getId() {
            return this.id;
        }

        public rmProperty_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getKey() {
            return this.key;
        }

        public rmProperty_args setKey(@org.apache.thrift.annotation.Nullable java.lang.String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case KEY:
                    return getKey();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case KEY:
                    return isSetKey();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof rmProperty_args)
                return this.equals((rmProperty_args) that);
            return false;
        }

        public boolean equals(rmProperty_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
            if (isSetKey())
                hashCode = hashCode * 8191 + key.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(rmProperty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetKey(), other.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("rmProperty_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class rmProperty_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public rmProperty_argsStandardScheme getScheme() {
                return new rmProperty_argsStandardScheme();
            }
        }

        private static class rmProperty_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rmProperty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, rmProperty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, rmProperty_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class rmProperty_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public rmProperty_argsTupleScheme getScheme() {
                return new rmProperty_argsTupleScheme();
            }
        }

        private static class rmProperty_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rmProperty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, rmProperty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetKey()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, rmProperty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class rmProperty_result implements org.apache.thrift.TBase<rmProperty_result, rmProperty_result._Fields>, java.io.Serializable, Cloneable, Comparable<rmProperty_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rmProperty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rmProperty_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rmProperty_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable java.lang.String success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rmProperty_result.class, metaDataMap);
        }

        public rmProperty_result() {
        }

        public rmProperty_result(
                java.lang.String success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public rmProperty_result(rmProperty_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public rmProperty_result deepCopy() {
            return new rmProperty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public rmProperty_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public rmProperty_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof rmProperty_result)
                return this.equals((rmProperty_result) that);
            return false;
        }

        public boolean equals(rmProperty_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(rmProperty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("rmProperty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class rmProperty_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public rmProperty_resultStandardScheme getScheme() {
                return new rmProperty_resultStandardScheme();
            }
        }

        private static class rmProperty_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rmProperty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, rmProperty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, rmProperty_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class rmProperty_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public rmProperty_resultTupleScheme getScheme() {
                return new rmProperty_resultTupleScheme();
            }
        }

        private static class rmProperty_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rmProperty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, rmProperty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, rmProperty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class contains_args implements org.apache.thrift.TBase<contains_args, contains_args._Fields>, java.io.Serializable, Cloneable, Comparable<contains_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("contains_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new contains_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new contains_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String key; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            KEY((short) 2, "key");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // KEY
                        return KEY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(contains_args.class, metaDataMap);
        }

        public contains_args() {
        }

        public contains_args(
                long id,
                java.lang.String key) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.key = key;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public contains_args(contains_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetKey()) {
                this.key = other.key;
            }
        }

        public contains_args deepCopy() {
            return new contains_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.key = null;
        }

        public long getId() {
            return this.id;
        }

        public contains_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getKey() {
            return this.key;
        }

        public contains_args setKey(@org.apache.thrift.annotation.Nullable java.lang.String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case KEY:
                    return getKey();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case KEY:
                    return isSetKey();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof contains_args)
                return this.equals((contains_args) that);
            return false;
        }

        public boolean equals(contains_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
            if (isSetKey())
                hashCode = hashCode * 8191 + key.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(contains_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetKey(), other.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("contains_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class contains_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public contains_argsStandardScheme getScheme() {
                return new contains_argsStandardScheme();
            }
        }

        private static class contains_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<contains_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, contains_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, contains_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class contains_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public contains_argsTupleScheme getScheme() {
                return new contains_argsTupleScheme();
            }
        }

        private static class contains_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<contains_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, contains_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetKey()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, contains_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class contains_result implements org.apache.thrift.TBase<contains_result, contains_result._Fields>, java.io.Serializable, Cloneable, Comparable<contains_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("contains_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new contains_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new contains_resultTupleSchemeFactory();

        private boolean success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(contains_result.class, metaDataMap);
        }

        public contains_result() {
        }

        public contains_result(
                boolean success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public contains_result(contains_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public contains_result deepCopy() {
            return new contains_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
            this.ex = null;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public contains_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public contains_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Boolean) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof contains_result)
                return this.equals((contains_result) that);
            return false;
        }

        public boolean equals(contains_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(contains_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("contains_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class contains_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public contains_resultStandardScheme getScheme() {
                return new contains_resultStandardScheme();
            }
        }

        private static class contains_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<contains_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, contains_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, contains_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class contains_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public contains_resultTupleScheme getScheme() {
                return new contains_resultTupleScheme();
            }
        }

        private static class contains_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<contains_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, contains_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, contains_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class toMap_args implements org.apache.thrift.TBase<toMap_args, toMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<toMap_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toMap_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField DEFAULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaults", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new toMap_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new toMap_argsTupleSchemeFactory();

        private long id; // required
        private boolean defaults; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            DEFAULTS((short) 2, "defaults");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // DEFAULTS
                        return DEFAULTS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private static final int __DEFAULTS_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.DEFAULTS, new org.apache.thrift.meta_data.FieldMetaData("defaults", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toMap_args.class, metaDataMap);
        }

        public toMap_args() {
        }

        public toMap_args(
                long id,
                boolean defaults) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.defaults = defaults;
            setDefaultsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public toMap_args(toMap_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            this.defaults = other.defaults;
        }

        public toMap_args deepCopy() {
            return new toMap_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            setDefaultsIsSet(false);
            this.defaults = false;
        }

        public long getId() {
            return this.id;
        }

        public toMap_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public boolean isDefaults() {
            return this.defaults;
        }

        public toMap_args setDefaults(boolean defaults) {
            this.defaults = defaults;
            setDefaultsIsSet(true);
            return this;
        }

        public void unsetDefaults() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEFAULTS_ISSET_ID);
        }

        /** Returns true if field defaults is set (has been assigned a value) and false otherwise */
        public boolean isSetDefaults() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEFAULTS_ISSET_ID);
        }

        public void setDefaultsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEFAULTS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case DEFAULTS:
                    if (value == null) {
                        unsetDefaults();
                    } else {
                        setDefaults((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case DEFAULTS:
                    return isDefaults();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case DEFAULTS:
                    return isSetDefaults();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof toMap_args)
                return this.equals((toMap_args) that);
            return false;
        }

        public boolean equals(toMap_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_defaults = true;
            boolean that_present_defaults = true;
            if (this_present_defaults || that_present_defaults) {
                if (!(this_present_defaults && that_present_defaults))
                    return false;
                if (this.defaults != that.defaults)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((defaults) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(toMap_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetDefaults(), other.isSetDefaults());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDefaults()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaults, other.defaults);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("toMap_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("defaults:");
            sb.append(this.defaults);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class toMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public toMap_argsStandardScheme getScheme() {
                return new toMap_argsStandardScheme();
            }
        }

        private static class toMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<toMap_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, toMap_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DEFAULTS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.defaults = iprot.readBool();
                                struct.setDefaultsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, toMap_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(DEFAULTS_FIELD_DESC);
                oprot.writeBool(struct.defaults);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class toMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public toMap_argsTupleScheme getScheme() {
                return new toMap_argsTupleScheme();
            }
        }

        private static class toMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<toMap_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, toMap_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetDefaults()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetDefaults()) {
                    oprot.writeBool(struct.defaults);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, toMap_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.defaults = iprot.readBool();
                    struct.setDefaultsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class toMap_result implements org.apache.thrift.TBase<toMap_result, toMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<toMap_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toMap_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new toMap_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new toMap_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toMap_result.class, metaDataMap);
        }

        public toMap_result() {
        }

        public toMap_result(
                java.util.Map<java.lang.String, java.lang.String> success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public toMap_result(toMap_result other) {
            if (other.isSetSuccess()) {
                java.util.Map<java.lang.String, java.lang.String> __this__success = new java.util.HashMap<java.lang.String, java.lang.String>(other.success);
                this.success = __this__success;
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public toMap_result deepCopy() {
            return new toMap_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(java.lang.String key, java.lang.String val) {
            if (this.success == null) {
                this.success = new java.util.HashMap<java.lang.String, java.lang.String>();
            }
            this.success.put(key, val);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Map<java.lang.String, java.lang.String> getSuccess() {
            return this.success;
        }

        public toMap_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public toMap_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.Map<java.lang.String, java.lang.String>) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof toMap_result)
                return this.equals((toMap_result) that);
            return false;
        }

        public boolean equals(toMap_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(toMap_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("toMap_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class toMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public toMap_resultStandardScheme getScheme() {
                return new toMap_resultStandardScheme();
            }
        }

        private static class toMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<toMap_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, toMap_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                                    struct.success = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map0.size);
                                    @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                                    @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                                    for (int _i3 = 0; _i3 < _map0.size; ++_i3) {
                                        _key1 = iprot.readString();
                                        _val2 = iprot.readString();
                                        struct.success.put(_key1, _val2);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, toMap_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.success.entrySet()) {
                            oprot.writeString(_iter4.getKey());
                            oprot.writeString(_iter4.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class toMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public toMap_resultTupleScheme getScheme() {
                return new toMap_resultTupleScheme();
            }
        }

        private static class toMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<toMap_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, toMap_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.success.entrySet()) {
                            oprot.writeString(_iter5.getKey());
                            oprot.writeString(_iter5.getValue());
                        }
                    }
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, toMap_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
                        struct.success = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map6.size);
                        @org.apache.thrift.annotation.Nullable java.lang.String _key7;
                        @org.apache.thrift.annotation.Nullable java.lang.String _val8;
                        for (int _i9 = 0; _i9 < _map6.size; ++_i9) {
                            _key7 = iprot.readString();
                            _val8 = iprot.readString();
                            struct.success.put(_key7, _val8);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fromMap_args implements org.apache.thrift.TBase<fromMap_args, fromMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<fromMap_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fromMap_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField MAP__FIELD_DESC = new org.apache.thrift.protocol.TField("map_", org.apache.thrift.protocol.TType.MAP, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fromMap_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fromMap_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> map_; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            MAP_((short) 2, "map_");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // MAP_
                        return MAP_;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.MAP_, new org.apache.thrift.meta_data.FieldMetaData("map_", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fromMap_args.class, metaDataMap);
        }

        public fromMap_args() {
        }

        public fromMap_args(
                long id,
                java.util.Map<java.lang.String, java.lang.String> map_) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.map_ = map_;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fromMap_args(fromMap_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetMap_()) {
                java.util.Map<java.lang.String, java.lang.String> __this__map_ = new java.util.HashMap<java.lang.String, java.lang.String>(other.map_);
                this.map_ = __this__map_;
            }
        }

        public fromMap_args deepCopy() {
            return new fromMap_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.map_ = null;
        }

        public long getId() {
            return this.id;
        }

        public fromMap_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public int getMap_Size() {
            return (this.map_ == null) ? 0 : this.map_.size();
        }

        public void putToMap_(java.lang.String key, java.lang.String val) {
            if (this.map_ == null) {
                this.map_ = new java.util.HashMap<java.lang.String, java.lang.String>();
            }
            this.map_.put(key, val);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Map<java.lang.String, java.lang.String> getMap_() {
            return this.map_;
        }

        public fromMap_args setMap_(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> map_) {
            this.map_ = map_;
            return this;
        }

        public void unsetMap_() {
            this.map_ = null;
        }

        /** Returns true if field map_ is set (has been assigned a value) and false otherwise */
        public boolean isSetMap_() {
            return this.map_ != null;
        }

        public void setMap_IsSet(boolean value) {
            if (!value) {
                this.map_ = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case MAP_:
                    if (value == null) {
                        unsetMap_();
                    } else {
                        setMap_((java.util.Map<java.lang.String, java.lang.String>) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case MAP_:
                    return getMap_();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case MAP_:
                    return isSetMap_();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof fromMap_args)
                return this.equals((fromMap_args) that);
            return false;
        }

        public boolean equals(fromMap_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_map_ = true && this.isSetMap_();
            boolean that_present_map_ = true && that.isSetMap_();
            if (this_present_map_ || that_present_map_) {
                if (!(this_present_map_ && that_present_map_))
                    return false;
                if (!this.map_.equals(that.map_))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetMap_()) ? 131071 : 524287);
            if (isSetMap_())
                hashCode = hashCode * 8191 + map_.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(fromMap_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetMap_(), other.isSetMap_());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMap_()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_, other.map_);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fromMap_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("map_:");
            if (this.map_ == null) {
                sb.append("null");
            } else {
                sb.append(this.map_);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fromMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fromMap_argsStandardScheme getScheme() {
                return new fromMap_argsStandardScheme();
            }
        }

        private static class fromMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fromMap_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fromMap_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // MAP_
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                                    struct.map_ = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map10.size);
                                    @org.apache.thrift.annotation.Nullable java.lang.String _key11;
                                    @org.apache.thrift.annotation.Nullable java.lang.String _val12;
                                    for (int _i13 = 0; _i13 < _map10.size; ++_i13) {
                                        _key11 = iprot.readString();
                                        _val12 = iprot.readString();
                                        struct.map_.put(_key11, _val12);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setMap_IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fromMap_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.map_ != null) {
                    oprot.writeFieldBegin(MAP__FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.map_.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.map_.entrySet()) {
                            oprot.writeString(_iter14.getKey());
                            oprot.writeString(_iter14.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fromMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fromMap_argsTupleScheme getScheme() {
                return new fromMap_argsTupleScheme();
            }
        }

        private static class fromMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fromMap_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fromMap_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetMap_()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetMap_()) {
                    {
                        oprot.writeI32(struct.map_.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.map_.entrySet()) {
                            oprot.writeString(_iter15.getKey());
                            oprot.writeString(_iter15.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fromMap_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING);
                        struct.map_ = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map16.size);
                        @org.apache.thrift.annotation.Nullable java.lang.String _key17;
                        @org.apache.thrift.annotation.Nullable java.lang.String _val18;
                        for (int _i19 = 0; _i19 < _map16.size; ++_i19) {
                            _key17 = iprot.readString();
                            _val18 = iprot.readString();
                            struct.map_.put(_key17, _val18);
                        }
                    }
                    struct.setMap_IsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fromMap_result implements org.apache.thrift.TBase<fromMap_result, fromMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<fromMap_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fromMap_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fromMap_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fromMap_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fromMap_result.class, metaDataMap);
        }

        public fromMap_result() {
        }

        public fromMap_result(
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fromMap_result(fromMap_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public fromMap_result deepCopy() {
            return new fromMap_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public fromMap_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof fromMap_result)
                return this.equals((fromMap_result) that);
            return false;
        }

        public boolean equals(fromMap_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(fromMap_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fromMap_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fromMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fromMap_resultStandardScheme getScheme() {
                return new fromMap_resultStandardScheme();
            }
        }

        private static class fromMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fromMap_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fromMap_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fromMap_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fromMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fromMap_resultTupleScheme getScheme() {
                return new fromMap_resultTupleScheme();
            }
        }

        private static class fromMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fromMap_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fromMap_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fromMap_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class load_args implements org.apache.thrift.TBase<load_args, load_args._Fields>, java.io.Serializable, Cloneable, Comparable<load_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("load_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new load_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new load_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(load_args.class, metaDataMap);
        }

        public load_args() {
        }

        public load_args(
                long id,
                java.lang.String path) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.path = path;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public load_args(load_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetPath()) {
                this.path = other.path;
            }
        }

        public load_args deepCopy() {
            return new load_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.path = null;
        }

        public long getId() {
            return this.id;
        }

        public load_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public load_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof load_args)
                return this.equals((load_args) that);
            return false;
        }

        public boolean equals(load_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(load_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("load_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class load_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public load_argsStandardScheme getScheme() {
                return new load_argsStandardScheme();
            }
        }

        private static class load_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<load_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, load_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, load_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class load_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public load_argsTupleScheme getScheme() {
                return new load_argsTupleScheme();
            }
        }

        private static class load_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<load_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, load_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, load_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class load_result implements org.apache.thrift.TBase<load_result, load_result._Fields>, java.io.Serializable, Cloneable, Comparable<load_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("load_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new load_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new load_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(load_result.class, metaDataMap);
        }

        public load_result() {
        }

        public load_result(
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public load_result(load_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public load_result deepCopy() {
            return new load_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public load_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof load_result)
                return this.equals((load_result) that);
            return false;
        }

        public boolean equals(load_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(load_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("load_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class load_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public load_resultStandardScheme getScheme() {
                return new load_resultStandardScheme();
            }
        }

        private static class load_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<load_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, load_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, load_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class load_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public load_resultTupleScheme getScheme() {
                return new load_resultTupleScheme();
            }
        }

        private static class load_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<load_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, load_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, load_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class store_args implements org.apache.thrift.TBase<store_args, store_args._Fields>, java.io.Serializable, Cloneable, Comparable<store_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("store_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new store_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new store_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(store_args.class, metaDataMap);
        }

        public store_args() {
        }

        public store_args(
                long id,
                java.lang.String path) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.path = path;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public store_args(store_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetPath()) {
                this.path = other.path;
            }
        }

        public store_args deepCopy() {
            return new store_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.path = null;
        }

        public long getId() {
            return this.id;
        }

        public store_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public store_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof store_args)
                return this.equals((store_args) that);
            return false;
        }

        public boolean equals(store_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(store_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("store_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class store_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public store_argsStandardScheme getScheme() {
                return new store_argsStandardScheme();
            }
        }

        private static class store_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<store_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, store_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, store_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class store_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public store_argsTupleScheme getScheme() {
                return new store_argsTupleScheme();
            }
        }

        private static class store_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<store_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, store_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, store_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class store_result implements org.apache.thrift.TBase<store_result, store_result._Fields>, java.io.Serializable, Cloneable, Comparable<store_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("store_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new store_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new store_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(store_result.class, metaDataMap);
        }

        public store_result() {
        }

        public store_result(
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public store_result(store_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public store_result deepCopy() {
            return new store_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public store_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof store_result)
                return this.equals((store_result) that);
            return false;
        }

        public boolean equals(store_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(store_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("store_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class store_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public store_resultStandardScheme getScheme() {
                return new store_resultStandardScheme();
            }
        }

        private static class store_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<store_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, store_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, store_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class store_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public store_resultTupleScheme getScheme() {
                return new store_resultTupleScheme();
            }
        }

        private static class store_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<store_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, store_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, store_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class clear_args implements org.apache.thrift.TBase<clear_args, clear_args._Fields>, java.io.Serializable, Cloneable, Comparable<clear_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clear_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clear_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clear_argsTupleSchemeFactory();

        private long id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clear_args.class, metaDataMap);
        }

        public clear_args() {
        }

        public clear_args(
                long id) {
            this();
            this.id = id;
            setIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public clear_args(clear_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
        }

        public clear_args deepCopy() {
            return new clear_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
        }

        public long getId() {
            return this.id;
        }

        public clear_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof clear_args)
                return this.equals((clear_args) that);
            return false;
        }

        public boolean equals(clear_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            return hashCode;
        }

        @Override
        public int compareTo(clear_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("clear_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class clear_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public clear_argsStandardScheme getScheme() {
                return new clear_argsStandardScheme();
            }
        }

        private static class clear_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<clear_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, clear_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, clear_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class clear_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public clear_argsTupleScheme getScheme() {
                return new clear_argsTupleScheme();
            }
        }

        private static class clear_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<clear_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, clear_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, clear_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class clear_result implements org.apache.thrift.TBase<clear_result, clear_result._Fields>, java.io.Serializable, Cloneable, Comparable<clear_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clear_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clear_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clear_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clear_result.class, metaDataMap);
        }

        public clear_result() {
        }

        public clear_result(
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public clear_result(clear_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public clear_result deepCopy() {
            return new clear_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public clear_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof clear_result)
                return this.equals((clear_result) that);
            return false;
        }

        public boolean equals(clear_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(clear_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("clear_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class clear_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public clear_resultStandardScheme getScheme() {
                return new clear_resultStandardScheme();
            }
        }

        private static class clear_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<clear_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, clear_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, clear_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class clear_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public clear_resultTupleScheme getScheme() {
                return new clear_resultTupleScheme();
            }
        }

        private static class clear_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<clear_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, clear_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, clear_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
