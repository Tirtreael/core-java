/**
 * Autogenerated by Thrift Compiler (0.15.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.ignis.rpc.driver;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IWorkerService {

    public interface Iface {

        public void start(IWorkerId id) throws org.apache.thrift.TException;

        public void destroy(IWorkerId id) throws org.apache.thrift.TException;

        public IWorkerId newInstance(long id, java.lang.String type) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public IWorkerId newInstance3(long id, java.lang.String name, java.lang.String type) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public IWorkerId newInstance4(long id, java.lang.String type, int cores, int instances) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public IWorkerId newInstance5(long id, java.lang.String name, java.lang.String type, int cores, int instances) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public void setName(IWorkerId id, java.lang.String name) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId parallelize(IWorkerId id, long dataId, long partitions) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId parallelize4(IWorkerId id, long dataId, long partitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId importDataFrame(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId importDataFrame3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId plainFile(IWorkerId id, java.lang.String path, byte delim) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId plainFile4(IWorkerId id, java.lang.String path, long minPartitions, byte delim) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId textFile(IWorkerId id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId textFile3(IWorkerId id, java.lang.String path, long minPartitions) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId partitionObjectFile(IWorkerId id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId partitionObjectFile3(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId partitionTextFile(IWorkerId id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId partitionJsonFile3a(IWorkerId id, java.lang.String path, boolean objectMapping) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId partitionJsonFile3b(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public void loadLibrary(IWorkerId id, java.lang.String lib) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public void execute(IWorkerId id, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId executeTo(IWorkerId id, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public void voidCall(IWorkerId id, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public void voidCall3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId call(IWorkerId id, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

        public org.ignis.rpc.driver.IDataFrameId call3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void start(IWorkerId id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void destroy(IWorkerId id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void newInstance(long id, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException;

        public void newInstance3(long id, java.lang.String name, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException;

        public void newInstance4(long id, java.lang.String type, int cores, int instances, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException;

        public void newInstance5(long id, java.lang.String name, java.lang.String type, int cores, int instances, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException;

        public void setName(IWorkerId id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void parallelize(IWorkerId id, long dataId, long partitions, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void parallelize4(IWorkerId id, long dataId, long partitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void importDataFrame(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void importDataFrame3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void plainFile(IWorkerId id, java.lang.String path, byte delim, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void plainFile4(IWorkerId id, java.lang.String path, long minPartitions, byte delim, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void textFile(IWorkerId id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void textFile3(IWorkerId id, java.lang.String path, long minPartitions, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void partitionObjectFile(IWorkerId id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void partitionObjectFile3(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void partitionTextFile(IWorkerId id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void partitionJsonFile3a(IWorkerId id, java.lang.String path, boolean objectMapping, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void partitionJsonFile3b(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void loadLibrary(IWorkerId id, java.lang.String lib, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void execute(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void executeTo(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void voidCall(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void voidCall3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void call(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

        public void call3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void start(IWorkerId id) throws org.apache.thrift.TException {
            send_start(id);
            recv_start();
        }

        public void send_start(IWorkerId id) throws org.apache.thrift.TException {
            start_args args = new start_args();
            args.setId(id);
            sendBase("start", args);
        }

        public void recv_start() throws org.apache.thrift.TException {
            start_result result = new start_result();
            receiveBase(result, "start");
            return;
        }

        public void destroy(IWorkerId id) throws org.apache.thrift.TException {
            send_destroy(id);
            recv_destroy();
        }

        public void send_destroy(IWorkerId id) throws org.apache.thrift.TException {
            destroy_args args = new destroy_args();
            args.setId(id);
            sendBase("destroy", args);
        }

        public void recv_destroy() throws org.apache.thrift.TException {
            destroy_result result = new destroy_result();
            receiveBase(result, "destroy");
            return;
        }

        public IWorkerId newInstance(long id, java.lang.String type) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_newInstance(id, type);
            return recv_newInstance();
        }

        public void send_newInstance(long id, java.lang.String type) throws org.apache.thrift.TException {
            newInstance_args args = new newInstance_args();
            args.setId(id);
            args.setType(type);
            sendBase("newInstance", args);
        }

        public IWorkerId recv_newInstance() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            newInstance_result result = new newInstance_result();
            receiveBase(result, "newInstance");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "newInstance failed: unknown result");
        }

        public IWorkerId newInstance3(long id, java.lang.String name, java.lang.String type) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_newInstance3(id, name, type);
            return recv_newInstance3();
        }

        public void send_newInstance3(long id, java.lang.String name, java.lang.String type) throws org.apache.thrift.TException {
            newInstance3_args args = new newInstance3_args();
            args.setId(id);
            args.setName(name);
            args.setType(type);
            sendBase("newInstance3", args);
        }

        public IWorkerId recv_newInstance3() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            newInstance3_result result = new newInstance3_result();
            receiveBase(result, "newInstance3");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "newInstance3 failed: unknown result");
        }

        public IWorkerId newInstance4(long id, java.lang.String type, int cores, int instances) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_newInstance4(id, type, cores, instances);
            return recv_newInstance4();
        }

        public void send_newInstance4(long id, java.lang.String type, int cores, int instances) throws org.apache.thrift.TException {
            newInstance4_args args = new newInstance4_args();
            args.setId(id);
            args.setType(type);
            args.setCores(cores);
            args.setInstances(instances);
            sendBase("newInstance4", args);
        }

        public IWorkerId recv_newInstance4() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            newInstance4_result result = new newInstance4_result();
            receiveBase(result, "newInstance4");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "newInstance4 failed: unknown result");
        }

        public IWorkerId newInstance5(long id, java.lang.String name, java.lang.String type, int cores, int instances) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_newInstance5(id, name, type, cores, instances);
            return recv_newInstance5();
        }

        public void send_newInstance5(long id, java.lang.String name, java.lang.String type, int cores, int instances) throws org.apache.thrift.TException {
            newInstance5_args args = new newInstance5_args();
            args.setId(id);
            args.setName(name);
            args.setType(type);
            args.setCores(cores);
            args.setInstances(instances);
            sendBase("newInstance5", args);
        }

        public IWorkerId recv_newInstance5() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            newInstance5_result result = new newInstance5_result();
            receiveBase(result, "newInstance5");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "newInstance5 failed: unknown result");
        }

        public void setName(IWorkerId id, java.lang.String name) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_setName(id, name);
            recv_setName();
        }

        public void send_setName(IWorkerId id, java.lang.String name) throws org.apache.thrift.TException {
            setName_args args = new setName_args();
            args.setId(id);
            args.setName(name);
            sendBase("setName", args);
        }

        public void recv_setName() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            setName_result result = new setName_result();
            receiveBase(result, "setName");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public org.ignis.rpc.driver.IDataFrameId parallelize(IWorkerId id, long dataId, long partitions) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_parallelize(id, dataId, partitions);
            return recv_parallelize();
        }

        public void send_parallelize(IWorkerId id, long dataId, long partitions) throws org.apache.thrift.TException {
            parallelize_args args = new parallelize_args();
            args.setId(id);
            args.setDataId(dataId);
            args.setPartitions(partitions);
            sendBase("parallelize", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_parallelize() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            parallelize_result result = new parallelize_result();
            receiveBase(result, "parallelize");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parallelize failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId parallelize4(IWorkerId id, long dataId, long partitions, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_parallelize4(id, dataId, partitions, src);
            return recv_parallelize4();
        }

        public void send_parallelize4(IWorkerId id, long dataId, long partitions, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            parallelize4_args args = new parallelize4_args();
            args.setId(id);
            args.setDataId(dataId);
            args.setPartitions(partitions);
            args.setSrc(src);
            sendBase("parallelize4", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_parallelize4() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            parallelize4_result result = new parallelize4_result();
            receiveBase(result, "parallelize4");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parallelize4 failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId importDataFrame(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_importDataFrame(id, data);
            return recv_importDataFrame();
        }

        public void send_importDataFrame(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data) throws org.apache.thrift.TException {
            importDataFrame_args args = new importDataFrame_args();
            args.setId(id);
            args.setData(data);
            sendBase("importDataFrame", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_importDataFrame() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            importDataFrame_result result = new importDataFrame_result();
            receiveBase(result, "importDataFrame");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "importDataFrame failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId importDataFrame3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_importDataFrame3(id, data, src);
            return recv_importDataFrame3();
        }

        public void send_importDataFrame3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            importDataFrame3_args args = new importDataFrame3_args();
            args.setId(id);
            args.setData(data);
            args.setSrc(src);
            sendBase("importDataFrame3", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_importDataFrame3() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            importDataFrame3_result result = new importDataFrame3_result();
            receiveBase(result, "importDataFrame3");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "importDataFrame3 failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId plainFile(IWorkerId id, java.lang.String path, byte delim) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_plainFile(id, path, delim);
            return recv_plainFile();
        }

        public void send_plainFile(IWorkerId id, java.lang.String path, byte delim) throws org.apache.thrift.TException {
            plainFile_args args = new plainFile_args();
            args.setId(id);
            args.setPath(path);
            args.setDelim(delim);
            sendBase("plainFile", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_plainFile() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            plainFile_result result = new plainFile_result();
            receiveBase(result, "plainFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "plainFile failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId plainFile4(IWorkerId id, java.lang.String path, long minPartitions, byte delim) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_plainFile4(id, path, minPartitions, delim);
            return recv_plainFile4();
        }

        public void send_plainFile4(IWorkerId id, java.lang.String path, long minPartitions, byte delim) throws org.apache.thrift.TException {
            plainFile4_args args = new plainFile4_args();
            args.setId(id);
            args.setPath(path);
            args.setMinPartitions(minPartitions);
            args.setDelim(delim);
            sendBase("plainFile4", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_plainFile4() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            plainFile4_result result = new plainFile4_result();
            receiveBase(result, "plainFile4");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "plainFile4 failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId textFile(IWorkerId id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_textFile(id, path);
            return recv_textFile();
        }

        public void send_textFile(IWorkerId id, java.lang.String path) throws org.apache.thrift.TException {
            textFile_args args = new textFile_args();
            args.setId(id);
            args.setPath(path);
            sendBase("textFile", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_textFile() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            textFile_result result = new textFile_result();
            receiveBase(result, "textFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "textFile failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId textFile3(IWorkerId id, java.lang.String path, long minPartitions) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_textFile3(id, path, minPartitions);
            return recv_textFile3();
        }

        public void send_textFile3(IWorkerId id, java.lang.String path, long minPartitions) throws org.apache.thrift.TException {
            textFile3_args args = new textFile3_args();
            args.setId(id);
            args.setPath(path);
            args.setMinPartitions(minPartitions);
            sendBase("textFile3", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_textFile3() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            textFile3_result result = new textFile3_result();
            receiveBase(result, "textFile3");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "textFile3 failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId partitionObjectFile(IWorkerId id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_partitionObjectFile(id, path);
            return recv_partitionObjectFile();
        }

        public void send_partitionObjectFile(IWorkerId id, java.lang.String path) throws org.apache.thrift.TException {
            partitionObjectFile_args args = new partitionObjectFile_args();
            args.setId(id);
            args.setPath(path);
            sendBase("partitionObjectFile", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_partitionObjectFile() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            partitionObjectFile_result result = new partitionObjectFile_result();
            receiveBase(result, "partitionObjectFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partitionObjectFile failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId partitionObjectFile3(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_partitionObjectFile3(id, path, src);
            return recv_partitionObjectFile3();
        }

        public void send_partitionObjectFile3(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            partitionObjectFile3_args args = new partitionObjectFile3_args();
            args.setId(id);
            args.setPath(path);
            args.setSrc(src);
            sendBase("partitionObjectFile3", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_partitionObjectFile3() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            partitionObjectFile3_result result = new partitionObjectFile3_result();
            receiveBase(result, "partitionObjectFile3");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partitionObjectFile3 failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId partitionTextFile(IWorkerId id, java.lang.String path) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_partitionTextFile(id, path);
            return recv_partitionTextFile();
        }

        public void send_partitionTextFile(IWorkerId id, java.lang.String path) throws org.apache.thrift.TException {
            partitionTextFile_args args = new partitionTextFile_args();
            args.setId(id);
            args.setPath(path);
            sendBase("partitionTextFile", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_partitionTextFile() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            partitionTextFile_result result = new partitionTextFile_result();
            receiveBase(result, "partitionTextFile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partitionTextFile failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId partitionJsonFile3a(IWorkerId id, java.lang.String path, boolean objectMapping) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_partitionJsonFile3a(id, path, objectMapping);
            return recv_partitionJsonFile3a();
        }

        public void send_partitionJsonFile3a(IWorkerId id, java.lang.String path, boolean objectMapping) throws org.apache.thrift.TException {
            partitionJsonFile3a_args args = new partitionJsonFile3a_args();
            args.setId(id);
            args.setPath(path);
            args.setObjectMapping(objectMapping);
            sendBase("partitionJsonFile3a", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_partitionJsonFile3a() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            partitionJsonFile3a_result result = new partitionJsonFile3a_result();
            receiveBase(result, "partitionJsonFile3a");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partitionJsonFile3a failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId partitionJsonFile3b(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_partitionJsonFile3b(id, path, src);
            return recv_partitionJsonFile3b();
        }

        public void send_partitionJsonFile3b(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            partitionJsonFile3b_args args = new partitionJsonFile3b_args();
            args.setId(id);
            args.setPath(path);
            args.setSrc(src);
            sendBase("partitionJsonFile3b", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_partitionJsonFile3b() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            partitionJsonFile3b_result result = new partitionJsonFile3b_result();
            receiveBase(result, "partitionJsonFile3b");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partitionJsonFile3b failed: unknown result");
        }

        public void loadLibrary(IWorkerId id, java.lang.String lib) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_loadLibrary(id, lib);
            recv_loadLibrary();
        }

        public void send_loadLibrary(IWorkerId id, java.lang.String lib) throws org.apache.thrift.TException {
            loadLibrary_args args = new loadLibrary_args();
            args.setId(id);
            args.setLib(lib);
            sendBase("loadLibrary", args);
        }

        public void recv_loadLibrary() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            loadLibrary_result result = new loadLibrary_result();
            receiveBase(result, "loadLibrary");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void execute(IWorkerId id, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_execute(id, src);
            recv_execute();
        }

        public void send_execute(IWorkerId id, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            execute_args args = new execute_args();
            args.setId(id);
            args.setSrc(src);
            sendBase("execute", args);
        }

        public void recv_execute() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            execute_result result = new execute_result();
            receiveBase(result, "execute");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public org.ignis.rpc.driver.IDataFrameId executeTo(IWorkerId id, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_executeTo(id, src);
            return recv_executeTo();
        }

        public void send_executeTo(IWorkerId id, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            executeTo_args args = new executeTo_args();
            args.setId(id);
            args.setSrc(src);
            sendBase("executeTo", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_executeTo() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            executeTo_result result = new executeTo_result();
            receiveBase(result, "executeTo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeTo failed: unknown result");
        }

        public void voidCall(IWorkerId id, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_voidCall(id, src);
            recv_voidCall();
        }

        public void send_voidCall(IWorkerId id, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            voidCall_args args = new voidCall_args();
            args.setId(id);
            args.setSrc(src);
            sendBase("voidCall", args);
        }

        public void recv_voidCall() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            voidCall_result result = new voidCall_result();
            receiveBase(result, "voidCall");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void voidCall3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_voidCall3(id, data, src);
            recv_voidCall3();
        }

        public void send_voidCall3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            voidCall3_args args = new voidCall3_args();
            args.setId(id);
            args.setData(data);
            args.setSrc(src);
            sendBase("voidCall3", args);
        }

        public void recv_voidCall3() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            voidCall3_result result = new voidCall3_result();
            receiveBase(result, "voidCall3");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public org.ignis.rpc.driver.IDataFrameId call(IWorkerId id, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_call(id, src);
            return recv_call();
        }

        public void send_call(IWorkerId id, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            call_args args = new call_args();
            args.setId(id);
            args.setSrc(src);
            sendBase("call", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_call() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            call_result result = new call_result();
            receiveBase(result, "call");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "call failed: unknown result");
        }

        public org.ignis.rpc.driver.IDataFrameId call3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src) throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            send_call3(id, data, src);
            return recv_call3();
        }

        public void send_call3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src) throws org.apache.thrift.TException {
            call3_args args = new call3_args();
            args.setId(id);
            args.setData(data);
            args.setSrc(src);
            sendBase("call3", args);
        }

        public org.ignis.rpc.driver.IDataFrameId recv_call3() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
            call3_result result = new call3_result();
            receiveBase(result, "call3");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "call3 failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void start(IWorkerId id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            start_call method_call = new start_call(id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class start_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private IWorkerId id;

            public start_call(IWorkerId id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("start", org.apache.thrift.protocol.TMessageType.CALL, 0));
                start_args args = new start_args();
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void destroy(IWorkerId id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            destroy_call method_call = new destroy_call(id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class destroy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private IWorkerId id;

            public destroy_call(IWorkerId id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("destroy", org.apache.thrift.protocol.TMessageType.CALL, 0));
                destroy_args args = new destroy_args();
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void newInstance(long id, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            newInstance_call method_call = new newInstance_call(id, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class newInstance_call extends org.apache.thrift.async.TAsyncMethodCall<IWorkerId> {
            private long id;
            private java.lang.String type;

            public newInstance_call(long id, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("newInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
                newInstance_args args = new newInstance_args();
                args.setId(id);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public IWorkerId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_newInstance();
            }
        }

        public void newInstance3(long id, java.lang.String name, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            newInstance3_call method_call = new newInstance3_call(id, name, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class newInstance3_call extends org.apache.thrift.async.TAsyncMethodCall<IWorkerId> {
            private long id;
            private java.lang.String name;
            private java.lang.String type;

            public newInstance3_call(long id, java.lang.String name, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.name = name;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("newInstance3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                newInstance3_args args = new newInstance3_args();
                args.setId(id);
                args.setName(name);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public IWorkerId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_newInstance3();
            }
        }

        public void newInstance4(long id, java.lang.String type, int cores, int instances, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            newInstance4_call method_call = new newInstance4_call(id, type, cores, instances, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class newInstance4_call extends org.apache.thrift.async.TAsyncMethodCall<IWorkerId> {
            private long id;
            private java.lang.String type;
            private int cores;
            private int instances;

            public newInstance4_call(long id, java.lang.String type, int cores, int instances, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.type = type;
                this.cores = cores;
                this.instances = instances;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("newInstance4", org.apache.thrift.protocol.TMessageType.CALL, 0));
                newInstance4_args args = new newInstance4_args();
                args.setId(id);
                args.setType(type);
                args.setCores(cores);
                args.setInstances(instances);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public IWorkerId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_newInstance4();
            }
        }

        public void newInstance5(long id, java.lang.String name, java.lang.String type, int cores, int instances, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            newInstance5_call method_call = new newInstance5_call(id, name, type, cores, instances, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class newInstance5_call extends org.apache.thrift.async.TAsyncMethodCall<IWorkerId> {
            private long id;
            private java.lang.String name;
            private java.lang.String type;
            private int cores;
            private int instances;

            public newInstance5_call(long id, java.lang.String name, java.lang.String type, int cores, int instances, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.name = name;
                this.type = type;
                this.cores = cores;
                this.instances = instances;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("newInstance5", org.apache.thrift.protocol.TMessageType.CALL, 0));
                newInstance5_args args = new newInstance5_args();
                args.setId(id);
                args.setName(name);
                args.setType(type);
                args.setCores(cores);
                args.setInstances(instances);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public IWorkerId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_newInstance5();
            }
        }

        public void setName(IWorkerId id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setName_call method_call = new setName_call(id, name, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setName_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private IWorkerId id;
            private java.lang.String name;

            public setName_call(IWorkerId id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.name = name;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setName", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setName_args args = new setName_args();
                args.setId(id);
                args.setName(name);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void parallelize(IWorkerId id, long dataId, long partitions, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            parallelize_call method_call = new parallelize_call(id, dataId, partitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class parallelize_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private long dataId;
            private long partitions;

            public parallelize_call(IWorkerId id, long dataId, long partitions, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.dataId = dataId;
                this.partitions = partitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parallelize", org.apache.thrift.protocol.TMessageType.CALL, 0));
                parallelize_args args = new parallelize_args();
                args.setId(id);
                args.setDataId(dataId);
                args.setPartitions(partitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_parallelize();
            }
        }

        public void parallelize4(IWorkerId id, long dataId, long partitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            parallelize4_call method_call = new parallelize4_call(id, dataId, partitions, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class parallelize4_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private long dataId;
            private long partitions;
            private org.ignis.rpc.ISource src;

            public parallelize4_call(IWorkerId id, long dataId, long partitions, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.dataId = dataId;
                this.partitions = partitions;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parallelize4", org.apache.thrift.protocol.TMessageType.CALL, 0));
                parallelize4_args args = new parallelize4_args();
                args.setId(id);
                args.setDataId(dataId);
                args.setPartitions(partitions);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_parallelize4();
            }
        }

        public void importDataFrame(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            importDataFrame_call method_call = new importDataFrame_call(id, data, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class importDataFrame_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private org.ignis.rpc.driver.IDataFrameId data;

            public importDataFrame_call(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.data = data;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("importDataFrame", org.apache.thrift.protocol.TMessageType.CALL, 0));
                importDataFrame_args args = new importDataFrame_args();
                args.setId(id);
                args.setData(data);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_importDataFrame();
            }
        }

        public void importDataFrame3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            importDataFrame3_call method_call = new importDataFrame3_call(id, data, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class importDataFrame3_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private org.ignis.rpc.driver.IDataFrameId data;
            private org.ignis.rpc.ISource src;

            public importDataFrame3_call(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.data = data;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("importDataFrame3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                importDataFrame3_args args = new importDataFrame3_args();
                args.setId(id);
                args.setData(data);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_importDataFrame3();
            }
        }

        public void plainFile(IWorkerId id, java.lang.String path, byte delim, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            plainFile_call method_call = new plainFile_call(id, path, delim, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class plainFile_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private java.lang.String path;
            private byte delim;

            public plainFile_call(IWorkerId id, java.lang.String path, byte delim, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
                this.delim = delim;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("plainFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                plainFile_args args = new plainFile_args();
                args.setId(id);
                args.setPath(path);
                args.setDelim(delim);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_plainFile();
            }
        }

        public void plainFile4(IWorkerId id, java.lang.String path, long minPartitions, byte delim, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            plainFile4_call method_call = new plainFile4_call(id, path, minPartitions, delim, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class plainFile4_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private java.lang.String path;
            private long minPartitions;
            private byte delim;

            public plainFile4_call(IWorkerId id, java.lang.String path, long minPartitions, byte delim, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
                this.minPartitions = minPartitions;
                this.delim = delim;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("plainFile4", org.apache.thrift.protocol.TMessageType.CALL, 0));
                plainFile4_args args = new plainFile4_args();
                args.setId(id);
                args.setPath(path);
                args.setMinPartitions(minPartitions);
                args.setDelim(delim);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_plainFile4();
            }
        }

        public void textFile(IWorkerId id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            textFile_call method_call = new textFile_call(id, path, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class textFile_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private java.lang.String path;

            public textFile_call(IWorkerId id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("textFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                textFile_args args = new textFile_args();
                args.setId(id);
                args.setPath(path);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_textFile();
            }
        }

        public void textFile3(IWorkerId id, java.lang.String path, long minPartitions, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            textFile3_call method_call = new textFile3_call(id, path, minPartitions, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class textFile3_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private java.lang.String path;
            private long minPartitions;

            public textFile3_call(IWorkerId id, java.lang.String path, long minPartitions, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
                this.minPartitions = minPartitions;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("textFile3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                textFile3_args args = new textFile3_args();
                args.setId(id);
                args.setPath(path);
                args.setMinPartitions(minPartitions);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_textFile3();
            }
        }

        public void partitionObjectFile(IWorkerId id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            partitionObjectFile_call method_call = new partitionObjectFile_call(id, path, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class partitionObjectFile_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private java.lang.String path;

            public partitionObjectFile_call(IWorkerId id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partitionObjectFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                partitionObjectFile_args args = new partitionObjectFile_args();
                args.setId(id);
                args.setPath(path);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_partitionObjectFile();
            }
        }

        public void partitionObjectFile3(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            partitionObjectFile3_call method_call = new partitionObjectFile3_call(id, path, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class partitionObjectFile3_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private java.lang.String path;
            private org.ignis.rpc.ISource src;

            public partitionObjectFile3_call(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partitionObjectFile3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                partitionObjectFile3_args args = new partitionObjectFile3_args();
                args.setId(id);
                args.setPath(path);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_partitionObjectFile3();
            }
        }

        public void partitionTextFile(IWorkerId id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            partitionTextFile_call method_call = new partitionTextFile_call(id, path, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class partitionTextFile_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private java.lang.String path;

            public partitionTextFile_call(IWorkerId id, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partitionTextFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                partitionTextFile_args args = new partitionTextFile_args();
                args.setId(id);
                args.setPath(path);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_partitionTextFile();
            }
        }

        public void partitionJsonFile3a(IWorkerId id, java.lang.String path, boolean objectMapping, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            partitionJsonFile3a_call method_call = new partitionJsonFile3a_call(id, path, objectMapping, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class partitionJsonFile3a_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private java.lang.String path;
            private boolean objectMapping;

            public partitionJsonFile3a_call(IWorkerId id, java.lang.String path, boolean objectMapping, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
                this.objectMapping = objectMapping;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partitionJsonFile3a", org.apache.thrift.protocol.TMessageType.CALL, 0));
                partitionJsonFile3a_args args = new partitionJsonFile3a_args();
                args.setId(id);
                args.setPath(path);
                args.setObjectMapping(objectMapping);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_partitionJsonFile3a();
            }
        }

        public void partitionJsonFile3b(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            partitionJsonFile3b_call method_call = new partitionJsonFile3b_call(id, path, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class partitionJsonFile3b_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private java.lang.String path;
            private org.ignis.rpc.ISource src;

            public partitionJsonFile3b_call(IWorkerId id, java.lang.String path, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.path = path;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partitionJsonFile3b", org.apache.thrift.protocol.TMessageType.CALL, 0));
                partitionJsonFile3b_args args = new partitionJsonFile3b_args();
                args.setId(id);
                args.setPath(path);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_partitionJsonFile3b();
            }
        }

        public void loadLibrary(IWorkerId id, java.lang.String lib, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            loadLibrary_call method_call = new loadLibrary_call(id, lib, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class loadLibrary_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private IWorkerId id;
            private java.lang.String lib;

            public loadLibrary_call(IWorkerId id, java.lang.String lib, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.lib = lib;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadLibrary", org.apache.thrift.protocol.TMessageType.CALL, 0));
                loadLibrary_args args = new loadLibrary_args();
                args.setId(id);
                args.setLib(lib);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void execute(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            execute_call method_call = new execute_call(id, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class execute_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private IWorkerId id;
            private org.ignis.rpc.ISource src;

            public execute_call(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute", org.apache.thrift.protocol.TMessageType.CALL, 0));
                execute_args args = new execute_args();
                args.setId(id);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void executeTo(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            executeTo_call method_call = new executeTo_call(id, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class executeTo_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private org.ignis.rpc.ISource src;

            public executeTo_call(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeTo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                executeTo_args args = new executeTo_args();
                args.setId(id);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_executeTo();
            }
        }

        public void voidCall(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            voidCall_call method_call = new voidCall_call(id, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class voidCall_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private IWorkerId id;
            private org.ignis.rpc.ISource src;

            public voidCall_call(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("voidCall", org.apache.thrift.protocol.TMessageType.CALL, 0));
                voidCall_args args = new voidCall_args();
                args.setId(id);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void voidCall3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            voidCall3_call method_call = new voidCall3_call(id, data, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class voidCall3_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private IWorkerId id;
            private org.ignis.rpc.driver.IDataFrameId data;
            private org.ignis.rpc.ISource src;

            public voidCall3_call(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.data = data;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("voidCall3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                voidCall3_args args = new voidCall3_args();
                args.setId(id);
                args.setData(data);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void call(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            call_call method_call = new call_call(id, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class call_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private org.ignis.rpc.ISource src;

            public call_call(IWorkerId id, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("call", org.apache.thrift.protocol.TMessageType.CALL, 0));
                call_args args = new call_args();
                args.setId(id);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_call();
            }
        }

        public void call3(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            call3_call method_call = new call3_call(id, data, src, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class call3_call extends org.apache.thrift.async.TAsyncMethodCall<org.ignis.rpc.driver.IDataFrameId> {
            private IWorkerId id;
            private org.ignis.rpc.driver.IDataFrameId data;
            private org.ignis.rpc.ISource src;

            public call3_call(IWorkerId id, org.ignis.rpc.driver.IDataFrameId data, org.ignis.rpc.ISource src, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.data = data;
                this.src = src;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("call3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                call3_args args = new call3_args();
                args.setId(id);
                args.setData(data);
                args.setSrc(src);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public org.ignis.rpc.driver.IDataFrameId getResult() throws org.ignis.rpc.driver.IDriverException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_call3();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("start", new start());
            processMap.put("destroy", new destroy());
            processMap.put("newInstance", new newInstance());
            processMap.put("newInstance3", new newInstance3());
            processMap.put("newInstance4", new newInstance4());
            processMap.put("newInstance5", new newInstance5());
            processMap.put("setName", new setName());
            processMap.put("parallelize", new parallelize());
            processMap.put("parallelize4", new parallelize4());
            processMap.put("importDataFrame", new importDataFrame());
            processMap.put("importDataFrame3", new importDataFrame3());
            processMap.put("plainFile", new plainFile());
            processMap.put("plainFile4", new plainFile4());
            processMap.put("textFile", new textFile());
            processMap.put("textFile3", new textFile3());
            processMap.put("partitionObjectFile", new partitionObjectFile());
            processMap.put("partitionObjectFile3", new partitionObjectFile3());
            processMap.put("partitionTextFile", new partitionTextFile());
            processMap.put("partitionJsonFile3a", new partitionJsonFile3a());
            processMap.put("partitionJsonFile3b", new partitionJsonFile3b());
            processMap.put("loadLibrary", new loadLibrary());
            processMap.put("execute", new execute());
            processMap.put("executeTo", new executeTo());
            processMap.put("voidCall", new voidCall());
            processMap.put("voidCall3", new voidCall3());
            processMap.put("call", new call());
            processMap.put("call3", new call3());
            return processMap;
        }

        public static class start<I extends Iface> extends org.apache.thrift.ProcessFunction<I, start_args> {
            public start() {
                super("start");
            }

            public start_args getEmptyArgsInstance() {
                return new start_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public start_result getResult(I iface, start_args args) throws org.apache.thrift.TException {
                start_result result = new start_result();
                iface.start(args.id);
                return result;
            }
        }

        public static class destroy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, destroy_args> {
            public destroy() {
                super("destroy");
            }

            public destroy_args getEmptyArgsInstance() {
                return new destroy_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public destroy_result getResult(I iface, destroy_args args) throws org.apache.thrift.TException {
                destroy_result result = new destroy_result();
                iface.destroy(args.id);
                return result;
            }
        }

        public static class newInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, newInstance_args> {
            public newInstance() {
                super("newInstance");
            }

            public newInstance_args getEmptyArgsInstance() {
                return new newInstance_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public newInstance_result getResult(I iface, newInstance_args args) throws org.apache.thrift.TException {
                newInstance_result result = new newInstance_result();
                try {
                    result.success = iface.newInstance(args.id, args.type);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class newInstance3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, newInstance3_args> {
            public newInstance3() {
                super("newInstance3");
            }

            public newInstance3_args getEmptyArgsInstance() {
                return new newInstance3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public newInstance3_result getResult(I iface, newInstance3_args args) throws org.apache.thrift.TException {
                newInstance3_result result = new newInstance3_result();
                try {
                    result.success = iface.newInstance3(args.id, args.name, args.type);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class newInstance4<I extends Iface> extends org.apache.thrift.ProcessFunction<I, newInstance4_args> {
            public newInstance4() {
                super("newInstance4");
            }

            public newInstance4_args getEmptyArgsInstance() {
                return new newInstance4_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public newInstance4_result getResult(I iface, newInstance4_args args) throws org.apache.thrift.TException {
                newInstance4_result result = new newInstance4_result();
                try {
                    result.success = iface.newInstance4(args.id, args.type, args.cores, args.instances);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class newInstance5<I extends Iface> extends org.apache.thrift.ProcessFunction<I, newInstance5_args> {
            public newInstance5() {
                super("newInstance5");
            }

            public newInstance5_args getEmptyArgsInstance() {
                return new newInstance5_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public newInstance5_result getResult(I iface, newInstance5_args args) throws org.apache.thrift.TException {
                newInstance5_result result = new newInstance5_result();
                try {
                    result.success = iface.newInstance5(args.id, args.name, args.type, args.cores, args.instances);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class setName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setName_args> {
            public setName() {
                super("setName");
            }

            public setName_args getEmptyArgsInstance() {
                return new setName_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public setName_result getResult(I iface, setName_args args) throws org.apache.thrift.TException {
                setName_result result = new setName_result();
                try {
                    iface.setName(args.id, args.name);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class parallelize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parallelize_args> {
            public parallelize() {
                super("parallelize");
            }

            public parallelize_args getEmptyArgsInstance() {
                return new parallelize_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public parallelize_result getResult(I iface, parallelize_args args) throws org.apache.thrift.TException {
                parallelize_result result = new parallelize_result();
                try {
                    result.success = iface.parallelize(args.id, args.dataId, args.partitions);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class parallelize4<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parallelize4_args> {
            public parallelize4() {
                super("parallelize4");
            }

            public parallelize4_args getEmptyArgsInstance() {
                return new parallelize4_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public parallelize4_result getResult(I iface, parallelize4_args args) throws org.apache.thrift.TException {
                parallelize4_result result = new parallelize4_result();
                try {
                    result.success = iface.parallelize4(args.id, args.dataId, args.partitions, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class importDataFrame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, importDataFrame_args> {
            public importDataFrame() {
                super("importDataFrame");
            }

            public importDataFrame_args getEmptyArgsInstance() {
                return new importDataFrame_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public importDataFrame_result getResult(I iface, importDataFrame_args args) throws org.apache.thrift.TException {
                importDataFrame_result result = new importDataFrame_result();
                try {
                    result.success = iface.importDataFrame(args.id, args.data);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class importDataFrame3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, importDataFrame3_args> {
            public importDataFrame3() {
                super("importDataFrame3");
            }

            public importDataFrame3_args getEmptyArgsInstance() {
                return new importDataFrame3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public importDataFrame3_result getResult(I iface, importDataFrame3_args args) throws org.apache.thrift.TException {
                importDataFrame3_result result = new importDataFrame3_result();
                try {
                    result.success = iface.importDataFrame3(args.id, args.data, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class plainFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, plainFile_args> {
            public plainFile() {
                super("plainFile");
            }

            public plainFile_args getEmptyArgsInstance() {
                return new plainFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public plainFile_result getResult(I iface, plainFile_args args) throws org.apache.thrift.TException {
                plainFile_result result = new plainFile_result();
                try {
                    result.success = iface.plainFile(args.id, args.path, args.delim);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class plainFile4<I extends Iface> extends org.apache.thrift.ProcessFunction<I, plainFile4_args> {
            public plainFile4() {
                super("plainFile4");
            }

            public plainFile4_args getEmptyArgsInstance() {
                return new plainFile4_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public plainFile4_result getResult(I iface, plainFile4_args args) throws org.apache.thrift.TException {
                plainFile4_result result = new plainFile4_result();
                try {
                    result.success = iface.plainFile4(args.id, args.path, args.minPartitions, args.delim);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class textFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, textFile_args> {
            public textFile() {
                super("textFile");
            }

            public textFile_args getEmptyArgsInstance() {
                return new textFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public textFile_result getResult(I iface, textFile_args args) throws org.apache.thrift.TException {
                textFile_result result = new textFile_result();
                try {
                    result.success = iface.textFile(args.id, args.path);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class textFile3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, textFile3_args> {
            public textFile3() {
                super("textFile3");
            }

            public textFile3_args getEmptyArgsInstance() {
                return new textFile3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public textFile3_result getResult(I iface, textFile3_args args) throws org.apache.thrift.TException {
                textFile3_result result = new textFile3_result();
                try {
                    result.success = iface.textFile3(args.id, args.path, args.minPartitions);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class partitionObjectFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partitionObjectFile_args> {
            public partitionObjectFile() {
                super("partitionObjectFile");
            }

            public partitionObjectFile_args getEmptyArgsInstance() {
                return new partitionObjectFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public partitionObjectFile_result getResult(I iface, partitionObjectFile_args args) throws org.apache.thrift.TException {
                partitionObjectFile_result result = new partitionObjectFile_result();
                try {
                    result.success = iface.partitionObjectFile(args.id, args.path);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class partitionObjectFile3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partitionObjectFile3_args> {
            public partitionObjectFile3() {
                super("partitionObjectFile3");
            }

            public partitionObjectFile3_args getEmptyArgsInstance() {
                return new partitionObjectFile3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public partitionObjectFile3_result getResult(I iface, partitionObjectFile3_args args) throws org.apache.thrift.TException {
                partitionObjectFile3_result result = new partitionObjectFile3_result();
                try {
                    result.success = iface.partitionObjectFile3(args.id, args.path, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class partitionTextFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partitionTextFile_args> {
            public partitionTextFile() {
                super("partitionTextFile");
            }

            public partitionTextFile_args getEmptyArgsInstance() {
                return new partitionTextFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public partitionTextFile_result getResult(I iface, partitionTextFile_args args) throws org.apache.thrift.TException {
                partitionTextFile_result result = new partitionTextFile_result();
                try {
                    result.success = iface.partitionTextFile(args.id, args.path);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class partitionJsonFile3a<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partitionJsonFile3a_args> {
            public partitionJsonFile3a() {
                super("partitionJsonFile3a");
            }

            public partitionJsonFile3a_args getEmptyArgsInstance() {
                return new partitionJsonFile3a_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public partitionJsonFile3a_result getResult(I iface, partitionJsonFile3a_args args) throws org.apache.thrift.TException {
                partitionJsonFile3a_result result = new partitionJsonFile3a_result();
                try {
                    result.success = iface.partitionJsonFile3a(args.id, args.path, args.objectMapping);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class partitionJsonFile3b<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partitionJsonFile3b_args> {
            public partitionJsonFile3b() {
                super("partitionJsonFile3b");
            }

            public partitionJsonFile3b_args getEmptyArgsInstance() {
                return new partitionJsonFile3b_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public partitionJsonFile3b_result getResult(I iface, partitionJsonFile3b_args args) throws org.apache.thrift.TException {
                partitionJsonFile3b_result result = new partitionJsonFile3b_result();
                try {
                    result.success = iface.partitionJsonFile3b(args.id, args.path, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class loadLibrary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadLibrary_args> {
            public loadLibrary() {
                super("loadLibrary");
            }

            public loadLibrary_args getEmptyArgsInstance() {
                return new loadLibrary_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public loadLibrary_result getResult(I iface, loadLibrary_args args) throws org.apache.thrift.TException {
                loadLibrary_result result = new loadLibrary_result();
                try {
                    iface.loadLibrary(args.id, args.lib);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class execute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execute_args> {
            public execute() {
                super("execute");
            }

            public execute_args getEmptyArgsInstance() {
                return new execute_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public execute_result getResult(I iface, execute_args args) throws org.apache.thrift.TException {
                execute_result result = new execute_result();
                try {
                    iface.execute(args.id, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class executeTo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeTo_args> {
            public executeTo() {
                super("executeTo");
            }

            public executeTo_args getEmptyArgsInstance() {
                return new executeTo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public executeTo_result getResult(I iface, executeTo_args args) throws org.apache.thrift.TException {
                executeTo_result result = new executeTo_result();
                try {
                    result.success = iface.executeTo(args.id, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class voidCall<I extends Iface> extends org.apache.thrift.ProcessFunction<I, voidCall_args> {
            public voidCall() {
                super("voidCall");
            }

            public voidCall_args getEmptyArgsInstance() {
                return new voidCall_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public voidCall_result getResult(I iface, voidCall_args args) throws org.apache.thrift.TException {
                voidCall_result result = new voidCall_result();
                try {
                    iface.voidCall(args.id, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class voidCall3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, voidCall3_args> {
            public voidCall3() {
                super("voidCall3");
            }

            public voidCall3_args getEmptyArgsInstance() {
                return new voidCall3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public voidCall3_result getResult(I iface, voidCall3_args args) throws org.apache.thrift.TException {
                voidCall3_result result = new voidCall3_result();
                try {
                    iface.voidCall3(args.id, args.data, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class call<I extends Iface> extends org.apache.thrift.ProcessFunction<I, call_args> {
            public call() {
                super("call");
            }

            public call_args getEmptyArgsInstance() {
                return new call_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public call_result getResult(I iface, call_args args) throws org.apache.thrift.TException {
                call_result result = new call_result();
                try {
                    result.success = iface.call(args.id, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class call3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, call3_args> {
            public call3() {
                super("call3");
            }

            public call3_args getEmptyArgsInstance() {
                return new call3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public call3_result getResult(I iface, call3_args args) throws org.apache.thrift.TException {
                call3_result result = new call3_result();
                try {
                    result.success = iface.call3(args.id, args.data, args.src);
                } catch (org.ignis.rpc.driver.IDriverException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("start", new start());
            processMap.put("destroy", new destroy());
            processMap.put("newInstance", new newInstance());
            processMap.put("newInstance3", new newInstance3());
            processMap.put("newInstance4", new newInstance4());
            processMap.put("newInstance5", new newInstance5());
            processMap.put("setName", new setName());
            processMap.put("parallelize", new parallelize());
            processMap.put("parallelize4", new parallelize4());
            processMap.put("importDataFrame", new importDataFrame());
            processMap.put("importDataFrame3", new importDataFrame3());
            processMap.put("plainFile", new plainFile());
            processMap.put("plainFile4", new plainFile4());
            processMap.put("textFile", new textFile());
            processMap.put("textFile3", new textFile3());
            processMap.put("partitionObjectFile", new partitionObjectFile());
            processMap.put("partitionObjectFile3", new partitionObjectFile3());
            processMap.put("partitionTextFile", new partitionTextFile());
            processMap.put("partitionJsonFile3a", new partitionJsonFile3a());
            processMap.put("partitionJsonFile3b", new partitionJsonFile3b());
            processMap.put("loadLibrary", new loadLibrary());
            processMap.put("execute", new execute());
            processMap.put("executeTo", new executeTo());
            processMap.put("voidCall", new voidCall());
            processMap.put("voidCall3", new voidCall3());
            processMap.put("call", new call());
            processMap.put("call3", new call3());
            return processMap;
        }

        public static class start<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, start_args, Void> {
            public start() {
                super("start");
            }

            public start_args getEmptyArgsInstance() {
                return new start_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        start_result result = new start_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        start_result result = new start_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, start_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.start(args.id, resultHandler);
            }
        }

        public static class destroy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, destroy_args, Void> {
            public destroy() {
                super("destroy");
            }

            public destroy_args getEmptyArgsInstance() {
                return new destroy_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        destroy_result result = new destroy_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        destroy_result result = new destroy_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, destroy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.destroy(args.id, resultHandler);
            }
        }

        public static class newInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, newInstance_args, IWorkerId> {
            public newInstance() {
                super("newInstance");
            }

            public newInstance_args getEmptyArgsInstance() {
                return new newInstance_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<IWorkerId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<IWorkerId>() {
                    public void onComplete(IWorkerId o) {
                        newInstance_result result = new newInstance_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        newInstance_result result = new newInstance_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, newInstance_args args, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException {
                iface.newInstance(args.id, args.type, resultHandler);
            }
        }

        public static class newInstance3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, newInstance3_args, IWorkerId> {
            public newInstance3() {
                super("newInstance3");
            }

            public newInstance3_args getEmptyArgsInstance() {
                return new newInstance3_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<IWorkerId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<IWorkerId>() {
                    public void onComplete(IWorkerId o) {
                        newInstance3_result result = new newInstance3_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        newInstance3_result result = new newInstance3_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, newInstance3_args args, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException {
                iface.newInstance3(args.id, args.name, args.type, resultHandler);
            }
        }

        public static class newInstance4<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, newInstance4_args, IWorkerId> {
            public newInstance4() {
                super("newInstance4");
            }

            public newInstance4_args getEmptyArgsInstance() {
                return new newInstance4_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<IWorkerId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<IWorkerId>() {
                    public void onComplete(IWorkerId o) {
                        newInstance4_result result = new newInstance4_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        newInstance4_result result = new newInstance4_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, newInstance4_args args, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException {
                iface.newInstance4(args.id, args.type, args.cores, args.instances, resultHandler);
            }
        }

        public static class newInstance5<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, newInstance5_args, IWorkerId> {
            public newInstance5() {
                super("newInstance5");
            }

            public newInstance5_args getEmptyArgsInstance() {
                return new newInstance5_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<IWorkerId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<IWorkerId>() {
                    public void onComplete(IWorkerId o) {
                        newInstance5_result result = new newInstance5_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        newInstance5_result result = new newInstance5_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, newInstance5_args args, org.apache.thrift.async.AsyncMethodCallback<IWorkerId> resultHandler) throws org.apache.thrift.TException {
                iface.newInstance5(args.id, args.name, args.type, args.cores, args.instances, resultHandler);
            }
        }

        public static class setName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setName_args, Void> {
            public setName() {
                super("setName");
            }

            public setName_args getEmptyArgsInstance() {
                return new setName_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        setName_result result = new setName_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        setName_result result = new setName_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.setName(args.id, args.name, resultHandler);
            }
        }

        public static class parallelize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parallelize_args, org.ignis.rpc.driver.IDataFrameId> {
            public parallelize() {
                super("parallelize");
            }

            public parallelize_args getEmptyArgsInstance() {
                return new parallelize_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        parallelize_result result = new parallelize_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        parallelize_result result = new parallelize_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, parallelize_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.parallelize(args.id, args.dataId, args.partitions, resultHandler);
            }
        }

        public static class parallelize4<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parallelize4_args, org.ignis.rpc.driver.IDataFrameId> {
            public parallelize4() {
                super("parallelize4");
            }

            public parallelize4_args getEmptyArgsInstance() {
                return new parallelize4_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        parallelize4_result result = new parallelize4_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        parallelize4_result result = new parallelize4_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, parallelize4_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.parallelize4(args.id, args.dataId, args.partitions, args.src, resultHandler);
            }
        }

        public static class importDataFrame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, importDataFrame_args, org.ignis.rpc.driver.IDataFrameId> {
            public importDataFrame() {
                super("importDataFrame");
            }

            public importDataFrame_args getEmptyArgsInstance() {
                return new importDataFrame_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        importDataFrame_result result = new importDataFrame_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        importDataFrame_result result = new importDataFrame_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, importDataFrame_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.importDataFrame(args.id, args.data, resultHandler);
            }
        }

        public static class importDataFrame3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, importDataFrame3_args, org.ignis.rpc.driver.IDataFrameId> {
            public importDataFrame3() {
                super("importDataFrame3");
            }

            public importDataFrame3_args getEmptyArgsInstance() {
                return new importDataFrame3_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        importDataFrame3_result result = new importDataFrame3_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        importDataFrame3_result result = new importDataFrame3_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, importDataFrame3_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.importDataFrame3(args.id, args.data, args.src, resultHandler);
            }
        }

        public static class plainFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, plainFile_args, org.ignis.rpc.driver.IDataFrameId> {
            public plainFile() {
                super("plainFile");
            }

            public plainFile_args getEmptyArgsInstance() {
                return new plainFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        plainFile_result result = new plainFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        plainFile_result result = new plainFile_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, plainFile_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.plainFile(args.id, args.path, args.delim, resultHandler);
            }
        }

        public static class plainFile4<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, plainFile4_args, org.ignis.rpc.driver.IDataFrameId> {
            public plainFile4() {
                super("plainFile4");
            }

            public plainFile4_args getEmptyArgsInstance() {
                return new plainFile4_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        plainFile4_result result = new plainFile4_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        plainFile4_result result = new plainFile4_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, plainFile4_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.plainFile4(args.id, args.path, args.minPartitions, args.delim, resultHandler);
            }
        }

        public static class textFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, textFile_args, org.ignis.rpc.driver.IDataFrameId> {
            public textFile() {
                super("textFile");
            }

            public textFile_args getEmptyArgsInstance() {
                return new textFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        textFile_result result = new textFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        textFile_result result = new textFile_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, textFile_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.textFile(args.id, args.path, resultHandler);
            }
        }

        public static class textFile3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, textFile3_args, org.ignis.rpc.driver.IDataFrameId> {
            public textFile3() {
                super("textFile3");
            }

            public textFile3_args getEmptyArgsInstance() {
                return new textFile3_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        textFile3_result result = new textFile3_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        textFile3_result result = new textFile3_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, textFile3_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.textFile3(args.id, args.path, args.minPartitions, resultHandler);
            }
        }

        public static class partitionObjectFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partitionObjectFile_args, org.ignis.rpc.driver.IDataFrameId> {
            public partitionObjectFile() {
                super("partitionObjectFile");
            }

            public partitionObjectFile_args getEmptyArgsInstance() {
                return new partitionObjectFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        partitionObjectFile_result result = new partitionObjectFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        partitionObjectFile_result result = new partitionObjectFile_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, partitionObjectFile_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.partitionObjectFile(args.id, args.path, resultHandler);
            }
        }

        public static class partitionObjectFile3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partitionObjectFile3_args, org.ignis.rpc.driver.IDataFrameId> {
            public partitionObjectFile3() {
                super("partitionObjectFile3");
            }

            public partitionObjectFile3_args getEmptyArgsInstance() {
                return new partitionObjectFile3_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        partitionObjectFile3_result result = new partitionObjectFile3_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        partitionObjectFile3_result result = new partitionObjectFile3_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, partitionObjectFile3_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.partitionObjectFile3(args.id, args.path, args.src, resultHandler);
            }
        }

        public static class partitionTextFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partitionTextFile_args, org.ignis.rpc.driver.IDataFrameId> {
            public partitionTextFile() {
                super("partitionTextFile");
            }

            public partitionTextFile_args getEmptyArgsInstance() {
                return new partitionTextFile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        partitionTextFile_result result = new partitionTextFile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        partitionTextFile_result result = new partitionTextFile_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, partitionTextFile_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.partitionTextFile(args.id, args.path, resultHandler);
            }
        }

        public static class partitionJsonFile3a<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partitionJsonFile3a_args, org.ignis.rpc.driver.IDataFrameId> {
            public partitionJsonFile3a() {
                super("partitionJsonFile3a");
            }

            public partitionJsonFile3a_args getEmptyArgsInstance() {
                return new partitionJsonFile3a_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        partitionJsonFile3a_result result = new partitionJsonFile3a_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        partitionJsonFile3a_result result = new partitionJsonFile3a_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, partitionJsonFile3a_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.partitionJsonFile3a(args.id, args.path, args.objectMapping, resultHandler);
            }
        }

        public static class partitionJsonFile3b<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partitionJsonFile3b_args, org.ignis.rpc.driver.IDataFrameId> {
            public partitionJsonFile3b() {
                super("partitionJsonFile3b");
            }

            public partitionJsonFile3b_args getEmptyArgsInstance() {
                return new partitionJsonFile3b_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        partitionJsonFile3b_result result = new partitionJsonFile3b_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        partitionJsonFile3b_result result = new partitionJsonFile3b_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, partitionJsonFile3b_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.partitionJsonFile3b(args.id, args.path, args.src, resultHandler);
            }
        }

        public static class loadLibrary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadLibrary_args, Void> {
            public loadLibrary() {
                super("loadLibrary");
            }

            public loadLibrary_args getEmptyArgsInstance() {
                return new loadLibrary_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        loadLibrary_result result = new loadLibrary_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        loadLibrary_result result = new loadLibrary_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, loadLibrary_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.loadLibrary(args.id, args.lib, resultHandler);
            }
        }

        public static class execute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execute_args, Void> {
            public execute() {
                super("execute");
            }

            public execute_args getEmptyArgsInstance() {
                return new execute_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        execute_result result = new execute_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        execute_result result = new execute_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, execute_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.execute(args.id, args.src, resultHandler);
            }
        }

        public static class executeTo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeTo_args, org.ignis.rpc.driver.IDataFrameId> {
            public executeTo() {
                super("executeTo");
            }

            public executeTo_args getEmptyArgsInstance() {
                return new executeTo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        executeTo_result result = new executeTo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        executeTo_result result = new executeTo_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, executeTo_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.executeTo(args.id, args.src, resultHandler);
            }
        }

        public static class voidCall<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, voidCall_args, Void> {
            public voidCall() {
                super("voidCall");
            }

            public voidCall_args getEmptyArgsInstance() {
                return new voidCall_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        voidCall_result result = new voidCall_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        voidCall_result result = new voidCall_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, voidCall_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.voidCall(args.id, args.src, resultHandler);
            }
        }

        public static class voidCall3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, voidCall3_args, Void> {
            public voidCall3() {
                super("voidCall3");
            }

            public voidCall3_args getEmptyArgsInstance() {
                return new voidCall3_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        voidCall3_result result = new voidCall3_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        voidCall3_result result = new voidCall3_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, voidCall3_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.voidCall3(args.id, args.data, args.src, resultHandler);
            }
        }

        public static class call<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, call_args, org.ignis.rpc.driver.IDataFrameId> {
            public call() {
                super("call");
            }

            public call_args getEmptyArgsInstance() {
                return new call_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        call_result result = new call_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        call_result result = new call_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, call_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.call(args.id, args.src, resultHandler);
            }
        }

        public static class call3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, call3_args, org.ignis.rpc.driver.IDataFrameId> {
            public call3() {
                super("call3");
            }

            public call3_args getEmptyArgsInstance() {
                return new call3_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId>() {
                    public void onComplete(org.ignis.rpc.driver.IDataFrameId o) {
                        call3_result result = new call3_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        call3_result result = new call3_result();
                        if (e instanceof org.ignis.rpc.driver.IDriverException) {
                            result.ex = (org.ignis.rpc.driver.IDriverException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, call3_args args, org.apache.thrift.async.AsyncMethodCallback<org.ignis.rpc.driver.IDataFrameId> resultHandler) throws org.apache.thrift.TException {
                iface.call3(args.id, args.data, args.src, resultHandler);
            }
        }

    }

    public static class start_args implements org.apache.thrift.TBase<start_args, start_args._Fields>, java.io.Serializable, Cloneable, Comparable<start_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("start_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new start_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new start_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(start_args.class, metaDataMap);
        }

        public start_args() {
        }

        public start_args(
                IWorkerId id) {
            this();
            this.id = id;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public start_args(start_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
        }

        public start_args deepCopy() {
            return new start_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public start_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof start_args)
                return this.equals((start_args) that);
            return false;
        }

        public boolean equals(start_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(start_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("start_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class start_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public start_argsStandardScheme getScheme() {
                return new start_argsStandardScheme();
            }
        }

        private static class start_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<start_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, start_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, start_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class start_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public start_argsTupleScheme getScheme() {
                return new start_argsTupleScheme();
            }
        }

        private static class start_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<start_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, start_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, start_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class start_result implements org.apache.thrift.TBase<start_result, start_result._Fields>, java.io.Serializable, Cloneable, Comparable<start_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("start_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new start_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new start_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(start_result.class, metaDataMap);
        }

        public start_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public start_result(start_result other) {
        }

        public start_result deepCopy() {
            return new start_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof start_result)
                return this.equals((start_result) that);
            return false;
        }

        public boolean equals(start_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(start_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("start_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class start_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public start_resultStandardScheme getScheme() {
                return new start_resultStandardScheme();
            }
        }

        private static class start_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<start_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, start_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, start_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class start_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public start_resultTupleScheme getScheme() {
                return new start_resultTupleScheme();
            }
        }

        private static class start_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<start_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, start_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, start_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class destroy_args implements org.apache.thrift.TBase<destroy_args, destroy_args._Fields>, java.io.Serializable, Cloneable, Comparable<destroy_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroy_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new destroy_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new destroy_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroy_args.class, metaDataMap);
        }

        public destroy_args() {
        }

        public destroy_args(
                IWorkerId id) {
            this();
            this.id = id;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public destroy_args(destroy_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
        }

        public destroy_args deepCopy() {
            return new destroy_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public destroy_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof destroy_args)
                return this.equals((destroy_args) that);
            return false;
        }

        public boolean equals(destroy_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(destroy_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("destroy_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class destroy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public destroy_argsStandardScheme getScheme() {
                return new destroy_argsStandardScheme();
            }
        }

        private static class destroy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<destroy_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, destroy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, destroy_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class destroy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public destroy_argsTupleScheme getScheme() {
                return new destroy_argsTupleScheme();
            }
        }

        private static class destroy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<destroy_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, destroy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, destroy_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class destroy_result implements org.apache.thrift.TBase<destroy_result, destroy_result._Fields>, java.io.Serializable, Cloneable, Comparable<destroy_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroy_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new destroy_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new destroy_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroy_result.class, metaDataMap);
        }

        public destroy_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public destroy_result(destroy_result other) {
        }

        public destroy_result deepCopy() {
            return new destroy_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof destroy_result)
                return this.equals((destroy_result) that);
            return false;
        }

        public boolean equals(destroy_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(destroy_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("destroy_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class destroy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public destroy_resultStandardScheme getScheme() {
                return new destroy_resultStandardScheme();
            }
        }

        private static class destroy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<destroy_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, destroy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, destroy_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class destroy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public destroy_resultTupleScheme getScheme() {
                return new destroy_resultTupleScheme();
            }
        }

        private static class destroy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<destroy_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, destroy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, destroy_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance_args implements org.apache.thrift.TBase<newInstance_args, newInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            TYPE((short) 2, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance_args.class, metaDataMap);
        }

        public newInstance_args() {
        }

        public newInstance_args(
                long id,
                java.lang.String type) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.type = type;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance_args(newInstance_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetType()) {
                this.type = other.type;
            }
        }

        public newInstance_args deepCopy() {
            return new newInstance_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.type = null;
        }

        public long getId() {
            return this.id;
        }

        public newInstance_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getType() {
            return this.type;
        }

        public newInstance_args setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
            this.type = type;
            return this;
        }

        public void unsetType() {
            this.type = null;
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return this.type != null;
        }

        public void setTypeIsSet(boolean value) {
            if (!value) {
                this.type = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance_args)
                return this.equals((newInstance_args) that);
            return false;
        }

        public boolean equals(newInstance_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_type = true && this.isSetType();
            boolean that_present_type = true && that.isSetType();
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (!this.type.equals(that.type))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
            if (isSetType())
                hashCode = hashCode * 8191 + type.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(newInstance_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            if (this.type == null) {
                sb.append("null");
            } else {
                sb.append(this.type);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance_argsStandardScheme getScheme() {
                return new newInstance_argsStandardScheme();
            }
        }

        private static class newInstance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.type = iprot.readString();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.type != null) {
                    oprot.writeFieldBegin(TYPE_FIELD_DESC);
                    oprot.writeString(struct.type);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance_argsTupleScheme getScheme() {
                return new newInstance_argsTupleScheme();
            }
        }

        private static class newInstance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetType()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetType()) {
                    oprot.writeString(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.type = iprot.readString();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance_result implements org.apache.thrift.TBase<newInstance_result, newInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance_result.class, metaDataMap);
        }

        public newInstance_result() {
        }

        public newInstance_result(
                IWorkerId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance_result(newInstance_result other) {
            if (other.isSetSuccess()) {
                this.success = new IWorkerId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public newInstance_result deepCopy() {
            return new newInstance_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getSuccess() {
            return this.success;
        }

        public newInstance_result setSuccess(@org.apache.thrift.annotation.Nullable IWorkerId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public newInstance_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((IWorkerId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance_result)
                return this.equals((newInstance_result) that);
            return false;
        }

        public boolean equals(newInstance_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(newInstance_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance_resultStandardScheme getScheme() {
                return new newInstance_resultStandardScheme();
            }
        }

        private static class newInstance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new IWorkerId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance_resultTupleScheme getScheme() {
                return new newInstance_resultTupleScheme();
            }
        }

        private static class newInstance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new IWorkerId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance3_args implements org.apache.thrift.TBase<newInstance3_args, newInstance3_args._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance3_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance3_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance3_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance3_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String name; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            NAME((short) 2, "name"),
            TYPE((short) 3, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // NAME
                        return NAME;
                    case 3: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance3_args.class, metaDataMap);
        }

        public newInstance3_args() {
        }

        public newInstance3_args(
                long id,
                java.lang.String name,
                java.lang.String type) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.name = name;
            this.type = type;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance3_args(newInstance3_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetName()) {
                this.name = other.name;
            }
            if (other.isSetType()) {
                this.type = other.type;
            }
        }

        public newInstance3_args deepCopy() {
            return new newInstance3_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.name = null;
            this.type = null;
        }

        public long getId() {
            return this.id;
        }

        public newInstance3_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getName() {
            return this.name;
        }

        public newInstance3_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getType() {
            return this.type;
        }

        public newInstance3_args setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
            this.type = type;
            return this;
        }

        public void unsetType() {
            this.type = null;
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return this.type != null;
        }

        public void setTypeIsSet(boolean value) {
            if (!value) {
                this.type = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((java.lang.String) value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case NAME:
                    return getName();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case NAME:
                    return isSetName();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance3_args)
                return this.equals((newInstance3_args) that);
            return false;
        }

        public boolean equals(newInstance3_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            boolean this_present_type = true && this.isSetType();
            boolean that_present_type = true && that.isSetType();
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (!this.type.equals(that.type))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
            if (isSetName())
                hashCode = hashCode * 8191 + name.hashCode();

            hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
            if (isSetType())
                hashCode = hashCode * 8191 + type.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(newInstance3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance3_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            if (this.type == null) {
                sb.append("null");
            } else {
                sb.append(this.type);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance3_argsStandardScheme getScheme() {
                return new newInstance3_argsStandardScheme();
            }
        }

        private static class newInstance3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.type = iprot.readString();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                if (struct.type != null) {
                    oprot.writeFieldBegin(TYPE_FIELD_DESC);
                    oprot.writeString(struct.type);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance3_argsTupleScheme getScheme() {
                return new newInstance3_argsTupleScheme();
            }
        }

        private static class newInstance3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetName()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
                if (struct.isSetType()) {
                    oprot.writeString(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readString();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance3_result implements org.apache.thrift.TBase<newInstance3_result, newInstance3_result._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance3_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance3_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance3_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance3_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance3_result.class, metaDataMap);
        }

        public newInstance3_result() {
        }

        public newInstance3_result(
                IWorkerId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance3_result(newInstance3_result other) {
            if (other.isSetSuccess()) {
                this.success = new IWorkerId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public newInstance3_result deepCopy() {
            return new newInstance3_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getSuccess() {
            return this.success;
        }

        public newInstance3_result setSuccess(@org.apache.thrift.annotation.Nullable IWorkerId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public newInstance3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((IWorkerId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance3_result)
                return this.equals((newInstance3_result) that);
            return false;
        }

        public boolean equals(newInstance3_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(newInstance3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance3_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance3_resultStandardScheme getScheme() {
                return new newInstance3_resultStandardScheme();
            }
        }

        private static class newInstance3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new IWorkerId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance3_resultTupleScheme getScheme() {
                return new newInstance3_resultTupleScheme();
            }
        }

        private static class newInstance3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new IWorkerId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance4_args implements org.apache.thrift.TBase<newInstance4_args, newInstance4_args._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance4_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance4_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("cores", org.apache.thrift.protocol.TType.I32, (short) 3);
        private static final org.apache.thrift.protocol.TField INSTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("instances", org.apache.thrift.protocol.TType.I32, (short) 4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance4_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance4_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String type; // required
        private int cores; // required
        private int instances; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            TYPE((short) 2, "type"),
            CORES((short) 3, "cores"),
            INSTANCES((short) 4, "instances");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // TYPE
                        return TYPE;
                    case 3: // CORES
                        return CORES;
                    case 4: // INSTANCES
                        return INSTANCES;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private static final int __CORES_ISSET_ID = 1;
        private static final int __INSTANCES_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CORES, new org.apache.thrift.meta_data.FieldMetaData("cores", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.INSTANCES, new org.apache.thrift.meta_data.FieldMetaData("instances", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance4_args.class, metaDataMap);
        }

        public newInstance4_args() {
        }

        public newInstance4_args(
                long id,
                java.lang.String type,
                int cores,
                int instances) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.type = type;
            this.cores = cores;
            setCoresIsSet(true);
            this.instances = instances;
            setInstancesIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance4_args(newInstance4_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetType()) {
                this.type = other.type;
            }
            this.cores = other.cores;
            this.instances = other.instances;
        }

        public newInstance4_args deepCopy() {
            return new newInstance4_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.type = null;
            setCoresIsSet(false);
            this.cores = 0;
            setInstancesIsSet(false);
            this.instances = 0;
        }

        public long getId() {
            return this.id;
        }

        public newInstance4_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getType() {
            return this.type;
        }

        public newInstance4_args setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
            this.type = type;
            return this;
        }

        public void unsetType() {
            this.type = null;
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return this.type != null;
        }

        public void setTypeIsSet(boolean value) {
            if (!value) {
                this.type = null;
            }
        }

        public int getCores() {
            return this.cores;
        }

        public newInstance4_args setCores(int cores) {
            this.cores = cores;
            setCoresIsSet(true);
            return this;
        }

        public void unsetCores() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CORES_ISSET_ID);
        }

        /** Returns true if field cores is set (has been assigned a value) and false otherwise */
        public boolean isSetCores() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CORES_ISSET_ID);
        }

        public void setCoresIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CORES_ISSET_ID, value);
        }

        public int getInstances() {
            return this.instances;
        }

        public newInstance4_args setInstances(int instances) {
            this.instances = instances;
            setInstancesIsSet(true);
            return this;
        }

        public void unsetInstances() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSTANCES_ISSET_ID);
        }

        /** Returns true if field instances is set (has been assigned a value) and false otherwise */
        public boolean isSetInstances() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSTANCES_ISSET_ID);
        }

        public void setInstancesIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSTANCES_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.String) value);
                    }
                    break;

                case CORES:
                    if (value == null) {
                        unsetCores();
                    } else {
                        setCores((java.lang.Integer) value);
                    }
                    break;

                case INSTANCES:
                    if (value == null) {
                        unsetInstances();
                    } else {
                        setInstances((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case TYPE:
                    return getType();

                case CORES:
                    return getCores();

                case INSTANCES:
                    return getInstances();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case TYPE:
                    return isSetType();
                case CORES:
                    return isSetCores();
                case INSTANCES:
                    return isSetInstances();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance4_args)
                return this.equals((newInstance4_args) that);
            return false;
        }

        public boolean equals(newInstance4_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_type = true && this.isSetType();
            boolean that_present_type = true && that.isSetType();
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (!this.type.equals(that.type))
                    return false;
            }

            boolean this_present_cores = true;
            boolean that_present_cores = true;
            if (this_present_cores || that_present_cores) {
                if (!(this_present_cores && that_present_cores))
                    return false;
                if (this.cores != that.cores)
                    return false;
            }

            boolean this_present_instances = true;
            boolean that_present_instances = true;
            if (this_present_instances || that_present_instances) {
                if (!(this_present_instances && that_present_instances))
                    return false;
                if (this.instances != that.instances)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
            if (isSetType())
                hashCode = hashCode * 8191 + type.hashCode();

            hashCode = hashCode * 8191 + cores;

            hashCode = hashCode * 8191 + instances;

            return hashCode;
        }

        @Override
        public int compareTo(newInstance4_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetCores(), other.isSetCores());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCores()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cores, other.cores);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetInstances(), other.isSetInstances());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInstances()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instances, other.instances);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance4_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            if (this.type == null) {
                sb.append("null");
            } else {
                sb.append(this.type);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("cores:");
            sb.append(this.cores);
            first = false;
            if (!first) sb.append(", ");
            sb.append("instances:");
            sb.append(this.instances);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance4_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance4_argsStandardScheme getScheme() {
                return new newInstance4_argsStandardScheme();
            }
        }

        private static class newInstance4_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance4_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.type = iprot.readString();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // CORES
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.cores = iprot.readI32();
                                struct.setCoresIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // INSTANCES
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.instances = iprot.readI32();
                                struct.setInstancesIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance4_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.type != null) {
                    oprot.writeFieldBegin(TYPE_FIELD_DESC);
                    oprot.writeString(struct.type);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(CORES_FIELD_DESC);
                oprot.writeI32(struct.cores);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(INSTANCES_FIELD_DESC);
                oprot.writeI32(struct.instances);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance4_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance4_argsTupleScheme getScheme() {
                return new newInstance4_argsTupleScheme();
            }
        }

        private static class newInstance4_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance4_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetType()) {
                    optionals.set(1);
                }
                if (struct.isSetCores()) {
                    optionals.set(2);
                }
                if (struct.isSetInstances()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetType()) {
                    oprot.writeString(struct.type);
                }
                if (struct.isSetCores()) {
                    oprot.writeI32(struct.cores);
                }
                if (struct.isSetInstances()) {
                    oprot.writeI32(struct.instances);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.type = iprot.readString();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.cores = iprot.readI32();
                    struct.setCoresIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.instances = iprot.readI32();
                    struct.setInstancesIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance4_result implements org.apache.thrift.TBase<newInstance4_result, newInstance4_result._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance4_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance4_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance4_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance4_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance4_result.class, metaDataMap);
        }

        public newInstance4_result() {
        }

        public newInstance4_result(
                IWorkerId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance4_result(newInstance4_result other) {
            if (other.isSetSuccess()) {
                this.success = new IWorkerId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public newInstance4_result deepCopy() {
            return new newInstance4_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getSuccess() {
            return this.success;
        }

        public newInstance4_result setSuccess(@org.apache.thrift.annotation.Nullable IWorkerId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public newInstance4_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((IWorkerId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance4_result)
                return this.equals((newInstance4_result) that);
            return false;
        }

        public boolean equals(newInstance4_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(newInstance4_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance4_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance4_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance4_resultStandardScheme getScheme() {
                return new newInstance4_resultStandardScheme();
            }
        }

        private static class newInstance4_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance4_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new IWorkerId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance4_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance4_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance4_resultTupleScheme getScheme() {
                return new newInstance4_resultTupleScheme();
            }
        }

        private static class newInstance4_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance4_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new IWorkerId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance5_args implements org.apache.thrift.TBase<newInstance5_args, newInstance5_args._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance5_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance5_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("cores", org.apache.thrift.protocol.TType.I32, (short) 4);
        private static final org.apache.thrift.protocol.TField INSTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("instances", org.apache.thrift.protocol.TType.I32, (short) 5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance5_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance5_argsTupleSchemeFactory();

        private long id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String name; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String type; // required
        private int cores; // required
        private int instances; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            NAME((short) 2, "name"),
            TYPE((short) 3, "type"),
            CORES((short) 4, "cores"),
            INSTANCES((short) 5, "instances");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // NAME
                        return NAME;
                    case 3: // TYPE
                        return TYPE;
                    case 4: // CORES
                        return CORES;
                    case 5: // INSTANCES
                        return INSTANCES;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private static final int __CORES_ISSET_ID = 1;
        private static final int __INSTANCES_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CORES, new org.apache.thrift.meta_data.FieldMetaData("cores", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.INSTANCES, new org.apache.thrift.meta_data.FieldMetaData("instances", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance5_args.class, metaDataMap);
        }

        public newInstance5_args() {
        }

        public newInstance5_args(
                long id,
                java.lang.String name,
                java.lang.String type,
                int cores,
                int instances) {
            this();
            this.id = id;
            setIdIsSet(true);
            this.name = name;
            this.type = type;
            this.cores = cores;
            setCoresIsSet(true);
            this.instances = instances;
            setInstancesIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance5_args(newInstance5_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            if (other.isSetName()) {
                this.name = other.name;
            }
            if (other.isSetType()) {
                this.type = other.type;
            }
            this.cores = other.cores;
            this.instances = other.instances;
        }

        public newInstance5_args deepCopy() {
            return new newInstance5_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            this.name = null;
            this.type = null;
            setCoresIsSet(false);
            this.cores = 0;
            setInstancesIsSet(false);
            this.instances = 0;
        }

        public long getId() {
            return this.id;
        }

        public newInstance5_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getName() {
            return this.name;
        }

        public newInstance5_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getType() {
            return this.type;
        }

        public newInstance5_args setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
            this.type = type;
            return this;
        }

        public void unsetType() {
            this.type = null;
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return this.type != null;
        }

        public void setTypeIsSet(boolean value) {
            if (!value) {
                this.type = null;
            }
        }

        public int getCores() {
            return this.cores;
        }

        public newInstance5_args setCores(int cores) {
            this.cores = cores;
            setCoresIsSet(true);
            return this;
        }

        public void unsetCores() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CORES_ISSET_ID);
        }

        /** Returns true if field cores is set (has been assigned a value) and false otherwise */
        public boolean isSetCores() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CORES_ISSET_ID);
        }

        public void setCoresIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CORES_ISSET_ID, value);
        }

        public int getInstances() {
            return this.instances;
        }

        public newInstance5_args setInstances(int instances) {
            this.instances = instances;
            setInstancesIsSet(true);
            return this;
        }

        public void unsetInstances() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSTANCES_ISSET_ID);
        }

        /** Returns true if field instances is set (has been assigned a value) and false otherwise */
        public boolean isSetInstances() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSTANCES_ISSET_ID);
        }

        public void setInstancesIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSTANCES_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((java.lang.String) value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.String) value);
                    }
                    break;

                case CORES:
                    if (value == null) {
                        unsetCores();
                    } else {
                        setCores((java.lang.Integer) value);
                    }
                    break;

                case INSTANCES:
                    if (value == null) {
                        unsetInstances();
                    } else {
                        setInstances((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case NAME:
                    return getName();

                case TYPE:
                    return getType();

                case CORES:
                    return getCores();

                case INSTANCES:
                    return getInstances();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case NAME:
                    return isSetName();
                case TYPE:
                    return isSetType();
                case CORES:
                    return isSetCores();
                case INSTANCES:
                    return isSetInstances();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance5_args)
                return this.equals((newInstance5_args) that);
            return false;
        }

        public boolean equals(newInstance5_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            boolean this_present_type = true && this.isSetType();
            boolean that_present_type = true && that.isSetType();
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (!this.type.equals(that.type))
                    return false;
            }

            boolean this_present_cores = true;
            boolean that_present_cores = true;
            if (this_present_cores || that_present_cores) {
                if (!(this_present_cores && that_present_cores))
                    return false;
                if (this.cores != that.cores)
                    return false;
            }

            boolean this_present_instances = true;
            boolean that_present_instances = true;
            if (this_present_instances || that_present_instances) {
                if (!(this_present_instances && that_present_instances))
                    return false;
                if (this.instances != that.instances)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
            if (isSetName())
                hashCode = hashCode * 8191 + name.hashCode();

            hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
            if (isSetType())
                hashCode = hashCode * 8191 + type.hashCode();

            hashCode = hashCode * 8191 + cores;

            hashCode = hashCode * 8191 + instances;

            return hashCode;
        }

        @Override
        public int compareTo(newInstance5_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetCores(), other.isSetCores());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCores()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cores, other.cores);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetInstances(), other.isSetInstances());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInstances()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instances, other.instances);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance5_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            if (this.type == null) {
                sb.append("null");
            } else {
                sb.append(this.type);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("cores:");
            sb.append(this.cores);
            first = false;
            if (!first) sb.append(", ");
            sb.append("instances:");
            sb.append(this.instances);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance5_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance5_argsStandardScheme getScheme() {
                return new newInstance5_argsStandardScheme();
            }
        }

        private static class newInstance5_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance5_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance5_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.type = iprot.readString();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // CORES
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.cores = iprot.readI32();
                                struct.setCoresIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // INSTANCES
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.instances = iprot.readI32();
                                struct.setInstancesIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance5_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                if (struct.type != null) {
                    oprot.writeFieldBegin(TYPE_FIELD_DESC);
                    oprot.writeString(struct.type);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(CORES_FIELD_DESC);
                oprot.writeI32(struct.cores);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(INSTANCES_FIELD_DESC);
                oprot.writeI32(struct.instances);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance5_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance5_argsTupleScheme getScheme() {
                return new newInstance5_argsTupleScheme();
            }
        }

        private static class newInstance5_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance5_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance5_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetName()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                if (struct.isSetCores()) {
                    optionals.set(3);
                }
                if (struct.isSetInstances()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
                if (struct.isSetType()) {
                    oprot.writeString(struct.type);
                }
                if (struct.isSetCores()) {
                    oprot.writeI32(struct.cores);
                }
                if (struct.isSetInstances()) {
                    oprot.writeI32(struct.instances);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance5_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readString();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.cores = iprot.readI32();
                    struct.setCoresIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.instances = iprot.readI32();
                    struct.setInstancesIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class newInstance5_result implements org.apache.thrift.TBase<newInstance5_result, newInstance5_result._Fields>, java.io.Serializable, Cloneable, Comparable<newInstance5_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newInstance5_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new newInstance5_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new newInstance5_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newInstance5_result.class, metaDataMap);
        }

        public newInstance5_result() {
        }

        public newInstance5_result(
                IWorkerId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public newInstance5_result(newInstance5_result other) {
            if (other.isSetSuccess()) {
                this.success = new IWorkerId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public newInstance5_result deepCopy() {
            return new newInstance5_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getSuccess() {
            return this.success;
        }

        public newInstance5_result setSuccess(@org.apache.thrift.annotation.Nullable IWorkerId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public newInstance5_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((IWorkerId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof newInstance5_result)
                return this.equals((newInstance5_result) that);
            return false;
        }

        public boolean equals(newInstance5_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(newInstance5_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("newInstance5_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class newInstance5_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance5_resultStandardScheme getScheme() {
                return new newInstance5_resultStandardScheme();
            }
        }

        private static class newInstance5_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<newInstance5_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, newInstance5_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new IWorkerId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, newInstance5_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class newInstance5_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public newInstance5_resultTupleScheme getScheme() {
                return new newInstance5_resultTupleScheme();
            }
        }

        private static class newInstance5_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<newInstance5_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, newInstance5_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, newInstance5_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new IWorkerId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setName_args implements org.apache.thrift.TBase<setName_args, setName_args._Fields>, java.io.Serializable, Cloneable, Comparable<setName_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setName_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setName_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setName_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String name; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            NAME((short) 2, "name");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // NAME
                        return NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setName_args.class, metaDataMap);
        }

        public setName_args() {
        }

        public setName_args(
                IWorkerId id,
                java.lang.String name) {
            this();
            this.id = id;
            this.name = name;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setName_args(setName_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetName()) {
                this.name = other.name;
            }
        }

        public setName_args deepCopy() {
            return new setName_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.name = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public setName_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getName() {
            return this.name;
        }

        public setName_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case NAME:
                    return getName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case NAME:
                    return isSetName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setName_args)
                return this.equals((setName_args) that);
            return false;
        }

        public boolean equals(setName_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
            if (isSetName())
                hashCode = hashCode * 8191 + name.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(setName_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setName_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setName_argsStandardScheme getScheme() {
                return new setName_argsStandardScheme();
            }
        }

        private static class setName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setName_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setName_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setName_argsTupleScheme getScheme() {
                return new setName_argsTupleScheme();
            }
        }

        private static class setName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setName_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetName()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setName_result implements org.apache.thrift.TBase<setName_result, setName_result._Fields>, java.io.Serializable, Cloneable, Comparable<setName_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setName_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setName_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setName_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setName_result.class, metaDataMap);
        }

        public setName_result() {
        }

        public setName_result(
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setName_result(setName_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public setName_result deepCopy() {
            return new setName_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public setName_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setName_result)
                return this.equals((setName_result) that);
            return false;
        }

        public boolean equals(setName_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(setName_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setName_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setName_resultStandardScheme getScheme() {
                return new setName_resultStandardScheme();
            }
        }

        private static class setName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setName_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setName_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setName_resultTupleScheme getScheme() {
                return new setName_resultTupleScheme();
            }
        }

        private static class setName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setName_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class parallelize_args implements org.apache.thrift.TBase<parallelize_args, parallelize_args._Fields>, java.io.Serializable, Cloneable, Comparable<parallelize_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parallelize_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField DATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataId", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.I64, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parallelize_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parallelize_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private long dataId; // required
        private long partitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            DATA_ID((short) 2, "dataId"),
            PARTITIONS((short) 3, "partitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // DATA_ID
                        return DATA_ID;
                    case 3: // PARTITIONS
                        return PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __DATAID_ISSET_ID = 0;
        private static final int __PARTITIONS_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.DATA_ID, new org.apache.thrift.meta_data.FieldMetaData("dataId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parallelize_args.class, metaDataMap);
        }

        public parallelize_args() {
        }

        public parallelize_args(
                IWorkerId id,
                long dataId,
                long partitions) {
            this();
            this.id = id;
            this.dataId = dataId;
            setDataIdIsSet(true);
            this.partitions = partitions;
            setPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public parallelize_args(parallelize_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            this.dataId = other.dataId;
            this.partitions = other.partitions;
        }

        public parallelize_args deepCopy() {
            return new parallelize_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            setDataIdIsSet(false);
            this.dataId = 0;
            setPartitionsIsSet(false);
            this.partitions = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public parallelize_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        public long getDataId() {
            return this.dataId;
        }

        public parallelize_args setDataId(long dataId) {
            this.dataId = dataId;
            setDataIdIsSet(true);
            return this;
        }

        public void unsetDataId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATAID_ISSET_ID);
        }

        /** Returns true if field dataId is set (has been assigned a value) and false otherwise */
        public boolean isSetDataId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATAID_ISSET_ID);
        }

        public void setDataIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATAID_ISSET_ID, value);
        }

        public long getPartitions() {
            return this.partitions;
        }

        public parallelize_args setPartitions(long partitions) {
            this.partitions = partitions;
            setPartitionsIsSet(true);
            return this;
        }

        public void unsetPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
        }

        /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
        public boolean isSetPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
        }

        public void setPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case DATA_ID:
                    if (value == null) {
                        unsetDataId();
                    } else {
                        setDataId((java.lang.Long) value);
                    }
                    break;

                case PARTITIONS:
                    if (value == null) {
                        unsetPartitions();
                    } else {
                        setPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case DATA_ID:
                    return getDataId();

                case PARTITIONS:
                    return getPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case DATA_ID:
                    return isSetDataId();
                case PARTITIONS:
                    return isSetPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof parallelize_args)
                return this.equals((parallelize_args) that);
            return false;
        }

        public boolean equals(parallelize_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_dataId = true;
            boolean that_present_dataId = true;
            if (this_present_dataId || that_present_dataId) {
                if (!(this_present_dataId && that_present_dataId))
                    return false;
                if (this.dataId != that.dataId)
                    return false;
            }

            boolean this_present_partitions = true;
            boolean that_present_partitions = true;
            if (this_present_partitions || that_present_partitions) {
                if (!(this_present_partitions && that_present_partitions))
                    return false;
                if (this.partitions != that.partitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dataId);

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partitions);

            return hashCode;
        }

        @Override
        public int compareTo(parallelize_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetDataId(), other.isSetDataId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDataId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataId, other.dataId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPartitions(), other.isSetPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("parallelize_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("dataId:");
            sb.append(this.dataId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("partitions:");
            sb.append(this.partitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class parallelize_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public parallelize_argsStandardScheme getScheme() {
                return new parallelize_argsStandardScheme();
            }
        }

        private static class parallelize_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parallelize_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, parallelize_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DATA_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.dataId = iprot.readI64();
                                struct.setDataIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.partitions = iprot.readI64();
                                struct.setPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, parallelize_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(DATA_ID_FIELD_DESC);
                oprot.writeI64(struct.dataId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.partitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class parallelize_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public parallelize_argsTupleScheme getScheme() {
                return new parallelize_argsTupleScheme();
            }
        }

        private static class parallelize_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parallelize_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, parallelize_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetDataId()) {
                    optionals.set(1);
                }
                if (struct.isSetPartitions()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetDataId()) {
                    oprot.writeI64(struct.dataId);
                }
                if (struct.isSetPartitions()) {
                    oprot.writeI64(struct.partitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, parallelize_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.dataId = iprot.readI64();
                    struct.setDataIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.partitions = iprot.readI64();
                    struct.setPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class parallelize_result implements org.apache.thrift.TBase<parallelize_result, parallelize_result._Fields>, java.io.Serializable, Cloneable, Comparable<parallelize_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parallelize_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parallelize_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parallelize_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parallelize_result.class, metaDataMap);
        }

        public parallelize_result() {
        }

        public parallelize_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public parallelize_result(parallelize_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public parallelize_result deepCopy() {
            return new parallelize_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public parallelize_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public parallelize_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof parallelize_result)
                return this.equals((parallelize_result) that);
            return false;
        }

        public boolean equals(parallelize_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(parallelize_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("parallelize_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class parallelize_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public parallelize_resultStandardScheme getScheme() {
                return new parallelize_resultStandardScheme();
            }
        }

        private static class parallelize_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parallelize_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, parallelize_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, parallelize_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class parallelize_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public parallelize_resultTupleScheme getScheme() {
                return new parallelize_resultTupleScheme();
            }
        }

        private static class parallelize_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parallelize_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, parallelize_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, parallelize_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class parallelize4_args implements org.apache.thrift.TBase<parallelize4_args, parallelize4_args._Fields>, java.io.Serializable, Cloneable, Comparable<parallelize4_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parallelize4_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField DATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataId", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.I64, (short) 3);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parallelize4_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parallelize4_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private long dataId; // required
        private long partitions; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            DATA_ID((short) 2, "dataId"),
            PARTITIONS((short) 3, "partitions"),
            SRC((short) 4, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // DATA_ID
                        return DATA_ID;
                    case 3: // PARTITIONS
                        return PARTITIONS;
                    case 4: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __DATAID_ISSET_ID = 0;
        private static final int __PARTITIONS_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.DATA_ID, new org.apache.thrift.meta_data.FieldMetaData("dataId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parallelize4_args.class, metaDataMap);
        }

        public parallelize4_args() {
        }

        public parallelize4_args(
                IWorkerId id,
                long dataId,
                long partitions,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.dataId = dataId;
            setDataIdIsSet(true);
            this.partitions = partitions;
            setPartitionsIsSet(true);
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public parallelize4_args(parallelize4_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            this.dataId = other.dataId;
            this.partitions = other.partitions;
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public parallelize4_args deepCopy() {
            return new parallelize4_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            setDataIdIsSet(false);
            this.dataId = 0;
            setPartitionsIsSet(false);
            this.partitions = 0;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public parallelize4_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        public long getDataId() {
            return this.dataId;
        }

        public parallelize4_args setDataId(long dataId) {
            this.dataId = dataId;
            setDataIdIsSet(true);
            return this;
        }

        public void unsetDataId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATAID_ISSET_ID);
        }

        /** Returns true if field dataId is set (has been assigned a value) and false otherwise */
        public boolean isSetDataId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATAID_ISSET_ID);
        }

        public void setDataIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATAID_ISSET_ID, value);
        }

        public long getPartitions() {
            return this.partitions;
        }

        public parallelize4_args setPartitions(long partitions) {
            this.partitions = partitions;
            setPartitionsIsSet(true);
            return this;
        }

        public void unsetPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
        }

        /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
        public boolean isSetPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
        }

        public void setPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITIONS_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public parallelize4_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case DATA_ID:
                    if (value == null) {
                        unsetDataId();
                    } else {
                        setDataId((java.lang.Long) value);
                    }
                    break;

                case PARTITIONS:
                    if (value == null) {
                        unsetPartitions();
                    } else {
                        setPartitions((java.lang.Long) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case DATA_ID:
                    return getDataId();

                case PARTITIONS:
                    return getPartitions();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case DATA_ID:
                    return isSetDataId();
                case PARTITIONS:
                    return isSetPartitions();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof parallelize4_args)
                return this.equals((parallelize4_args) that);
            return false;
        }

        public boolean equals(parallelize4_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_dataId = true;
            boolean that_present_dataId = true;
            if (this_present_dataId || that_present_dataId) {
                if (!(this_present_dataId && that_present_dataId))
                    return false;
                if (this.dataId != that.dataId)
                    return false;
            }

            boolean this_present_partitions = true;
            boolean that_present_partitions = true;
            if (this_present_partitions || that_present_partitions) {
                if (!(this_present_partitions && that_present_partitions))
                    return false;
                if (this.partitions != that.partitions)
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dataId);

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partitions);

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(parallelize4_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetDataId(), other.isSetDataId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDataId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataId, other.dataId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPartitions(), other.isSetPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("parallelize4_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("dataId:");
            sb.append(this.dataId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("partitions:");
            sb.append(this.partitions);
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class parallelize4_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public parallelize4_argsStandardScheme getScheme() {
                return new parallelize4_argsStandardScheme();
            }
        }

        private static class parallelize4_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parallelize4_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, parallelize4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DATA_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.dataId = iprot.readI64();
                                struct.setDataIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.partitions = iprot.readI64();
                                struct.setPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, parallelize4_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(DATA_ID_FIELD_DESC);
                oprot.writeI64(struct.dataId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.partitions);
                oprot.writeFieldEnd();
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class parallelize4_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public parallelize4_argsTupleScheme getScheme() {
                return new parallelize4_argsTupleScheme();
            }
        }

        private static class parallelize4_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parallelize4_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, parallelize4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetDataId()) {
                    optionals.set(1);
                }
                if (struct.isSetPartitions()) {
                    optionals.set(2);
                }
                if (struct.isSetSrc()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetDataId()) {
                    oprot.writeI64(struct.dataId);
                }
                if (struct.isSetPartitions()) {
                    oprot.writeI64(struct.partitions);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, parallelize4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.dataId = iprot.readI64();
                    struct.setDataIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.partitions = iprot.readI64();
                    struct.setPartitionsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class parallelize4_result implements org.apache.thrift.TBase<parallelize4_result, parallelize4_result._Fields>, java.io.Serializable, Cloneable, Comparable<parallelize4_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parallelize4_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parallelize4_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parallelize4_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parallelize4_result.class, metaDataMap);
        }

        public parallelize4_result() {
        }

        public parallelize4_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public parallelize4_result(parallelize4_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public parallelize4_result deepCopy() {
            return new parallelize4_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public parallelize4_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public parallelize4_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof parallelize4_result)
                return this.equals((parallelize4_result) that);
            return false;
        }

        public boolean equals(parallelize4_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(parallelize4_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("parallelize4_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class parallelize4_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public parallelize4_resultStandardScheme getScheme() {
                return new parallelize4_resultStandardScheme();
            }
        }

        private static class parallelize4_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parallelize4_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, parallelize4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, parallelize4_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class parallelize4_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public parallelize4_resultTupleScheme getScheme() {
                return new parallelize4_resultTupleScheme();
            }
        }

        private static class parallelize4_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parallelize4_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, parallelize4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, parallelize4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class importDataFrame_args implements org.apache.thrift.TBase<importDataFrame_args, importDataFrame_args._Fields>, java.io.Serializable, Cloneable, Comparable<importDataFrame_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importDataFrame_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new importDataFrame_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new importDataFrame_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId data; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            DATA((short) 2, "data");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // DATA
                        return DATA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importDataFrame_args.class, metaDataMap);
        }

        public importDataFrame_args() {
        }

        public importDataFrame_args(
                IWorkerId id,
                org.ignis.rpc.driver.IDataFrameId data) {
            this();
            this.id = id;
            this.data = data;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public importDataFrame_args(importDataFrame_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetData()) {
                this.data = new org.ignis.rpc.driver.IDataFrameId(other.data);
            }
        }

        public importDataFrame_args deepCopy() {
            return new importDataFrame_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.data = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public importDataFrame_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getData() {
            return this.data;
        }

        public importDataFrame_args setData(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId data) {
            this.data = data;
            return this;
        }

        public void unsetData() {
            this.data = null;
        }

        /** Returns true if field data is set (has been assigned a value) and false otherwise */
        public boolean isSetData() {
            return this.data != null;
        }

        public void setDataIsSet(boolean value) {
            if (!value) {
                this.data = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case DATA:
                    if (value == null) {
                        unsetData();
                    } else {
                        setData((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case DATA:
                    return getData();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case DATA:
                    return isSetData();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof importDataFrame_args)
                return this.equals((importDataFrame_args) that);
            return false;
        }

        public boolean equals(importDataFrame_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_data = true && this.isSetData();
            boolean that_present_data = true && that.isSetData();
            if (this_present_data || that_present_data) {
                if (!(this_present_data && that_present_data))
                    return false;
                if (!this.data.equals(that.data))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
            if (isSetData())
                hashCode = hashCode * 8191 + data.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(importDataFrame_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetData(), other.isSetData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("importDataFrame_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("data:");
            if (this.data == null) {
                sb.append("null");
            } else {
                sb.append(this.data);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (data != null) {
                data.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class importDataFrame_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importDataFrame_argsStandardScheme getScheme() {
                return new importDataFrame_argsStandardScheme();
            }
        }

        private static class importDataFrame_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<importDataFrame_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, importDataFrame_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.data = new org.ignis.rpc.driver.IDataFrameId();
                                struct.data.read(iprot);
                                struct.setDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, importDataFrame_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.data != null) {
                    oprot.writeFieldBegin(DATA_FIELD_DESC);
                    struct.data.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class importDataFrame_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importDataFrame_argsTupleScheme getScheme() {
                return new importDataFrame_argsTupleScheme();
            }
        }

        private static class importDataFrame_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<importDataFrame_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, importDataFrame_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetData()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetData()) {
                    struct.data.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, importDataFrame_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.data = new org.ignis.rpc.driver.IDataFrameId();
                    struct.data.read(iprot);
                    struct.setDataIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class importDataFrame_result implements org.apache.thrift.TBase<importDataFrame_result, importDataFrame_result._Fields>, java.io.Serializable, Cloneable, Comparable<importDataFrame_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importDataFrame_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new importDataFrame_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new importDataFrame_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importDataFrame_result.class, metaDataMap);
        }

        public importDataFrame_result() {
        }

        public importDataFrame_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public importDataFrame_result(importDataFrame_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public importDataFrame_result deepCopy() {
            return new importDataFrame_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public importDataFrame_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public importDataFrame_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof importDataFrame_result)
                return this.equals((importDataFrame_result) that);
            return false;
        }

        public boolean equals(importDataFrame_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(importDataFrame_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("importDataFrame_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class importDataFrame_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importDataFrame_resultStandardScheme getScheme() {
                return new importDataFrame_resultStandardScheme();
            }
        }

        private static class importDataFrame_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<importDataFrame_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, importDataFrame_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, importDataFrame_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class importDataFrame_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importDataFrame_resultTupleScheme getScheme() {
                return new importDataFrame_resultTupleScheme();
            }
        }

        private static class importDataFrame_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<importDataFrame_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, importDataFrame_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, importDataFrame_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class importDataFrame3_args implements org.apache.thrift.TBase<importDataFrame3_args, importDataFrame3_args._Fields>, java.io.Serializable, Cloneable, Comparable<importDataFrame3_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importDataFrame3_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new importDataFrame3_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new importDataFrame3_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId data; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            DATA((short) 2, "data"),
            SRC((short) 3, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // DATA
                        return DATA;
                    case 3: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importDataFrame3_args.class, metaDataMap);
        }

        public importDataFrame3_args() {
        }

        public importDataFrame3_args(
                IWorkerId id,
                org.ignis.rpc.driver.IDataFrameId data,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.data = data;
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public importDataFrame3_args(importDataFrame3_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetData()) {
                this.data = new org.ignis.rpc.driver.IDataFrameId(other.data);
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public importDataFrame3_args deepCopy() {
            return new importDataFrame3_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.data = null;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public importDataFrame3_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getData() {
            return this.data;
        }

        public importDataFrame3_args setData(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId data) {
            this.data = data;
            return this;
        }

        public void unsetData() {
            this.data = null;
        }

        /** Returns true if field data is set (has been assigned a value) and false otherwise */
        public boolean isSetData() {
            return this.data != null;
        }

        public void setDataIsSet(boolean value) {
            if (!value) {
                this.data = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public importDataFrame3_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case DATA:
                    if (value == null) {
                        unsetData();
                    } else {
                        setData((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case DATA:
                    return getData();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case DATA:
                    return isSetData();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof importDataFrame3_args)
                return this.equals((importDataFrame3_args) that);
            return false;
        }

        public boolean equals(importDataFrame3_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_data = true && this.isSetData();
            boolean that_present_data = true && that.isSetData();
            if (this_present_data || that_present_data) {
                if (!(this_present_data && that_present_data))
                    return false;
                if (!this.data.equals(that.data))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
            if (isSetData())
                hashCode = hashCode * 8191 + data.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(importDataFrame3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetData(), other.isSetData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("importDataFrame3_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("data:");
            if (this.data == null) {
                sb.append("null");
            } else {
                sb.append(this.data);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (data != null) {
                data.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class importDataFrame3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importDataFrame3_argsStandardScheme getScheme() {
                return new importDataFrame3_argsStandardScheme();
            }
        }

        private static class importDataFrame3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<importDataFrame3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, importDataFrame3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.data = new org.ignis.rpc.driver.IDataFrameId();
                                struct.data.read(iprot);
                                struct.setDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, importDataFrame3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.data != null) {
                    oprot.writeFieldBegin(DATA_FIELD_DESC);
                    struct.data.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class importDataFrame3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importDataFrame3_argsTupleScheme getScheme() {
                return new importDataFrame3_argsTupleScheme();
            }
        }

        private static class importDataFrame3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<importDataFrame3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, importDataFrame3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetData()) {
                    optionals.set(1);
                }
                if (struct.isSetSrc()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetData()) {
                    struct.data.write(oprot);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, importDataFrame3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.data = new org.ignis.rpc.driver.IDataFrameId();
                    struct.data.read(iprot);
                    struct.setDataIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class importDataFrame3_result implements org.apache.thrift.TBase<importDataFrame3_result, importDataFrame3_result._Fields>, java.io.Serializable, Cloneable, Comparable<importDataFrame3_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importDataFrame3_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new importDataFrame3_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new importDataFrame3_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importDataFrame3_result.class, metaDataMap);
        }

        public importDataFrame3_result() {
        }

        public importDataFrame3_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public importDataFrame3_result(importDataFrame3_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public importDataFrame3_result deepCopy() {
            return new importDataFrame3_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public importDataFrame3_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public importDataFrame3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof importDataFrame3_result)
                return this.equals((importDataFrame3_result) that);
            return false;
        }

        public boolean equals(importDataFrame3_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(importDataFrame3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("importDataFrame3_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class importDataFrame3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importDataFrame3_resultStandardScheme getScheme() {
                return new importDataFrame3_resultStandardScheme();
            }
        }

        private static class importDataFrame3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<importDataFrame3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, importDataFrame3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, importDataFrame3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class importDataFrame3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importDataFrame3_resultTupleScheme getScheme() {
                return new importDataFrame3_resultTupleScheme();
            }
        }

        private static class importDataFrame3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<importDataFrame3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, importDataFrame3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, importDataFrame3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class plainFile_args implements org.apache.thrift.TBase<plainFile_args, plainFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<plainFile_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("plainFile_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("delim", org.apache.thrift.protocol.TType.BYTE, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new plainFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new plainFile_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required
        private byte delim; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path"),
            DELIM((short) 3, "delim");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    case 3: // DELIM
                        return DELIM;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __DELIM_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DELIM, new org.apache.thrift.meta_data.FieldMetaData("delim", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(plainFile_args.class, metaDataMap);
        }

        public plainFile_args() {
        }

        public plainFile_args(
                IWorkerId id,
                java.lang.String path,
                byte delim) {
            this();
            this.id = id;
            this.path = path;
            this.delim = delim;
            setDelimIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public plainFile_args(plainFile_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetPath()) {
                this.path = other.path;
            }
            this.delim = other.delim;
        }

        public plainFile_args deepCopy() {
            return new plainFile_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.path = null;
            setDelimIsSet(false);
            this.delim = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public plainFile_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public plainFile_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        public byte getDelim() {
            return this.delim;
        }

        public plainFile_args setDelim(byte delim) {
            this.delim = delim;
            setDelimIsSet(true);
            return this;
        }

        public void unsetDelim() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELIM_ISSET_ID);
        }

        /** Returns true if field delim is set (has been assigned a value) and false otherwise */
        public boolean isSetDelim() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELIM_ISSET_ID);
        }

        public void setDelimIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELIM_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

                case DELIM:
                    if (value == null) {
                        unsetDelim();
                    } else {
                        setDelim((java.lang.Byte) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

                case DELIM:
                    return getDelim();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
                case DELIM:
                    return isSetDelim();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof plainFile_args)
                return this.equals((plainFile_args) that);
            return false;
        }

        public boolean equals(plainFile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            boolean this_present_delim = true;
            boolean that_present_delim = true;
            if (this_present_delim || that_present_delim) {
                if (!(this_present_delim && that_present_delim))
                    return false;
                if (this.delim != that.delim)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            hashCode = hashCode * 8191 + (int) (delim);

            return hashCode;
        }

        @Override
        public int compareTo(plainFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetDelim(), other.isSetDelim());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDelim()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delim, other.delim);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("plainFile_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("delim:");
            sb.append(this.delim);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class plainFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public plainFile_argsStandardScheme getScheme() {
                return new plainFile_argsStandardScheme();
            }
        }

        private static class plainFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<plainFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, plainFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // DELIM
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.delim = iprot.readByte();
                                struct.setDelimIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, plainFile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(DELIM_FIELD_DESC);
                oprot.writeByte(struct.delim);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class plainFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public plainFile_argsTupleScheme getScheme() {
                return new plainFile_argsTupleScheme();
            }
        }

        private static class plainFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<plainFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, plainFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                if (struct.isSetDelim()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
                if (struct.isSetDelim()) {
                    oprot.writeByte(struct.delim);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, plainFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.delim = iprot.readByte();
                    struct.setDelimIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class plainFile_result implements org.apache.thrift.TBase<plainFile_result, plainFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<plainFile_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("plainFile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new plainFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new plainFile_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(plainFile_result.class, metaDataMap);
        }

        public plainFile_result() {
        }

        public plainFile_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public plainFile_result(plainFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public plainFile_result deepCopy() {
            return new plainFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public plainFile_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public plainFile_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof plainFile_result)
                return this.equals((plainFile_result) that);
            return false;
        }

        public boolean equals(plainFile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(plainFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("plainFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class plainFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public plainFile_resultStandardScheme getScheme() {
                return new plainFile_resultStandardScheme();
            }
        }

        private static class plainFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<plainFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, plainFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, plainFile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class plainFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public plainFile_resultTupleScheme getScheme() {
                return new plainFile_resultTupleScheme();
            }
        }

        private static class plainFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<plainFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, plainFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, plainFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class plainFile4_args implements org.apache.thrift.TBase<plainFile4_args, plainFile4_args._Fields>, java.io.Serializable, Cloneable, Comparable<plainFile4_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("plainFile4_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField MIN_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("minPartitions", org.apache.thrift.protocol.TType.I64, (short) 3);
        private static final org.apache.thrift.protocol.TField DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("delim", org.apache.thrift.protocol.TType.BYTE, (short) 4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new plainFile4_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new plainFile4_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required
        private long minPartitions; // required
        private byte delim; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path"),
            MIN_PARTITIONS((short) 3, "minPartitions"),
            DELIM((short) 4, "delim");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    case 3: // MIN_PARTITIONS
                        return MIN_PARTITIONS;
                    case 4: // DELIM
                        return DELIM;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __MINPARTITIONS_ISSET_ID = 0;
        private static final int __DELIM_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MIN_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("minPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.DELIM, new org.apache.thrift.meta_data.FieldMetaData("delim", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(plainFile4_args.class, metaDataMap);
        }

        public plainFile4_args() {
        }

        public plainFile4_args(
                IWorkerId id,
                java.lang.String path,
                long minPartitions,
                byte delim) {
            this();
            this.id = id;
            this.path = path;
            this.minPartitions = minPartitions;
            setMinPartitionsIsSet(true);
            this.delim = delim;
            setDelimIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public plainFile4_args(plainFile4_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetPath()) {
                this.path = other.path;
            }
            this.minPartitions = other.minPartitions;
            this.delim = other.delim;
        }

        public plainFile4_args deepCopy() {
            return new plainFile4_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.path = null;
            setMinPartitionsIsSet(false);
            this.minPartitions = 0;
            setDelimIsSet(false);
            this.delim = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public plainFile4_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public plainFile4_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        public long getMinPartitions() {
            return this.minPartitions;
        }

        public plainFile4_args setMinPartitions(long minPartitions) {
            this.minPartitions = minPartitions;
            setMinPartitionsIsSet(true);
            return this;
        }

        public void unsetMinPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINPARTITIONS_ISSET_ID);
        }

        /** Returns true if field minPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetMinPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINPARTITIONS_ISSET_ID);
        }

        public void setMinPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINPARTITIONS_ISSET_ID, value);
        }

        public byte getDelim() {
            return this.delim;
        }

        public plainFile4_args setDelim(byte delim) {
            this.delim = delim;
            setDelimIsSet(true);
            return this;
        }

        public void unsetDelim() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELIM_ISSET_ID);
        }

        /** Returns true if field delim is set (has been assigned a value) and false otherwise */
        public boolean isSetDelim() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELIM_ISSET_ID);
        }

        public void setDelimIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELIM_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

                case MIN_PARTITIONS:
                    if (value == null) {
                        unsetMinPartitions();
                    } else {
                        setMinPartitions((java.lang.Long) value);
                    }
                    break;

                case DELIM:
                    if (value == null) {
                        unsetDelim();
                    } else {
                        setDelim((java.lang.Byte) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

                case MIN_PARTITIONS:
                    return getMinPartitions();

                case DELIM:
                    return getDelim();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
                case MIN_PARTITIONS:
                    return isSetMinPartitions();
                case DELIM:
                    return isSetDelim();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof plainFile4_args)
                return this.equals((plainFile4_args) that);
            return false;
        }

        public boolean equals(plainFile4_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            boolean this_present_minPartitions = true;
            boolean that_present_minPartitions = true;
            if (this_present_minPartitions || that_present_minPartitions) {
                if (!(this_present_minPartitions && that_present_minPartitions))
                    return false;
                if (this.minPartitions != that.minPartitions)
                    return false;
            }

            boolean this_present_delim = true;
            boolean that_present_delim = true;
            if (this_present_delim || that_present_delim) {
                if (!(this_present_delim && that_present_delim))
                    return false;
                if (this.delim != that.delim)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minPartitions);

            hashCode = hashCode * 8191 + (int) (delim);

            return hashCode;
        }

        @Override
        public int compareTo(plainFile4_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetMinPartitions(), other.isSetMinPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMinPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minPartitions, other.minPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetDelim(), other.isSetDelim());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDelim()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delim, other.delim);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("plainFile4_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("minPartitions:");
            sb.append(this.minPartitions);
            first = false;
            if (!first) sb.append(", ");
            sb.append("delim:");
            sb.append(this.delim);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class plainFile4_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public plainFile4_argsStandardScheme getScheme() {
                return new plainFile4_argsStandardScheme();
            }
        }

        private static class plainFile4_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<plainFile4_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, plainFile4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // MIN_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.minPartitions = iprot.readI64();
                                struct.setMinPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // DELIM
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.delim = iprot.readByte();
                                struct.setDelimIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, plainFile4_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(MIN_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.minPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(DELIM_FIELD_DESC);
                oprot.writeByte(struct.delim);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class plainFile4_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public plainFile4_argsTupleScheme getScheme() {
                return new plainFile4_argsTupleScheme();
            }
        }

        private static class plainFile4_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<plainFile4_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, plainFile4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                if (struct.isSetMinPartitions()) {
                    optionals.set(2);
                }
                if (struct.isSetDelim()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
                if (struct.isSetMinPartitions()) {
                    oprot.writeI64(struct.minPartitions);
                }
                if (struct.isSetDelim()) {
                    oprot.writeByte(struct.delim);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, plainFile4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.minPartitions = iprot.readI64();
                    struct.setMinPartitionsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.delim = iprot.readByte();
                    struct.setDelimIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class plainFile4_result implements org.apache.thrift.TBase<plainFile4_result, plainFile4_result._Fields>, java.io.Serializable, Cloneable, Comparable<plainFile4_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("plainFile4_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new plainFile4_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new plainFile4_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(plainFile4_result.class, metaDataMap);
        }

        public plainFile4_result() {
        }

        public plainFile4_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public plainFile4_result(plainFile4_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public plainFile4_result deepCopy() {
            return new plainFile4_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public plainFile4_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public plainFile4_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof plainFile4_result)
                return this.equals((plainFile4_result) that);
            return false;
        }

        public boolean equals(plainFile4_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(plainFile4_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("plainFile4_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class plainFile4_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public plainFile4_resultStandardScheme getScheme() {
                return new plainFile4_resultStandardScheme();
            }
        }

        private static class plainFile4_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<plainFile4_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, plainFile4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, plainFile4_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class plainFile4_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public plainFile4_resultTupleScheme getScheme() {
                return new plainFile4_resultTupleScheme();
            }
        }

        private static class plainFile4_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<plainFile4_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, plainFile4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, plainFile4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class textFile_args implements org.apache.thrift.TBase<textFile_args, textFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<textFile_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("textFile_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new textFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new textFile_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(textFile_args.class, metaDataMap);
        }

        public textFile_args() {
        }

        public textFile_args(
                IWorkerId id,
                java.lang.String path) {
            this();
            this.id = id;
            this.path = path;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public textFile_args(textFile_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetPath()) {
                this.path = other.path;
            }
        }

        public textFile_args deepCopy() {
            return new textFile_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.path = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public textFile_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public textFile_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof textFile_args)
                return this.equals((textFile_args) that);
            return false;
        }

        public boolean equals(textFile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(textFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("textFile_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class textFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public textFile_argsStandardScheme getScheme() {
                return new textFile_argsStandardScheme();
            }
        }

        private static class textFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<textFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, textFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, textFile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class textFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public textFile_argsTupleScheme getScheme() {
                return new textFile_argsTupleScheme();
            }
        }

        private static class textFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<textFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, textFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, textFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class textFile_result implements org.apache.thrift.TBase<textFile_result, textFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<textFile_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("textFile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new textFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new textFile_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(textFile_result.class, metaDataMap);
        }

        public textFile_result() {
        }

        public textFile_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public textFile_result(textFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public textFile_result deepCopy() {
            return new textFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public textFile_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public textFile_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof textFile_result)
                return this.equals((textFile_result) that);
            return false;
        }

        public boolean equals(textFile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(textFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("textFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class textFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public textFile_resultStandardScheme getScheme() {
                return new textFile_resultStandardScheme();
            }
        }

        private static class textFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<textFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, textFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, textFile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class textFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public textFile_resultTupleScheme getScheme() {
                return new textFile_resultTupleScheme();
            }
        }

        private static class textFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<textFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, textFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, textFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class textFile3_args implements org.apache.thrift.TBase<textFile3_args, textFile3_args._Fields>, java.io.Serializable, Cloneable, Comparable<textFile3_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("textFile3_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField MIN_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("minPartitions", org.apache.thrift.protocol.TType.I64, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new textFile3_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new textFile3_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required
        private long minPartitions; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path"),
            MIN_PARTITIONS((short) 3, "minPartitions");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    case 3: // MIN_PARTITIONS
                        return MIN_PARTITIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __MINPARTITIONS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MIN_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("minPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(textFile3_args.class, metaDataMap);
        }

        public textFile3_args() {
        }

        public textFile3_args(
                IWorkerId id,
                java.lang.String path,
                long minPartitions) {
            this();
            this.id = id;
            this.path = path;
            this.minPartitions = minPartitions;
            setMinPartitionsIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public textFile3_args(textFile3_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetPath()) {
                this.path = other.path;
            }
            this.minPartitions = other.minPartitions;
        }

        public textFile3_args deepCopy() {
            return new textFile3_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.path = null;
            setMinPartitionsIsSet(false);
            this.minPartitions = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public textFile3_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public textFile3_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        public long getMinPartitions() {
            return this.minPartitions;
        }

        public textFile3_args setMinPartitions(long minPartitions) {
            this.minPartitions = minPartitions;
            setMinPartitionsIsSet(true);
            return this;
        }

        public void unsetMinPartitions() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINPARTITIONS_ISSET_ID);
        }

        /** Returns true if field minPartitions is set (has been assigned a value) and false otherwise */
        public boolean isSetMinPartitions() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINPARTITIONS_ISSET_ID);
        }

        public void setMinPartitionsIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINPARTITIONS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

                case MIN_PARTITIONS:
                    if (value == null) {
                        unsetMinPartitions();
                    } else {
                        setMinPartitions((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

                case MIN_PARTITIONS:
                    return getMinPartitions();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
                case MIN_PARTITIONS:
                    return isSetMinPartitions();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof textFile3_args)
                return this.equals((textFile3_args) that);
            return false;
        }

        public boolean equals(textFile3_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            boolean this_present_minPartitions = true;
            boolean that_present_minPartitions = true;
            if (this_present_minPartitions || that_present_minPartitions) {
                if (!(this_present_minPartitions && that_present_minPartitions))
                    return false;
                if (this.minPartitions != that.minPartitions)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minPartitions);

            return hashCode;
        }

        @Override
        public int compareTo(textFile3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetMinPartitions(), other.isSetMinPartitions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMinPartitions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minPartitions, other.minPartitions);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("textFile3_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("minPartitions:");
            sb.append(this.minPartitions);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class textFile3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public textFile3_argsStandardScheme getScheme() {
                return new textFile3_argsStandardScheme();
            }
        }

        private static class textFile3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<textFile3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, textFile3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // MIN_PARTITIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.minPartitions = iprot.readI64();
                                struct.setMinPartitionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, textFile3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(MIN_PARTITIONS_FIELD_DESC);
                oprot.writeI64(struct.minPartitions);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class textFile3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public textFile3_argsTupleScheme getScheme() {
                return new textFile3_argsTupleScheme();
            }
        }

        private static class textFile3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<textFile3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, textFile3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                if (struct.isSetMinPartitions()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
                if (struct.isSetMinPartitions()) {
                    oprot.writeI64(struct.minPartitions);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, textFile3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.minPartitions = iprot.readI64();
                    struct.setMinPartitionsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class textFile3_result implements org.apache.thrift.TBase<textFile3_result, textFile3_result._Fields>, java.io.Serializable, Cloneable, Comparable<textFile3_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("textFile3_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new textFile3_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new textFile3_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(textFile3_result.class, metaDataMap);
        }

        public textFile3_result() {
        }

        public textFile3_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public textFile3_result(textFile3_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public textFile3_result deepCopy() {
            return new textFile3_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public textFile3_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public textFile3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof textFile3_result)
                return this.equals((textFile3_result) that);
            return false;
        }

        public boolean equals(textFile3_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(textFile3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("textFile3_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class textFile3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public textFile3_resultStandardScheme getScheme() {
                return new textFile3_resultStandardScheme();
            }
        }

        private static class textFile3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<textFile3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, textFile3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, textFile3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class textFile3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public textFile3_resultTupleScheme getScheme() {
                return new textFile3_resultTupleScheme();
            }
        }

        private static class textFile3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<textFile3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, textFile3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, textFile3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionObjectFile_args implements org.apache.thrift.TBase<partitionObjectFile_args, partitionObjectFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<partitionObjectFile_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionObjectFile_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionObjectFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionObjectFile_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionObjectFile_args.class, metaDataMap);
        }

        public partitionObjectFile_args() {
        }

        public partitionObjectFile_args(
                IWorkerId id,
                java.lang.String path) {
            this();
            this.id = id;
            this.path = path;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionObjectFile_args(partitionObjectFile_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetPath()) {
                this.path = other.path;
            }
        }

        public partitionObjectFile_args deepCopy() {
            return new partitionObjectFile_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.path = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public partitionObjectFile_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public partitionObjectFile_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionObjectFile_args)
                return this.equals((partitionObjectFile_args) that);
            return false;
        }

        public boolean equals(partitionObjectFile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionObjectFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionObjectFile_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionObjectFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionObjectFile_argsStandardScheme getScheme() {
                return new partitionObjectFile_argsStandardScheme();
            }
        }

        private static class partitionObjectFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionObjectFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionObjectFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionObjectFile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionObjectFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionObjectFile_argsTupleScheme getScheme() {
                return new partitionObjectFile_argsTupleScheme();
            }
        }

        private static class partitionObjectFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionObjectFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionObjectFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionObjectFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionObjectFile_result implements org.apache.thrift.TBase<partitionObjectFile_result, partitionObjectFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<partitionObjectFile_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionObjectFile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionObjectFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionObjectFile_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionObjectFile_result.class, metaDataMap);
        }

        public partitionObjectFile_result() {
        }

        public partitionObjectFile_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionObjectFile_result(partitionObjectFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public partitionObjectFile_result deepCopy() {
            return new partitionObjectFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public partitionObjectFile_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public partitionObjectFile_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionObjectFile_result)
                return this.equals((partitionObjectFile_result) that);
            return false;
        }

        public boolean equals(partitionObjectFile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionObjectFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionObjectFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionObjectFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionObjectFile_resultStandardScheme getScheme() {
                return new partitionObjectFile_resultStandardScheme();
            }
        }

        private static class partitionObjectFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionObjectFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionObjectFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionObjectFile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionObjectFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionObjectFile_resultTupleScheme getScheme() {
                return new partitionObjectFile_resultTupleScheme();
            }
        }

        private static class partitionObjectFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionObjectFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionObjectFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionObjectFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionObjectFile3_args implements org.apache.thrift.TBase<partitionObjectFile3_args, partitionObjectFile3_args._Fields>, java.io.Serializable, Cloneable, Comparable<partitionObjectFile3_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionObjectFile3_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionObjectFile3_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionObjectFile3_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path"),
            SRC((short) 3, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    case 3: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionObjectFile3_args.class, metaDataMap);
        }

        public partitionObjectFile3_args() {
        }

        public partitionObjectFile3_args(
                IWorkerId id,
                java.lang.String path,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.path = path;
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionObjectFile3_args(partitionObjectFile3_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetPath()) {
                this.path = other.path;
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public partitionObjectFile3_args deepCopy() {
            return new partitionObjectFile3_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.path = null;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public partitionObjectFile3_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public partitionObjectFile3_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public partitionObjectFile3_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionObjectFile3_args)
                return this.equals((partitionObjectFile3_args) that);
            return false;
        }

        public boolean equals(partitionObjectFile3_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionObjectFile3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionObjectFile3_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionObjectFile3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionObjectFile3_argsStandardScheme getScheme() {
                return new partitionObjectFile3_argsStandardScheme();
            }
        }

        private static class partitionObjectFile3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionObjectFile3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionObjectFile3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionObjectFile3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionObjectFile3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionObjectFile3_argsTupleScheme getScheme() {
                return new partitionObjectFile3_argsTupleScheme();
            }
        }

        private static class partitionObjectFile3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionObjectFile3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionObjectFile3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                if (struct.isSetSrc()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionObjectFile3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionObjectFile3_result implements org.apache.thrift.TBase<partitionObjectFile3_result, partitionObjectFile3_result._Fields>, java.io.Serializable, Cloneable, Comparable<partitionObjectFile3_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionObjectFile3_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionObjectFile3_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionObjectFile3_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionObjectFile3_result.class, metaDataMap);
        }

        public partitionObjectFile3_result() {
        }

        public partitionObjectFile3_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionObjectFile3_result(partitionObjectFile3_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public partitionObjectFile3_result deepCopy() {
            return new partitionObjectFile3_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public partitionObjectFile3_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public partitionObjectFile3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionObjectFile3_result)
                return this.equals((partitionObjectFile3_result) that);
            return false;
        }

        public boolean equals(partitionObjectFile3_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionObjectFile3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionObjectFile3_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionObjectFile3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionObjectFile3_resultStandardScheme getScheme() {
                return new partitionObjectFile3_resultStandardScheme();
            }
        }

        private static class partitionObjectFile3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionObjectFile3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionObjectFile3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionObjectFile3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionObjectFile3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionObjectFile3_resultTupleScheme getScheme() {
                return new partitionObjectFile3_resultTupleScheme();
            }
        }

        private static class partitionObjectFile3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionObjectFile3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionObjectFile3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionObjectFile3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionTextFile_args implements org.apache.thrift.TBase<partitionTextFile_args, partitionTextFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<partitionTextFile_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionTextFile_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionTextFile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionTextFile_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionTextFile_args.class, metaDataMap);
        }

        public partitionTextFile_args() {
        }

        public partitionTextFile_args(
                IWorkerId id,
                java.lang.String path) {
            this();
            this.id = id;
            this.path = path;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionTextFile_args(partitionTextFile_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetPath()) {
                this.path = other.path;
            }
        }

        public partitionTextFile_args deepCopy() {
            return new partitionTextFile_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.path = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public partitionTextFile_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public partitionTextFile_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionTextFile_args)
                return this.equals((partitionTextFile_args) that);
            return false;
        }

        public boolean equals(partitionTextFile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionTextFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionTextFile_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionTextFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionTextFile_argsStandardScheme getScheme() {
                return new partitionTextFile_argsStandardScheme();
            }
        }

        private static class partitionTextFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionTextFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionTextFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionTextFile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionTextFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionTextFile_argsTupleScheme getScheme() {
                return new partitionTextFile_argsTupleScheme();
            }
        }

        private static class partitionTextFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionTextFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionTextFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionTextFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionTextFile_result implements org.apache.thrift.TBase<partitionTextFile_result, partitionTextFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<partitionTextFile_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionTextFile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionTextFile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionTextFile_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionTextFile_result.class, metaDataMap);
        }

        public partitionTextFile_result() {
        }

        public partitionTextFile_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionTextFile_result(partitionTextFile_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public partitionTextFile_result deepCopy() {
            return new partitionTextFile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public partitionTextFile_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public partitionTextFile_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionTextFile_result)
                return this.equals((partitionTextFile_result) that);
            return false;
        }

        public boolean equals(partitionTextFile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionTextFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionTextFile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionTextFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionTextFile_resultStandardScheme getScheme() {
                return new partitionTextFile_resultStandardScheme();
            }
        }

        private static class partitionTextFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionTextFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionTextFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionTextFile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionTextFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionTextFile_resultTupleScheme getScheme() {
                return new partitionTextFile_resultTupleScheme();
            }
        }

        private static class partitionTextFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionTextFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionTextFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionTextFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionJsonFile3a_args implements org.apache.thrift.TBase<partitionJsonFile3a_args, partitionJsonFile3a_args._Fields>, java.io.Serializable, Cloneable, Comparable<partitionJsonFile3a_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionJsonFile3a_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField OBJECT_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("objectMapping", org.apache.thrift.protocol.TType.BOOL, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionJsonFile3a_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionJsonFile3a_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required
        private boolean objectMapping; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path"),
            OBJECT_MAPPING((short) 3, "objectMapping");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    case 3: // OBJECT_MAPPING
                        return OBJECT_MAPPING;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __OBJECTMAPPING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OBJECT_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("objectMapping", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionJsonFile3a_args.class, metaDataMap);
        }

        public partitionJsonFile3a_args() {
        }

        public partitionJsonFile3a_args(
                IWorkerId id,
                java.lang.String path,
                boolean objectMapping) {
            this();
            this.id = id;
            this.path = path;
            this.objectMapping = objectMapping;
            setObjectMappingIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionJsonFile3a_args(partitionJsonFile3a_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetPath()) {
                this.path = other.path;
            }
            this.objectMapping = other.objectMapping;
        }

        public partitionJsonFile3a_args deepCopy() {
            return new partitionJsonFile3a_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.path = null;
            setObjectMappingIsSet(false);
            this.objectMapping = false;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public partitionJsonFile3a_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public partitionJsonFile3a_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        public boolean isObjectMapping() {
            return this.objectMapping;
        }

        public partitionJsonFile3a_args setObjectMapping(boolean objectMapping) {
            this.objectMapping = objectMapping;
            setObjectMappingIsSet(true);
            return this;
        }

        public void unsetObjectMapping() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OBJECTMAPPING_ISSET_ID);
        }

        /** Returns true if field objectMapping is set (has been assigned a value) and false otherwise */
        public boolean isSetObjectMapping() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OBJECTMAPPING_ISSET_ID);
        }

        public void setObjectMappingIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OBJECTMAPPING_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

                case OBJECT_MAPPING:
                    if (value == null) {
                        unsetObjectMapping();
                    } else {
                        setObjectMapping((java.lang.Boolean) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

                case OBJECT_MAPPING:
                    return isObjectMapping();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
                case OBJECT_MAPPING:
                    return isSetObjectMapping();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionJsonFile3a_args)
                return this.equals((partitionJsonFile3a_args) that);
            return false;
        }

        public boolean equals(partitionJsonFile3a_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            boolean this_present_objectMapping = true;
            boolean that_present_objectMapping = true;
            if (this_present_objectMapping || that_present_objectMapping) {
                if (!(this_present_objectMapping && that_present_objectMapping))
                    return false;
                if (this.objectMapping != that.objectMapping)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            hashCode = hashCode * 8191 + ((objectMapping) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(partitionJsonFile3a_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetObjectMapping(), other.isSetObjectMapping());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetObjectMapping()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectMapping, other.objectMapping);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionJsonFile3a_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("objectMapping:");
            sb.append(this.objectMapping);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionJsonFile3a_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionJsonFile3a_argsStandardScheme getScheme() {
                return new partitionJsonFile3a_argsStandardScheme();
            }
        }

        private static class partitionJsonFile3a_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionJsonFile3a_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionJsonFile3a_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // OBJECT_MAPPING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.objectMapping = iprot.readBool();
                                struct.setObjectMappingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionJsonFile3a_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(OBJECT_MAPPING_FIELD_DESC);
                oprot.writeBool(struct.objectMapping);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionJsonFile3a_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionJsonFile3a_argsTupleScheme getScheme() {
                return new partitionJsonFile3a_argsTupleScheme();
            }
        }

        private static class partitionJsonFile3a_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionJsonFile3a_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionJsonFile3a_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                if (struct.isSetObjectMapping()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
                if (struct.isSetObjectMapping()) {
                    oprot.writeBool(struct.objectMapping);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionJsonFile3a_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.objectMapping = iprot.readBool();
                    struct.setObjectMappingIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionJsonFile3a_result implements org.apache.thrift.TBase<partitionJsonFile3a_result, partitionJsonFile3a_result._Fields>, java.io.Serializable, Cloneable, Comparable<partitionJsonFile3a_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionJsonFile3a_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionJsonFile3a_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionJsonFile3a_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionJsonFile3a_result.class, metaDataMap);
        }

        public partitionJsonFile3a_result() {
        }

        public partitionJsonFile3a_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionJsonFile3a_result(partitionJsonFile3a_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public partitionJsonFile3a_result deepCopy() {
            return new partitionJsonFile3a_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public partitionJsonFile3a_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public partitionJsonFile3a_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionJsonFile3a_result)
                return this.equals((partitionJsonFile3a_result) that);
            return false;
        }

        public boolean equals(partitionJsonFile3a_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionJsonFile3a_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionJsonFile3a_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionJsonFile3a_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionJsonFile3a_resultStandardScheme getScheme() {
                return new partitionJsonFile3a_resultStandardScheme();
            }
        }

        private static class partitionJsonFile3a_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionJsonFile3a_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionJsonFile3a_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionJsonFile3a_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionJsonFile3a_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionJsonFile3a_resultTupleScheme getScheme() {
                return new partitionJsonFile3a_resultTupleScheme();
            }
        }

        private static class partitionJsonFile3a_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionJsonFile3a_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionJsonFile3a_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionJsonFile3a_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionJsonFile3b_args implements org.apache.thrift.TBase<partitionJsonFile3b_args, partitionJsonFile3b_args._Fields>, java.io.Serializable, Cloneable, Comparable<partitionJsonFile3b_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionJsonFile3b_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionJsonFile3b_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionJsonFile3b_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String path; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            PATH((short) 2, "path"),
            SRC((short) 3, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // PATH
                        return PATH;
                    case 3: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionJsonFile3b_args.class, metaDataMap);
        }

        public partitionJsonFile3b_args() {
        }

        public partitionJsonFile3b_args(
                IWorkerId id,
                java.lang.String path,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.path = path;
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionJsonFile3b_args(partitionJsonFile3b_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetPath()) {
                this.path = other.path;
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public partitionJsonFile3b_args deepCopy() {
            return new partitionJsonFile3b_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.path = null;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public partitionJsonFile3b_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPath() {
            return this.path;
        }

        public partitionJsonFile3b_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
            this.path = path;
            return this;
        }

        public void unsetPath() {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath() {
            return this.path != null;
        }

        public void setPathIsSet(boolean value) {
            if (!value) {
                this.path = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public partitionJsonFile3b_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case PATH:
                    if (value == null) {
                        unsetPath();
                    } else {
                        setPath((java.lang.String) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case PATH:
                    return getPath();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case PATH:
                    return isSetPath();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionJsonFile3b_args)
                return this.equals((partitionJsonFile3b_args) that);
            return false;
        }

        public boolean equals(partitionJsonFile3b_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path) {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
            if (isSetPath())
                hashCode = hashCode * 8191 + path.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionJsonFile3b_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPath()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionJsonFile3b_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("path:");
            if (this.path == null) {
                sb.append("null");
            } else {
                sb.append(this.path);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionJsonFile3b_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionJsonFile3b_argsStandardScheme getScheme() {
                return new partitionJsonFile3b_argsStandardScheme();
            }
        }

        private static class partitionJsonFile3b_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionJsonFile3b_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionJsonFile3b_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionJsonFile3b_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null) {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionJsonFile3b_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionJsonFile3b_argsTupleScheme getScheme() {
                return new partitionJsonFile3b_argsTupleScheme();
            }
        }

        private static class partitionJsonFile3b_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionJsonFile3b_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionJsonFile3b_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPath()) {
                    optionals.set(1);
                }
                if (struct.isSetSrc()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetPath()) {
                    oprot.writeString(struct.path);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionJsonFile3b_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class partitionJsonFile3b_result implements org.apache.thrift.TBase<partitionJsonFile3b_result, partitionJsonFile3b_result._Fields>, java.io.Serializable, Cloneable, Comparable<partitionJsonFile3b_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partitionJsonFile3b_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new partitionJsonFile3b_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new partitionJsonFile3b_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partitionJsonFile3b_result.class, metaDataMap);
        }

        public partitionJsonFile3b_result() {
        }

        public partitionJsonFile3b_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public partitionJsonFile3b_result(partitionJsonFile3b_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public partitionJsonFile3b_result deepCopy() {
            return new partitionJsonFile3b_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public partitionJsonFile3b_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public partitionJsonFile3b_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof partitionJsonFile3b_result)
                return this.equals((partitionJsonFile3b_result) that);
            return false;
        }

        public boolean equals(partitionJsonFile3b_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(partitionJsonFile3b_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("partitionJsonFile3b_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class partitionJsonFile3b_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionJsonFile3b_resultStandardScheme getScheme() {
                return new partitionJsonFile3b_resultStandardScheme();
            }
        }

        private static class partitionJsonFile3b_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<partitionJsonFile3b_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, partitionJsonFile3b_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, partitionJsonFile3b_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class partitionJsonFile3b_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public partitionJsonFile3b_resultTupleScheme getScheme() {
                return new partitionJsonFile3b_resultTupleScheme();
            }
        }

        private static class partitionJsonFile3b_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<partitionJsonFile3b_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, partitionJsonFile3b_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, partitionJsonFile3b_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class loadLibrary_args implements org.apache.thrift.TBase<loadLibrary_args, loadLibrary_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadLibrary_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadLibrary_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField LIB_FIELD_DESC = new org.apache.thrift.protocol.TField("lib", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loadLibrary_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loadLibrary_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable java.lang.String lib; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            LIB((short) 2, "lib");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // LIB
                        return LIB;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.LIB, new org.apache.thrift.meta_data.FieldMetaData("lib", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadLibrary_args.class, metaDataMap);
        }

        public loadLibrary_args() {
        }

        public loadLibrary_args(
                IWorkerId id,
                java.lang.String lib) {
            this();
            this.id = id;
            this.lib = lib;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public loadLibrary_args(loadLibrary_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetLib()) {
                this.lib = other.lib;
            }
        }

        public loadLibrary_args deepCopy() {
            return new loadLibrary_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.lib = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public loadLibrary_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getLib() {
            return this.lib;
        }

        public loadLibrary_args setLib(@org.apache.thrift.annotation.Nullable java.lang.String lib) {
            this.lib = lib;
            return this;
        }

        public void unsetLib() {
            this.lib = null;
        }

        /** Returns true if field lib is set (has been assigned a value) and false otherwise */
        public boolean isSetLib() {
            return this.lib != null;
        }

        public void setLibIsSet(boolean value) {
            if (!value) {
                this.lib = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case LIB:
                    if (value == null) {
                        unsetLib();
                    } else {
                        setLib((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case LIB:
                    return getLib();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case LIB:
                    return isSetLib();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof loadLibrary_args)
                return this.equals((loadLibrary_args) that);
            return false;
        }

        public boolean equals(loadLibrary_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_lib = true && this.isSetLib();
            boolean that_present_lib = true && that.isSetLib();
            if (this_present_lib || that_present_lib) {
                if (!(this_present_lib && that_present_lib))
                    return false;
                if (!this.lib.equals(that.lib))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetLib()) ? 131071 : 524287);
            if (isSetLib())
                hashCode = hashCode * 8191 + lib.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(loadLibrary_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetLib(), other.isSetLib());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLib()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lib, other.lib);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("loadLibrary_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("lib:");
            if (this.lib == null) {
                sb.append("null");
            } else {
                sb.append(this.lib);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class loadLibrary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public loadLibrary_argsStandardScheme getScheme() {
                return new loadLibrary_argsStandardScheme();
            }
        }

        private static class loadLibrary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loadLibrary_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, loadLibrary_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // LIB
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.lib = iprot.readString();
                                struct.setLibIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, loadLibrary_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.lib != null) {
                    oprot.writeFieldBegin(LIB_FIELD_DESC);
                    oprot.writeString(struct.lib);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class loadLibrary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public loadLibrary_argsTupleScheme getScheme() {
                return new loadLibrary_argsTupleScheme();
            }
        }

        private static class loadLibrary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loadLibrary_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, loadLibrary_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetLib()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetLib()) {
                    oprot.writeString(struct.lib);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, loadLibrary_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.lib = iprot.readString();
                    struct.setLibIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class loadLibrary_result implements org.apache.thrift.TBase<loadLibrary_result, loadLibrary_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadLibrary_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadLibrary_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loadLibrary_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loadLibrary_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadLibrary_result.class, metaDataMap);
        }

        public loadLibrary_result() {
        }

        public loadLibrary_result(
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public loadLibrary_result(loadLibrary_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public loadLibrary_result deepCopy() {
            return new loadLibrary_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public loadLibrary_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof loadLibrary_result)
                return this.equals((loadLibrary_result) that);
            return false;
        }

        public boolean equals(loadLibrary_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(loadLibrary_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("loadLibrary_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class loadLibrary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public loadLibrary_resultStandardScheme getScheme() {
                return new loadLibrary_resultStandardScheme();
            }
        }

        private static class loadLibrary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loadLibrary_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, loadLibrary_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, loadLibrary_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class loadLibrary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public loadLibrary_resultTupleScheme getScheme() {
                return new loadLibrary_resultTupleScheme();
            }
        }

        private static class loadLibrary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loadLibrary_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, loadLibrary_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, loadLibrary_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class execute_args implements org.apache.thrift.TBase<execute_args, execute_args._Fields>, java.io.Serializable, Cloneable, Comparable<execute_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execute_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execute_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execute_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            SRC((short) 2, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execute_args.class, metaDataMap);
        }

        public execute_args() {
        }

        public execute_args(
                IWorkerId id,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public execute_args(execute_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public execute_args deepCopy() {
            return new execute_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public execute_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public execute_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof execute_args)
                return this.equals((execute_args) that);
            return false;
        }

        public boolean equals(execute_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(execute_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("execute_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class execute_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public execute_argsStandardScheme getScheme() {
                return new execute_argsStandardScheme();
            }
        }

        private static class execute_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<execute_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, execute_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, execute_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class execute_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public execute_argsTupleScheme getScheme() {
                return new execute_argsTupleScheme();
            }
        }

        private static class execute_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<execute_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, execute_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetSrc()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, execute_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class execute_result implements org.apache.thrift.TBase<execute_result, execute_result._Fields>, java.io.Serializable, Cloneable, Comparable<execute_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execute_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execute_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execute_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execute_result.class, metaDataMap);
        }

        public execute_result() {
        }

        public execute_result(
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public execute_result(execute_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public execute_result deepCopy() {
            return new execute_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public execute_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof execute_result)
                return this.equals((execute_result) that);
            return false;
        }

        public boolean equals(execute_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(execute_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("execute_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class execute_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public execute_resultStandardScheme getScheme() {
                return new execute_resultStandardScheme();
            }
        }

        private static class execute_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<execute_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, execute_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, execute_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class execute_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public execute_resultTupleScheme getScheme() {
                return new execute_resultTupleScheme();
            }
        }

        private static class execute_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<execute_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, execute_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, execute_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class executeTo_args implements org.apache.thrift.TBase<executeTo_args, executeTo_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeTo_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeTo_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeTo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeTo_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            SRC((short) 2, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeTo_args.class, metaDataMap);
        }

        public executeTo_args() {
        }

        public executeTo_args(
                IWorkerId id,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public executeTo_args(executeTo_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public executeTo_args deepCopy() {
            return new executeTo_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public executeTo_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public executeTo_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof executeTo_args)
                return this.equals((executeTo_args) that);
            return false;
        }

        public boolean equals(executeTo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(executeTo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("executeTo_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class executeTo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public executeTo_argsStandardScheme getScheme() {
                return new executeTo_argsStandardScheme();
            }
        }

        private static class executeTo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeTo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, executeTo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, executeTo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class executeTo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public executeTo_argsTupleScheme getScheme() {
                return new executeTo_argsTupleScheme();
            }
        }

        private static class executeTo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeTo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, executeTo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetSrc()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, executeTo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class executeTo_result implements org.apache.thrift.TBase<executeTo_result, executeTo_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeTo_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeTo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeTo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeTo_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeTo_result.class, metaDataMap);
        }

        public executeTo_result() {
        }

        public executeTo_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public executeTo_result(executeTo_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public executeTo_result deepCopy() {
            return new executeTo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public executeTo_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public executeTo_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof executeTo_result)
                return this.equals((executeTo_result) that);
            return false;
        }

        public boolean equals(executeTo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(executeTo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("executeTo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class executeTo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public executeTo_resultStandardScheme getScheme() {
                return new executeTo_resultStandardScheme();
            }
        }

        private static class executeTo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeTo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, executeTo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, executeTo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class executeTo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public executeTo_resultTupleScheme getScheme() {
                return new executeTo_resultTupleScheme();
            }
        }

        private static class executeTo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeTo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, executeTo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, executeTo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class voidCall_args implements org.apache.thrift.TBase<voidCall_args, voidCall_args._Fields>, java.io.Serializable, Cloneable, Comparable<voidCall_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voidCall_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new voidCall_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new voidCall_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            SRC((short) 2, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voidCall_args.class, metaDataMap);
        }

        public voidCall_args() {
        }

        public voidCall_args(
                IWorkerId id,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public voidCall_args(voidCall_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public voidCall_args deepCopy() {
            return new voidCall_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public voidCall_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public voidCall_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof voidCall_args)
                return this.equals((voidCall_args) that);
            return false;
        }

        public boolean equals(voidCall_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(voidCall_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("voidCall_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class voidCall_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidCall_argsStandardScheme getScheme() {
                return new voidCall_argsStandardScheme();
            }
        }

        private static class voidCall_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<voidCall_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, voidCall_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, voidCall_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class voidCall_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidCall_argsTupleScheme getScheme() {
                return new voidCall_argsTupleScheme();
            }
        }

        private static class voidCall_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<voidCall_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, voidCall_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetSrc()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, voidCall_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class voidCall_result implements org.apache.thrift.TBase<voidCall_result, voidCall_result._Fields>, java.io.Serializable, Cloneable, Comparable<voidCall_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voidCall_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new voidCall_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new voidCall_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voidCall_result.class, metaDataMap);
        }

        public voidCall_result() {
        }

        public voidCall_result(
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public voidCall_result(voidCall_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public voidCall_result deepCopy() {
            return new voidCall_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public voidCall_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof voidCall_result)
                return this.equals((voidCall_result) that);
            return false;
        }

        public boolean equals(voidCall_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(voidCall_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("voidCall_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class voidCall_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidCall_resultStandardScheme getScheme() {
                return new voidCall_resultStandardScheme();
            }
        }

        private static class voidCall_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<voidCall_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, voidCall_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, voidCall_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class voidCall_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidCall_resultTupleScheme getScheme() {
                return new voidCall_resultTupleScheme();
            }
        }

        private static class voidCall_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<voidCall_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, voidCall_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, voidCall_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class voidCall3_args implements org.apache.thrift.TBase<voidCall3_args, voidCall3_args._Fields>, java.io.Serializable, Cloneable, Comparable<voidCall3_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voidCall3_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new voidCall3_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new voidCall3_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId data; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            DATA((short) 2, "data"),
            SRC((short) 3, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // DATA
                        return DATA;
                    case 3: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voidCall3_args.class, metaDataMap);
        }

        public voidCall3_args() {
        }

        public voidCall3_args(
                IWorkerId id,
                org.ignis.rpc.driver.IDataFrameId data,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.data = data;
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public voidCall3_args(voidCall3_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetData()) {
                this.data = new org.ignis.rpc.driver.IDataFrameId(other.data);
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public voidCall3_args deepCopy() {
            return new voidCall3_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.data = null;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public voidCall3_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getData() {
            return this.data;
        }

        public voidCall3_args setData(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId data) {
            this.data = data;
            return this;
        }

        public void unsetData() {
            this.data = null;
        }

        /** Returns true if field data is set (has been assigned a value) and false otherwise */
        public boolean isSetData() {
            return this.data != null;
        }

        public void setDataIsSet(boolean value) {
            if (!value) {
                this.data = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public voidCall3_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case DATA:
                    if (value == null) {
                        unsetData();
                    } else {
                        setData((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case DATA:
                    return getData();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case DATA:
                    return isSetData();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof voidCall3_args)
                return this.equals((voidCall3_args) that);
            return false;
        }

        public boolean equals(voidCall3_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_data = true && this.isSetData();
            boolean that_present_data = true && that.isSetData();
            if (this_present_data || that_present_data) {
                if (!(this_present_data && that_present_data))
                    return false;
                if (!this.data.equals(that.data))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
            if (isSetData())
                hashCode = hashCode * 8191 + data.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(voidCall3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetData(), other.isSetData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("voidCall3_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("data:");
            if (this.data == null) {
                sb.append("null");
            } else {
                sb.append(this.data);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (data != null) {
                data.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class voidCall3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidCall3_argsStandardScheme getScheme() {
                return new voidCall3_argsStandardScheme();
            }
        }

        private static class voidCall3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<voidCall3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, voidCall3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.data = new org.ignis.rpc.driver.IDataFrameId();
                                struct.data.read(iprot);
                                struct.setDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, voidCall3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.data != null) {
                    oprot.writeFieldBegin(DATA_FIELD_DESC);
                    struct.data.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class voidCall3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidCall3_argsTupleScheme getScheme() {
                return new voidCall3_argsTupleScheme();
            }
        }

        private static class voidCall3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<voidCall3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, voidCall3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetData()) {
                    optionals.set(1);
                }
                if (struct.isSetSrc()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetData()) {
                    struct.data.write(oprot);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, voidCall3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.data = new org.ignis.rpc.driver.IDataFrameId();
                    struct.data.read(iprot);
                    struct.setDataIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class voidCall3_result implements org.apache.thrift.TBase<voidCall3_result, voidCall3_result._Fields>, java.io.Serializable, Cloneable, Comparable<voidCall3_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voidCall3_result");

        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new voidCall3_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new voidCall3_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voidCall3_result.class, metaDataMap);
        }

        public voidCall3_result() {
        }

        public voidCall3_result(
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public voidCall3_result(voidCall3_result other) {
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public voidCall3_result deepCopy() {
            return new voidCall3_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public voidCall3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof voidCall3_result)
                return this.equals((voidCall3_result) that);
            return false;
        }

        public boolean equals(voidCall3_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(voidCall3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("voidCall3_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class voidCall3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidCall3_resultStandardScheme getScheme() {
                return new voidCall3_resultStandardScheme();
            }
        }

        private static class voidCall3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<voidCall3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, voidCall3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, voidCall3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class voidCall3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidCall3_resultTupleScheme getScheme() {
                return new voidCall3_resultTupleScheme();
            }
        }

        private static class voidCall3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<voidCall3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, voidCall3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, voidCall3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class call_args implements org.apache.thrift.TBase<call_args, call_args._Fields>, java.io.Serializable, Cloneable, Comparable<call_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("call_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new call_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new call_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            SRC((short) 2, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(call_args.class, metaDataMap);
        }

        public call_args() {
        }

        public call_args(
                IWorkerId id,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public call_args(call_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public call_args deepCopy() {
            return new call_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public call_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public call_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof call_args)
                return this.equals((call_args) that);
            return false;
        }

        public boolean equals(call_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(call_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("call_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class call_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public call_argsStandardScheme getScheme() {
                return new call_argsStandardScheme();
            }
        }

        private static class call_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<call_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, call_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, call_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class call_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public call_argsTupleScheme getScheme() {
                return new call_argsTupleScheme();
            }
        }

        private static class call_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<call_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, call_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetSrc()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, call_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class call_result implements org.apache.thrift.TBase<call_result, call_result._Fields>, java.io.Serializable, Cloneable, Comparable<call_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("call_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new call_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new call_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(call_result.class, metaDataMap);
        }

        public call_result() {
        }

        public call_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public call_result(call_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public call_result deepCopy() {
            return new call_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public call_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public call_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof call_result)
                return this.equals((call_result) that);
            return false;
        }

        public boolean equals(call_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(call_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("call_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class call_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public call_resultStandardScheme getScheme() {
                return new call_resultStandardScheme();
            }
        }

        private static class call_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<call_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, call_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, call_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class call_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public call_resultTupleScheme getScheme() {
                return new call_resultTupleScheme();
            }
        }

        private static class call_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<call_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, call_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, call_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class call3_args implements org.apache.thrift.TBase<call3_args, call3_args._Fields>, java.io.Serializable, Cloneable, Comparable<call3_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("call3_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new call3_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new call3_argsTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable IWorkerId id; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId data; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            DATA((short) 2, "data"),
            SRC((short) 3, "src");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // DATA
                        return DATA;
                    case 3: // SRC
                        return SRC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IWorkerId.class)));
            tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.ISource.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(call3_args.class, metaDataMap);
        }

        public call3_args() {
        }

        public call3_args(
                IWorkerId id,
                org.ignis.rpc.driver.IDataFrameId data,
                org.ignis.rpc.ISource src) {
            this();
            this.id = id;
            this.data = data;
            this.src = src;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public call3_args(call3_args other) {
            if (other.isSetId()) {
                this.id = new IWorkerId(other.id);
            }
            if (other.isSetData()) {
                this.data = new org.ignis.rpc.driver.IDataFrameId(other.data);
            }
            if (other.isSetSrc()) {
                this.src = new org.ignis.rpc.ISource(other.src);
            }
        }

        public call3_args deepCopy() {
            return new call3_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.data = null;
            this.src = null;
        }

        @org.apache.thrift.annotation.Nullable
        public IWorkerId getId() {
            return this.id;
        }

        public call3_args setId(@org.apache.thrift.annotation.Nullable IWorkerId id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getData() {
            return this.data;
        }

        public call3_args setData(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId data) {
            this.data = data;
            return this;
        }

        public void unsetData() {
            this.data = null;
        }

        /** Returns true if field data is set (has been assigned a value) and false otherwise */
        public boolean isSetData() {
            return this.data != null;
        }

        public void setDataIsSet(boolean value) {
            if (!value) {
                this.data = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.ISource getSrc() {
            return this.src;
        }

        public call3_args setSrc(@org.apache.thrift.annotation.Nullable org.ignis.rpc.ISource src) {
            this.src = src;
            return this;
        }

        public void unsetSrc() {
            this.src = null;
        }

        /** Returns true if field src is set (has been assigned a value) and false otherwise */
        public boolean isSetSrc() {
            return this.src != null;
        }

        public void setSrcIsSet(boolean value) {
            if (!value) {
                this.src = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((IWorkerId) value);
                    }
                    break;

                case DATA:
                    if (value == null) {
                        unsetData();
                    } else {
                        setData((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case SRC:
                    if (value == null) {
                        unsetSrc();
                    } else {
                        setSrc((org.ignis.rpc.ISource) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case DATA:
                    return getData();

                case SRC:
                    return getSrc();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case DATA:
                    return isSetData();
                case SRC:
                    return isSetSrc();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof call3_args)
                return this.equals((call3_args) that);
            return false;
        }

        public boolean equals(call3_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_data = true && this.isSetData();
            boolean that_present_data = true && that.isSetData();
            if (this_present_data || that_present_data) {
                if (!(this_present_data && that_present_data))
                    return false;
                if (!this.data.equals(that.data))
                    return false;
            }

            boolean this_present_src = true && this.isSetSrc();
            boolean that_present_src = true && that.isSetSrc();
            if (this_present_src || that_present_src) {
                if (!(this_present_src && that_present_src))
                    return false;
                if (!this.src.equals(that.src))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
            if (isSetId())
                hashCode = hashCode * 8191 + id.hashCode();

            hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
            if (isSetData())
                hashCode = hashCode * 8191 + data.hashCode();

            hashCode = hashCode * 8191 + ((isSetSrc()) ? 131071 : 524287);
            if (isSetSrc())
                hashCode = hashCode * 8191 + src.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(call3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetData(), other.isSetData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetSrc(), other.isSetSrc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("call3_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("data:");
            if (this.data == null) {
                sb.append("null");
            } else {
                sb.append(this.data);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("src:");
            if (this.src == null) {
                sb.append("null");
            } else {
                sb.append(this.src);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (id != null) {
                id.validate();
            }
            if (data != null) {
                data.validate();
            }
            if (src != null) {
                src.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class call3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public call3_argsStandardScheme getScheme() {
                return new call3_argsStandardScheme();
            }
        }

        private static class call3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<call3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, call3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.id = new IWorkerId();
                                struct.id.read(iprot);
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.data = new org.ignis.rpc.driver.IDataFrameId();
                                struct.data.read(iprot);
                                struct.setDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SRC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.src = new org.ignis.rpc.ISource();
                                struct.src.read(iprot);
                                struct.setSrcIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, call3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    struct.id.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.data != null) {
                    oprot.writeFieldBegin(DATA_FIELD_DESC);
                    struct.data.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.src != null) {
                    oprot.writeFieldBegin(SRC_FIELD_DESC);
                    struct.src.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class call3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public call3_argsTupleScheme getScheme() {
                return new call3_argsTupleScheme();
            }
        }

        private static class call3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<call3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, call3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetData()) {
                    optionals.set(1);
                }
                if (struct.isSetSrc()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetId()) {
                    struct.id.write(oprot);
                }
                if (struct.isSetData()) {
                    struct.data.write(oprot);
                }
                if (struct.isSetSrc()) {
                    struct.src.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, call3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.id = new IWorkerId();
                    struct.id.read(iprot);
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.data = new org.ignis.rpc.driver.IDataFrameId();
                    struct.data.read(iprot);
                    struct.setDataIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.src = new org.ignis.rpc.ISource();
                    struct.src.read(iprot);
                    struct.setSrcIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class call3_result implements org.apache.thrift.TBase<call3_result, call3_result._Fields>, java.io.Serializable, Cloneable, Comparable<call3_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("call3_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new call3_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new call3_resultTupleSchemeFactory();

        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success; // required
        private @org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDataFrameId.class)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.ignis.rpc.driver.IDriverException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(call3_result.class, metaDataMap);
        }

        public call3_result() {
        }

        public call3_result(
                org.ignis.rpc.driver.IDataFrameId success,
                org.ignis.rpc.driver.IDriverException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public call3_result(call3_result other) {
            if (other.isSetSuccess()) {
                this.success = new org.ignis.rpc.driver.IDataFrameId(other.success);
            }
            if (other.isSetEx()) {
                this.ex = new org.ignis.rpc.driver.IDriverException(other.ex);
            }
        }

        public call3_result deepCopy() {
            return new call3_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDataFrameId getSuccess() {
            return this.success;
        }

        public call3_result setSuccess(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDataFrameId success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public org.ignis.rpc.driver.IDriverException getEx() {
            return this.ex;
        }

        public call3_result setEx(@org.apache.thrift.annotation.Nullable org.ignis.rpc.driver.IDriverException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((org.ignis.rpc.driver.IDataFrameId) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((org.ignis.rpc.driver.IDriverException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof call3_result)
                return this.equals((call3_result) that);
            return false;
        }

        public boolean equals(call3_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if (isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(call3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("call3_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class call3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public call3_resultStandardScheme getScheme() {
                return new call3_resultStandardScheme();
            }
        }

        private static class call3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<call3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, call3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new org.ignis.rpc.driver.IDataFrameId();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new org.ignis.rpc.driver.IDriverException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, call3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class call3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public call3_resultTupleScheme getScheme() {
                return new call3_resultTupleScheme();
            }
        }

        private static class call3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<call3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, call3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, call3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new org.ignis.rpc.driver.IDataFrameId();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new org.ignis.rpc.driver.IDriverException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
